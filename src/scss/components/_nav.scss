/// *offcanvas* and *page-container* are for creating the navigation of mobile site.
///
/// $key: `$style $direction animation $offcanvas-width $padding $background-color`
/// @group components
/// @param {list} $key - key 
/// @example markup - markup
/// <!-- include kit.js -->
/// <script src="path/to/kit.min.js"></script>
/// 
/// <!-- offcanvas -->
/// <nav class="nav">
///   <ul>
///     <li><span data-offcanvas-close>close</span></li>
///     <li><a href="">item01</a></li>
///     <li><a href="">item02</a></li>
///     <li><span data-icon-haschild><span class="ic-angle-right"></span></span><a href="">/// item03</a>
///       <ul data-offcanvas-subnav>
///         <li data-offcanvas-back>back</li>
///         <li><a href="">sub item02</a></li>
///         <li><a href="">sub item03</a></li>
///         <li><a href="">sub item04</a></li>
///       </ul>
///     </li>
///     <li><a href="">item04</a></li>
///   </ul>
/// </nav>
/// 
/// <!-- page -->
/// <div class="page">
///   <!-- page cover -->
///   <div data-page-cover=""></div>
/// 
///   <!-- nav icon -->
///   <div data-icon-nav></div>
/// </div>
/// @example scss - Usage
/// .nav { @include offcanvas(translate 300px '1em' left #102244 animation); }
/// // style: translate; (move | transition | reveal)
/// // offcanvas-width: 300px;
/// // nav-item-padding: 1em;
/// // direction: left; (left | right)
/// // offcanvas-background-color: #102244;
/// // animation: true;
/// 
/// @link http://creatiointl.org/gallery/william/rocket/components-offcanvas.php demo
/// @link https://github.com/ganlanyuan/rocket full document

@mixin nav($key) {
  $check: join($ro-nav-direction, $ro-nav-styles);
  // initalize $map-list, $map, $breakpoint
  $map-list: ();
  $map: ();
  $breakpoint: ();
  $duration: 0.3s;
  $width: 240px;

  $direction: ro-get($key, $ro-nav-direction, 'left');
  $style: ro-get($key, $ro-nav-styles, 'slide-in');
  $nav: ro-get-type($key, 'string', $check);
  $overlay-color: ro-get-type($key, 'color', false, rgba(0, 0, 0, 0.2));

  @each $item in $key {
    @if type-of($item) == 'number' {
      @if unit($item) == 's' {
        $duration: $item;
      } @else {
        $width: $item;
      }
    } @else if type-of($item) == 'map' {
      $map-list: append($map-list, $item);
    }
  }
  @if length($map-list) > 0 {
    $map: nth($map-list, 1);
    @if length($map-list) > 1 {
      $breakpoint: nth($map-list, 2);
    }
  }

  // define modules
  $page-push: false;
  $page-over-nav: false;
  $nav-push: false;
  $nav-push-val: false;
  $nav-transform: false;
  $overlay: false;
  $horizontal: false;
  $vertical: false;
  $rotate: false;
  $rotate-origin: false;
  $rotate-val: false;

  @if index(('reveal', 'push', 'slide-along', 'slide-out', 'rotate-in', 'rotate-out', 'rotate-in-reverse'), $style) {
    $page-push: true;
  }
  @if index(('reveal', 'slide-along', 'slide-out'), $style) {
    $page-over-nav: true;
  }
  @if index(('slide-in', 'slide-along', 'slide-out', 'push', 'drawer', 'rotate-in', 'rotate-out', 'rotate-in-reverse'), $style) {
    $nav-push: true;
  }
  @if index(('slide-in', 'push', 'drawer', 'rotate-in', 'rotate-out', 'rotate-in-reverse'), $style) {
    $nav-push-val: - $width;
  }
  @if index(('slide-along'), $style) {
    $nav-push-val: - ($width / 2);
  }
  @if index(('slide-out'), $style) {
    $nav-push-val: ($width / 2);
  }
  @if index(('rotate-in', 'rotate-out', 'rotate-in-reverse'), $style) {
    $nav-transform: true;
  }
  @if index(('slide-in', 'rotate-in', 'rotate-out', 'rotate-in-reverse', 'push', 'drawer'), $style) {
    $overlay: true;
  }
  @if index((left, right), $direction) {
    $horizontal: true;
  }
  @if index((top, bottom), $direction) {
    $vertical: true;
  }
  @if index(('rotate-in', 'rotate-out', 'rotate-in-reverse'), $style) {
    $rotate: true;
  }
  @if index(('rotate-in', 'rotate-out'), $style) {
    $rotate-origin: 100% 50% 0px;
  }
  @if index(('rotate-in-reverse'), $style) {
    $rotate-origin: 0% 50% 0px;
  }
  @if index(('rotate-in'), $style) {
    $rotate-val: perspective(#{$width}) rotateY(-90deg);
  }
  @if index(('rotate-out', 'rotate-in-reverse'), $style) {
    $rotate-val: perspective(#{$width}) rotateY(90deg);
  }

  // *** output *** //
  @at-root {
    #nav-toggle {
      position: absolute;
      left: -9999px;
    }
  }

  // page
  @if $page-push {
    @include transition($direction $duration);
    position: relative;
    #{$direction}: 0;

    @if $page-over-nav {
      z-index: map-get($ro-nav-z-index, 'page');
    }
    #nav-toggle:checked ~ & {
      #{$direction}: $width;
    }
  }

  // nav
  @at-root {
    #{$nav} {
      position: fixed;
      display: block;
      z-index: map-get($ro-nav-z-index, 'nav');
      box-sizing: border-box;
      #{$direction}: 0;

      @if $nav-push and $nav-transform {
        @include transition(transform $duration, margin-#{$direction} $duration);
      } @else if $nav-push {
        @include transition(margin-#{$direction} $duration);
      }
      @if $nav-push-val {
        margin-#{$direction}: $nav-push-val;
      }

      @if $horizontal {
        width: $width;
        bottom: 0;
        overflow-x: hidden;
        overflow-y: auto;
        @if $style == 'drawer' {
          @include nav-map(top, $map, $breakpoint); // set top value 
        } @else {
          top: 0;
        }
      } @else if $vertical {
        height: $width;
        left: 0;
        right: 0;
        overflow-x: auto;
        overflow-y: hidden;
      }

      @if $rotate-origin {
        @include transform-origin($rotate-origin);
        @include transform-style(preserve-3d);
      }
      @if $rotate-val {
        @include transform($rotate-val);
      }

    }
  }
  @if $nav-push {
    @if $page-over-nav {
      @at-root {
        #nav-toggle:checked ~ #{$nav} {
          margin-#{$direction}: 0;
        }
      }
    } @else {
      #nav-toggle:checked ~ & #{$nav} {
        margin-#{$direction}: 0;
        @if $rotate {
          @include transform(rotateY(0deg));
        }
      }
    }
  }

  // page-overlay
  @if $overlay {
    .page-overlay {
      @include transition(background $duration);
      position: fixed;
      display: block;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: transparent;
      z-index: map-get($ro-nav-z-index, 'page-overlay');
      #nav-toggle:checked ~ & {
        background-color: $overlay-color;
        .lt-ie9 & {
          background-color: opacify($overlay-color, 1);
          @include opacity(opacity($overlay-color));
        }
        @if $style == 'drawer' {
          @include nav-map(top, $map, $breakpoint); // set top value
        } @else {
          top: 0;
        }
      }
    }
  }

}

@mixin nav-map($prop, $map, $breakpoint) {
  $list: map-keys($map);
  @each $item in $list {
    @if $item == null {
      #{$prop}: map-get($map, $item);
      $list: reject($list, $item);
    } @else if map-has-key($breakpoint, $item) {
      $list: append($list, map-get($breakpoint, $item));
      $list: reject($list, $item);
      $map: map-merge($map, (map-get($breakpoint, $item): map-get($map, $item)));
      $map: map-remove($map, $item);
    }
  }
  
  $list: list-descend($list);
  @each $item in $list {
    @include bp('max' $item) {
      #{$prop}: map-get($map, $item);
    }
  }
}
