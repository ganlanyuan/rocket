/// First, set a specific class (or ID) for each slider.   
/// Then, use this class (or id) to set up the radio names and IDs as well as labels.   
/// **Autoheight**: Add `kit.min.js` to `html`, and then put `autoheight-carousel` attribute to the slideshow container (.outer).
/// 
/// $key: `($items by $perpage) (speed $speed) (timeout $timeout) hoverpause $gutter bypage center autoplay default`
/// @group components
/// @param {number | list} $key - key 
/// @example markup - Markup
/// <div class="banner">
///   <input type="radio" name="banner" id="banner-1" checked="">
///   <input type="radio" name="banner" id="banner-2">
///   <input type="radio" name="banner" id="banner-3">
///   <input type="radio" name="banner" id="banner-4">
///   <input type="radio" name="banner" id="banner-5">
///   <input type="checkbox" name="banner-autoplay" id="banner-autoplay" checked="">
///   <div class="outer">
///     <ul class="inner">
///       <li> slider01 </li>
///       <li> slider02 </li>
///       <li> slider03 </li>
///       <li> slider04 </li>
///       <li> slider05 </li>
///     </ul>
///   </div>
///   <div class="controls">
///     <label for="banner-1"><span class="prev"></span><span class="next"></span></label>
///     <label for="banner-2"><span class="prev"></span><span class="next"></span></label>
///     <label for="banner-3"><span class="prev"></span><span class="next"></span></label>
///     <label for="banner-4"><span class="prev"></span><span class="next"></span></label>
///     <label for="banner-5"><span class="prev"></span><span class="next"></span></label>
///   </div>
///   <div class="dots">
///     <label for="banner-1"><span class="normal"></span><span class="active"></span></label>
///     <label for="banner-2"><span class="normal"></span><span class="active"></span></label>
///     <label for="banner-3"><span class="normal"></span><span class="active"></span></label>
///     <label for="banner-4"><span class="normal"></span><span class="active"></span></label>
///     <label for="banner-5"><span class="normal"></span><span class="active"></span></label>
///   </div>
///   <div class="autoplay"><label for="banner-autoplay"><span></span></label></div>
/// </div>
/// @example scss - Usage
/// .slider { @include slider-carousel(5 by 2 bypage default); }
/// // items: 5;
/// // perpage: 2;
/// // gutter: 10px; (default)
/// // bypage: true;
/// // default: true; (default styles for controls and dots)
///
/// @link http://creatiointl.org/gallery/william/rocket/components-slider-carousel.php demo
/// @link https://github.com/ganlanyuan/rocket full document

@mixin slider-carousel($key){
  $items: 1;
  $perpage: 1;
  $gutter: 10px;
  $bypage: ro-get($key, 'bypage');
  $center: ro-get($key, 'center');
  $autoplay: ro-get($key, 'autoplay');
  $hoverpause: ro-get($key, 'hoverpause');
  $default: ro-get($key, 'default');
  $speed: ro-get-next($key, 'speed', 1s);
  $timeout: ro-get-next($key, 'timeout', 3s);
  $time-per-item: ($speed + $timeout);

  @if type-of($key) == 'number' {
    $items: $key;
  } @else if type-of($key) == list {
    @each $val in $key {

      @if index($key, by) {
        $items: ro-get-prev($key, by);
        $perpage: ro-get-next($key, by);
      } @else if type-of($val) == 'number' {
        @if unitless($val) {
          $items: $val;
        } @else {
          $gutter: $val;
        }
      }
    }
  }

  $half: 0;
  $pages: $items - $perpage + 1;
  $prefix: get-slider-selector(&);
  $id: "#" + $prefix;
  @if $center and $perpage > 1 { 
    $half: (1 / ($perpage * 2)); 
  }

  @at-root (without: media) { 
    @extend %slider-carousel-base;
    @at-root {
      // active dots
      @for $i from 1 through $items {
        #{$id}-#{$i}:checked ~ {
            .dots label:nth-child(#{$i}) .active { display: block; }
            .dots label:nth-child(#{$i}) .normal { display: none; }
        }
      }
    }

    // set default controls, dots and autoplay styles
    @if $default {
      @extend %slider-carousel-default-cont-dot;
      @if $autoplay {
        @extend %slider-carousel-default-autoplay;
        // hide dots when autoplay
        #{$id}-autoplay:checked ~ .dots { 
          display: none; 
          .no-cssanimations & { display: block !important; }
        }
      }
    }
  }

  // container and items
  .outer {
    @if $perpage != 1 { li { width: percentage(1/$perpage) } }
    @if $gutter and $gutter != 0 {
      @if not $center { margin: 0 (- $gutter); }
      .item { margin: 0 $gutter; }
    }
  }
  // set inner
  @for $i from 1 through $items {
    @at-root {
      #{$id}-#{$i}:checked ~ {
        .outer .inner { 
          @if ($i / $perpage) >= floor($items / $perpage) and 
              ($i / $perpage) < ceil($items / $perpage) {
            left: - percentage(($items / $perpage) - 1 - $half);
          }
          @else {
            left: - percentage(($i - 1) / $perpage + $half); 
          }
        }
      }
    }
  }

  // hide extra dots
  @if not $bypage {
    @if $center {
      .dots label:nth-child(n + #{$pages}) { display: none; }
    } @else {
      .dots label:nth-child(n + #{$pages + 1}) { display: none; }
    }
  }

  // set autoplay animation
  @if $autoplay {
    @if $default { 
      #{$id}-autoplay:checked ~ .autoplay {
        span, label:after {
          display: inline-block;
          border-width: 0;
          width: 5px;
          height: 13px;
          background-color: #fff;
        }
        span { margin: 7px 4px 0 0; }
        label:after {
          content: '';
        }
      }
    }

    $left-val: 0;
    $frames: 1;
    @if $bypage == true { $frames: ceil($items/$perpage); }
    @else { $frames: $items + 1 - $perpage; }
    $unit: (100/($time-per-item * $frames));

    @include keyframes(#{$prefix}-inner) {
      @for $i from 1 through $frames {
        @if $bypage == true {
          @if (- ($i - 1) * 100%) < percentage(1 - $items / $perpage) {
            $left-val: percentage(1 - $items / $perpage);
          } @else { 
            $left-val: (- ($i - 1) * 100%);
          }

          #{percentage((($i - 1) * $time-per-item) * $unit / 100)} { left: $left-val; }
          #{percentage(($i * $time-per-item - $speed) * $unit / 100)} { left: $left-val; }
        }
        @else { 
          $left-val: percentage(- ($i - 1) / $perpage);

          #{percentage((($i - 1) * $time-per-item) * $unit / 100)} { left: $left-val; }
          #{percentage(($i * $time-per-item - $speed) * $unit / 100)} { left: $left-val; }
        }
      }
      100% { left: 0; }
    }
    @at-root {
      #{$id}-autoplay:checked ~ {
        .outer > .inner { @include animation(#{$prefix}-inner $time-per-item * $frames ease infinite); }
        .controls { 
          display: none !important; 
          .no-cssanimations & { display: block !important; }
        }
      }
    }
    // pause on hover
    @if $hoverpause {
      &:hover {
        #{$id}-autoplay ~ .outer > .inner { 
          @include animation-play-state(paused); 
        }
      }
    }
  } @else { 
    .autoplay { display: none !important; } 
  }

  // set controls
  @at-root {
    @for $i from 1 through $items {
      #{$id}-#{$i}:checked ~ {
        .controls label:nth-child(n+1) { display: none; }
        @if $bypage == true {
          // prev
          @if $i == 1 {
            .controls label:nth-child(#{$items - $perpage + 1}),
            .controls label:nth-child(#{$items - $perpage + 1}) .prev { display: block; }
          }
          @else if $i > 1 and $i <= $perpage {
            .controls label:nth-child(1),
            .controls label:nth-child(1) .prev { display: block; }
          }
          @else {
            .controls label:nth-child(#{$i - $perpage}),
            .controls label:nth-child(#{$i - $perpage}) .prev { display: block; }
          }
          // next
          @if $i >= ($items - $perpage + 1) {
            .controls label:nth-child(1),
            .controls label:nth-child(1) .next { display: block; }
          }
          @else if $i > ($items - $perpage * 2 + 1) and $i < ($items - $perpage + 1) {
            .controls label:nth-child(#{$items - $perpage + 1}),
            .controls label:nth-child(#{$items - $perpage + 1}) .next { display: block; }
          }
          @else {
            .controls label:nth-child(#{$i + $perpage}),
            .controls label:nth-child(#{$i + $perpage}) .next { display: block; }
          }
        }
        @else if $center == true {
          @if $i == 1 {
            .controls label:nth-child(#{$pages}), 
            .controls label:nth-child(#{$i + 1}),
            .controls label:nth-child(#{$pages}) .prev, 
            .controls label:nth-child(#{$i + 1}) .next { display: block; }
          }
          @else if $i < ($pages - 1 ) {
            .controls label:nth-child(#{$i - 1}), 
            .controls label:nth-child(#{$i + 1}),
            .controls label:nth-child(#{$i - 1}) .prev, 
            .controls label:nth-child(#{$i + 1}) .next { display: block; }
          }
          @else {
            .controls label:nth-child(#{$i - 1}), 
            .controls label:nth-child(1),
            .controls label:nth-child(#{$i - 1}) .prev, 
            .controls label:nth-child(1) .next { display: block; }
          }
        }
        @else {
          @if $i == 1 {
            .controls label:nth-child(#{$pages}), 
            .controls label:nth-child(#{$i + 1}),
            .controls label:nth-child(#{$pages}) .prev, 
            .controls label:nth-child(#{$i + 1}) .next { display: block; }
          }
          @else if $i < $pages {
            .controls label:nth-child(#{$i - 1}), 
            .controls label:nth-child(#{$i + 1}),
            .controls label:nth-child(#{$i - 1}) .prev, 
            .controls label:nth-child(#{$i + 1}) .next { display: block; }
          }
          @else {
            .controls label:nth-child(#{$i - 1}), 
            .controls label:nth-child(1),
            .controls label:nth-child(#{$i - 1}) .prev, 
            .controls label:nth-child(1) .next { display: block; }
          }
        }
      }
    }
  }
}

%slider-carousel-base {
  position: relative;
  img { width: 100%; }
  & > input { position: absolute; left: -9999px; }
  .outer {
    overflow: hidden;
    li {
      display: inline-block;
      vertical-align: top;
      width: 100%;
      letter-spacing: 0; // restore letter-spacing
      box-sizing: border-box;
    }
  }
  .inner {
    @include clearfix();
    position: relative;
    letter-spacing: -0.34em; // remove white space between inline-block elements
    white-space: nowrap;
    transition: left 1s ease 0s;
  }
  [autoheight-carousel] {
    transition: height 0.3s ease 0s;
  }
}
%slider-carousel-default-cont-dot {
  .controls {
    @include clearfix();
    max-width: 7.5em;
    margin: 10px auto;
    span {
      font-size: 13px;
      padding: 5px 8px;
      border-radius: 3px;
      transition: background-color 0.3s;
      display: none;
      color: #fff;
      background-color: #15A9DC;
      &:hover { background-color: #7D9DAC; }
    }
    .prev { float: left; }
    .next { float: right; }
  }
  .dots {
    width: 100%;
    text-align: center;
    margin: 10px 0;
    letter-spacing: -0.34em; // remove white space between inline-block elements
    label, span {
      display: inline-block;
      vertical-align: top;
    }
    label {
      letter-spacing: 0; // restore letter-spacing
      padding: 0 3px;
      &:hover .normal { background-color: #5a5a5a; }
    }
    span {
      width: 9px;
      height: 9px;
      background-color: #d3d3d3;
      border-radius: 50%;
      transition: background-color 0.3s;
    }
    .active { background-color: #5a5a5a; display: none; }
  }
}
%slider-carousel-default-autoplay {
  .autoplay {
    opacity: 0;
    text-align: center;
    transition: opacity 1s;
    margin: 10px 0;
    .no-opacity & { display: none; }
    .no-cssanimations & { display: none !important; }
    > label {
      width: 30px;
      height: 30px;
      display: inline-block;
      background-color: #333;
      border-radius: 50%;
    }
    span {
      display: inline-block;
      width: 0;
      height: 0;
      border-color: transparent transparent transparent #fff;
      border-style: solid;
      border-width: 7px 0px 7px 13px;
      margin: 7px 0 0 3px;
    }
  }
  &:hover .autoplay { 
    opacity: 1; 
    .no-opacity & { display: block; } 
  }
}