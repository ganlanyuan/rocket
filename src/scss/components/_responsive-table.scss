@mixin responsive-table($key) {
  $style: args-get($key, ('flip-scroll' 'scroll' 'stack' 'toggle'), 'flip-scroll');
  $data: args-get-next($key, 'data');
  $border-color: args-get-type($key, 'color');
  $breakpoint: args-get-next($key, 'breakpoint', 768);
  $th-width: args-get-next($key, 'th-width', 50%);
  $count: args-get-next($key, 'count', 15);

  // normal
  @if $style == 'toggle' {
    overflow-x: auto;
    input {
      position: absolute; 
      left: -9999px;
    }
    label { font-size: 14px; }
    .control-panel {
      position: absolute;
      box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2);
      border: 1px solid #dbdbdb;
      border-radius: 3px;
      background: #fff;
      display: none;
      label {
        display: block;
        padding: 0.5em 1.2em;
        transition: background 0.3s;
        &:hover { background-color: #f2f2f2; }
      }
    }
    @include bp($breakpoint) {
      input ~ label { display: none; }
    }
  }

  // == small screen ==
  @include bp('max' $breakpoint) {
    // == stack ==
    @if $style == 'stack' {
      &, 
      thead, 
      tbody, 
      th, 
      td, 
      tr { display: block; }
      // Hide table headers (but not display: none;, for accessibility)
      thead tr { 
        position: absolute;
        top: -9999px;
        left: -9999px;
      }
      // Behave  like a "row"
      td { 
        // border
        @if $border-color {
          background: linear-gradient(to right, transparent $th-width, $border-color $th-width, $border-color calc(#{$th-width} + 1px), transparent calc(#{$th-width} + 1px)) 0 0 no-repeat;
        }
        // Now like a table header
        &:before { 
          display: inline-block;
          vertical-align: top;
          font-weight: bold;
          width: $th-width; 
          box-sizing: border-box;
        }
        // Label the data
        @if $data {
          @for $i from 1 through length($data) {
            &:nth-of-type(#{$i}):before { content: nth($data, $i);}
          }
        }
      }
      // fallback for IE9-
      .lt-ie10 & { 
        thead tr { position: static; }
        td:before { display: none; }
      }

    // == toggle ==
    } @else if $style == 'toggle' {
      table { margin-top: 0.5em; }
      th, td { display: none; }
      #control-panel:checked ~ .control-panel { display: block; }

      @for $i from 1 through $count {
        input:nth-of-type(#{$i}):checked ~ .control-panel label:nth-of-type(#{$i}) {
          background-color: #f2f2f2;
        }
        input:nth-of-type(#{$i}):checked ~ table th:nth-of-type(#{$i}),
        input:nth-of-type(#{$i}):checked ~ table td:nth-of-type(#{$i}) { 
          display: table-cell;
        }
      }
      #display-all:checked ~ table th,
      #display-all:checked ~ table td { 
        display: table-cell;
      }

    // == scroll ==
    } @else if $style == 'scroll' {
      position: relative;
      > .pinned {
        position: absolute;
        width: auto;
        background-color: #fff;
        th, td {
          &:nth-child(n+2) { display: none; }
        }
      }
      > .scrollable {
        display: block;
        overflow-x: auto;
        th, td { white-space: nowrap; }
      }
      // fallback for IE9-
      .lt-ie10 & { 
        > .pinned { display: none; }
        > .scrollable {
          display: table;
          th, td { white-space: normal; }
        }
      }
    // == flip-scroll ==
    } @else if $style == 'flip-scroll' {
      position: relative; 
      width: 100%;
      &,
      thead,
      thead tr,
      tbody,
      th,
      td { display: block; }
      > thead { float: left; }
      > tbody { 
        width: auto; 
        position: relative; 
        overflow-x: auto; 
        white-space: nowrap; 
        letter-spacing: -0.34em;
        > tr { 
          display: inline-block; 
          vertical-align: top; 
          letter-spacing: 0;
        }
      }
      // fallback for IE9-
      .lt-ie10 & { 
        > thead { float: none; }
        > tbody { white-space: normal; }
      }
    }

    @content;
  } // media query end <<

}

// shorthand
@mixin rp-table($key) {
  @include responsive-table($key) {
    @content;
  }
}
