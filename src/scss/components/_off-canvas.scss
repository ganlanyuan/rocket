// *** off-canvas *** //
@mixin off-canvas($key) {
  $mode: args-get($key, $ro-off-canvas-modes, 'slide-in');
  $direction: args-get($key, $ro-off-canvas-direction, 'left');
  $submenu: args-get($key, 'submenu');
  $overlay-color: args-get-type($key, 'color', false, rgba(0, 0, 0, 0.2));

  $global-bps: args-get-global-breakpoints($key);
  @if $global-bps { $key: list-remove($key, $global-bps); } // remove global-breakpoints from args if exist
  $bps: false;
  $condition: args-get($key, ('min' 'max'), 'min');
  $media-type: args-get($key, $ro-media-type);

  // get data
  $nav: false;
  $map: false;
  $duration: 0.3s;
  $nav-size: 240px;
  @if type-of($key) == 'map' {
    $map: $key;
  } @else if type-of($key) == 'string' {
    @if index(('.', '#', '['), str-slice($key, 1, 1)) { $nav: $key; }
  } @else if type-of($key) == 'list' {
    @each $item in $key {
      @if type-of($item) == 'map' {
        @if not $map { $map: $item; }
      } @else if type-of($item) == 'number' {
        @if unit($item) == 's' {
          $duration: $item;
        } @else {
          $nav-size: $item;
        }
      } @else if type-of($item) == 'string' {
        @if index(('.', '#', '['), str-slice($item, 1, 1)) { $nav: $item; }
      }
    }
  }

  // update map breakpoints
  @if $global-bps and $map { $map: map-update-breakpoints($map, $global-bps); }

  $axis: 'horizontal';
  $translate-size: if(index((left, top), $direction), $nav-size, - $nav-size);
  $translate-value: translateX(#{$translate-size});
  $rotate-shortcut: 'Y';
  
  @if index((top, bottom), $direction) {
    $axis: 'vertical';
    $translate-value: translateY(#{$translate-size});
    $rotate-shortcut: 'X';
  }

  // define modules
  $page-action: false;
  $page-over-nav: false;

  $nav-action: false;
  $nav-push: false;
  $nav-translate-size: - $nav-size;
  $nav-transform: false;
  $nav-outside: false;

  $overlay: true;
  $overlay-push: false;

  $horizontal: false;
  $vertical: false;

  $transform-origin: false;
  $rotate: false;
  $rotate-default: false;
  $rotate-active: false;
  $scale-default: translate3d(0px, 0px, 0px);
  $scale-active: perspective(1000px) translate3d(0px, 0px, -300px);
  
  @if $mode == 'slide-in'{
    $nav-action: 'translate';

  } @else if $mode == 'slide-along' {
    $page-action: 'translate';
    $page-over-nav: true;
    $nav-action: 'translate';
    $nav-translate-size: - ($nav-size / 2);

  } @else if $mode == 'slide-out' {
    $page-action: 'translate';
    $page-over-nav: true;
    $nav-action: 'translate';
    $nav-translate-size: ($nav-size / 2);

  } @else if $mode == 'rotate-in' {
    $page-action: 'translate';
    $nav-action: 'translate', 'rotate';

  } @else if $mode == 'rotate-out' {
    $page-action: 'translate';
    $nav-action: 'translate', 'rotate';

  } @else if $mode == 'rotate-in-reverse' {
    $page-action: 'translate';
    $nav-action: 'translate', 'rotate';

  } @else if $mode == 'scale-down' {
    $page-action: 'scale';
    $nav-action: 'translate';

  } @else if $mode == 'scale-up' {
    $page-action: 'translate';
    $page-over-nav: true;
    $nav-action: 'scale';

  } @else if $mode == 'open-door' {
    $page-action: 'rotate';
    $nav-action: 'translate';

  } @else if $mode == 'push' {
    $page-action: 'translate';
    $nav-action: 'translate';

  } @else if $mode == 'reveal' {
    $page-action: 'translate';
    $page-over-nav: true;

  } @else if $mode == 'drawer' {
    $nav-action: 'translate';
  }

  // @if index(('reveal', 'push', 'slide-along', 'slide-out', 'rotate-in', 'rotate-out', 'rotate-in-reverse', 'scale-up'), $mode) {
  //   $page-action: 'translate';
  // }
  // @if index(('scale-down', 'open-door'), $mode) {
  //   $page-action: 'transform';
  // }
  // @if index(('reveal', 'slide-along', 'slide-out', 'scale-up'), $mode) {
  //   $page-over-nav: true;
  // }

  // @if index(('slide-in', 'slide-along', 'slide-out', 'rotate-in', 'rotate-out', 'rotate-in-reverse', 'scale-down', 'open-door', 'push', 'drawer'), $mode) {
  //   $nav-push: true;
  // }
  // @if index(('slide-in', 'rotate-in', 'rotate-out', 'rotate-in-reverse', 'scale-down', 'open-door', 'push', 'drawer'), $mode) {
  //   $nav-translate-size: - $nav-size;
  // } @else if index(('slide-along'), $mode) {
  //   $nav-translate-size: - ($nav-size / 2);
  // } @else if index(('slide-out'), $mode) {
  //   $nav-translate-size: ($nav-size / 2);
  // }
  @if index(('rotate-in', 'rotate-out', 'rotate-in-reverse', 'scale-up'), $mode) {
    $nav-transform: true;
  }
  @if $page-over-nav or index(('scale-down', 'open-door'), $mode) {
    $nav-outside: true;
  }

  @if index(('slide-in', 'rotate-in', 'rotate-out', 'rotate-in-reverse', 'scale-down', 'open-door', 'scale-up', 'push', 'drawer'), $mode) {
    $overlay: true;
  }
  @if index(('slide-along', 'slide-out', 'rotate-in', 'rotate-in-reverse', 'rotate-out', 'reveal', 'scale-up', 'push'), $mode) {
    $overlay-push: true;
  }

  // @if index((left, right), $direction) {
  //   $horizontal: true;
  // } @else if index((top, bottom), $direction) {
  //   $vertical: true;
  // }

  @if index(('rotate-in', 'rotate-out', 'rotate-in-reverse'), $mode) {
    $rotate: true;
    @if $axis == 'horizontal' {
      $rotate-active: rotateY(0);
    } @else {
      $rotate-active: rotateX(0);
    }
  }
  @if index(('rotate-in', 'rotate-out', 'open-door'), $mode) {
    @if $direction == left {
      $transform-origin: 100% 50% 0px;
    } @else if $direction == right {
      $transform-origin: 0 50% 0px;
    } @else if $direction == top {
      $transform-origin: 50% 100% 0px;
    } @else if $direction == bottom {
      $transform-origin: 50% 0 0px;
    }
  }
  @if index(('rotate-in-reverse', 'scale-up'), $mode) {
    @if $direction == left {
      $transform-origin: 0 50% 0px;
    } @else if $direction == right {
      $transform-origin: 100% 50% 0px;
    } @else if $direction == top {
      $transform-origin: 50% 0 0px;
    } @else if $direction == bottom {
      $transform-origin: 50% 100% 0px;
    }
  }
  @if index(('rotate-in'), $mode) {
    @if $direction == left {
      $rotate-default: perspective(#{$nav-size}) rotateY(-90deg);
    } @else if $direction == right {
      $rotate-default: perspective(#{$nav-size}) rotateY(90deg);
    } @else if $direction == top {
      $rotate-default: perspective(#{$nav-size}) rotateX(90deg);
    } @else if $direction == bottom {
      $rotate-default: perspective(#{$nav-size}) rotateX(-90deg);
    }
  }
  @if index(('rotate-out', 'rotate-in-reverse'), $mode) {
    @if $direction == left {
      $rotate-default: perspective(#{$nav-size}) rotateY(90deg);
    } @else if $direction == right {
      $rotate-default: perspective(#{$nav-size}) rotateY(-90deg);
    } @else if $direction == top {
      $rotate-default: perspective(#{$nav-size}) rotateX(-90deg);
    } @else if $direction == bottom {
      $rotate-default: perspective(#{$nav-size}) rotateX(90deg);
    }
  }

  // *** output *** //
  // === page ===
  // page transition
  @include ro-transition(unquote("transform #{$duration}"));

  // page action
  @if $page-action == 'translate' {
    input:checked ~ & { @include ro-transform($translate-value); }

    .lt-ie9 & {
      input:checked ~ & { margin-#{$direction}: $nav-size; }
    }
  } @else {

    @if $page-action == 'scale' {
      input:checked ~ & { @include ro-transform(scale(0.8)); }

    } @else if $page-action == 'rotate' {
      @include ro-transform-origin($transform-origin);
      @include ro-transform-style(preserve-3d);
      input:checked ~ & {
        $page-rotate-angle: if(index((right, top), $direction), 7deg, -7deg);
        @include ro-transform(perspective(1000px) unquote('rotate#{$rotate-shortcut}(#{$page-rotate-angle})'));
        // @if $direction == left {
        //   @include ro-transform(perspective(1000px) rotateY(-7deg));
        // } @else if $direction == right {
        //   @include ro-transform(perspective(1000px) rotateY(7deg));
        // } @else if $direction == top {
        //   @include ro-transform(perspective(1000px) rotateX(7deg));
        // } @else if $direction == bottom {
        //   @include ro-transform(perspective(1000px) rotateX(-7deg));
        // }
      }
    }
  }

  // page over nav
  @if $page-over-nav {
    position: relative;
    z-index: map-get($ro-off-canvas-z-index, 'page');
    min-height: 100vh;
  }


  @if $submenu {
    // hide submenu on hide nav
    input:not(:checked) ~ & #{$nav} [data-submenu] { #{$direction}: - $nav-size; }
  }

  // === nav ===
  @at-root {
    #{$nav} {
      @include ro-transition(unquote('transform #{$duration}'));
      position: fixed;
      display: block;
      z-index: map-get($ro-off-canvas-z-index, 'nav');
      box-sizing: border-box;
      overflow-x: hidden;
      #{$direction}: 0;
      // > ul { position: relative; }

      // $transitionTem: ();
      // @if $nav-transform { $transitionTem: append($transitionTem, unquote("transform #{$duration}"), comma); }
      // @if index($nav-action, 'translate') { $transitionTem: append($transitionTem, unquote("margin-#{$direction} #{$duration}"), comma); }
      // @if length($transitionTem) > 0 {
      //   @include ro-transition($transitionTem);
      // }

      @if $nav-translate-size {
        margin-#{$direction}: $nav-translate-size;
      }

      @if $axis == 'horizontal' {
        width: $nav-size;
        bottom: 0;
        overflow-x: hidden;
        @if $mode == 'drawer' {
          @include nav-map(top, $map); // set top value 
        } @else {
          top: 0;
        }
      } @else {
        height: $nav-size;
        left: 0;
        right: 0;
        overflow-y: hidden;
      }

      @if index($nav-action, 'rotate') or index($nav-action, 'scale') {
        @include ro-transform-origin($transform-origin);
        @include ro-transform-style(preserve-3d);
        
        @if index($nav-action, 'rotate') {
          @include ro-transform($rotate-default);
        }

        @if index($nav-action, 'scale') {
          @include ro-transform($scale-active);
          input:checked ~ & {
            @include ro-transform($scale-default);
          }
        }
      }

      @if index($nav-action, 'translate') and $nav-outside {
        input:checked ~ & {
          margin-#{$direction}: 0;
        }
      }
      
      // submenu
      @if $submenu {
        [data-has-submenu] { 
          @include clearfix(); 
          > label {
            float: right;
          }
        }
        [data-submenu] {
          position: fixed;
          box-sizing: border-box;
          #{$direction}: - $nav-size;
          transition: #{$direction} #{$duration};
          @if $axis == 'horizontal' {
            width: $nav-size;
            height: 100%;
            overflow-x: hidden;
            @if $mode == 'drawer' {
              @include nav-map(top, $map); // set top value
            } @else {
              top: 0;
            }
          } @else {
            height: $nav-size;
            left: 0;
            right: 0;
          }
        }
        input:checked ~ [data-submenu] {
          #{$direction}: 0;
        }
      }
    }
  }
  @if index($nav-action, 'translate') {
    @if not $nav-outside {
      input:checked ~ & #{$nav} {
        margin-#{$direction}: 0;
        @if $rotate {
          @include ro-transform($rotate-active);
        }
      }
    }
  }

  // page-overlay
  @if $overlay {
    .page-overlay {
      @include ro-transition(unquote("background #{$duration}"));
      position: fixed;
      display: block;
      left: 0;
      right: 0;
      top: 0;
      bottom: 0;
      #{opposite($direction)}: auto;
      background: transparent;
      z-index: map-get($ro-off-canvas-z-index, 'page-overlay');
      @include ro-transition(all #{$duration});
      input:checked ~ & {
        // background
        background: $overlay-color;
        .lt-ie9 & {
          background: opacify($overlay-color, 1);
          @include opacity(opacity($overlay-color));
        }
        @if $mode == 'drawer' {
          @include nav-map(top, $map); // set top value
        } 
        // push
        #{opposite($direction)}: 0;
        @if $overlay-push {
          #{$direction}: $nav-size;
        } @else {
          #{$direction}: 0;
        }
      }
    }
  }

}

@mixin nav-map($prop, $map) {
  $bps: map-keys($map);

  @each $bp in $bps {
    @if $bp == null or $bp == 'default' {
      #{$prop}: map-get($map, $bp);
    } @else {
      @include bp('max' $bp) {
        #{$prop}: map-get($map, $bp);
      }
    }
  }
}