// *** off-canvas *** //
@mixin off-canvas($key) {
  @include check-arg-type($key, 'map');

  $mode: if(map-get($key, 'mode'), map-get($key, 'mode'), 'slide-in');
  $direction: if(map-get($key, 'direction'), map-get($key, 'direction'), 'left');
  $submenu: map-get($key, 'submenu');
  $inside: map-get($key, 'inside');
  $page: if(map-get($key, 'page'), map-get($key, 'page'), '.page');
  $nav: if(map-get($key, 'nav'), map-get($key, 'nav'), '.nav');
  $overlay-color: if(map-get($key, 'overlay-color'), map-get($key, 'overlay-color'), rgba(0, 0, 0, 0.1));

  $global-breakpoints: map-get($key, 'breakpoints');
  $local-breakpoints: false;
  $condition: if(map-get($key, 'condition'), map-get($key, 'condition'), 'min');
  $media-type: map-get($key, 'media-type');
  
  $duration: if(map-get($key, 'duration'), map-get($key, 'duration'), 0.3s);
  $nav-size: if(map-get($key, 'nav-size'), map-get($key, 'nav-size'), 240px);
  $tops: if(map-get($key, 'tops'), map-get($key, 'tops'), false);

  // update map breakpoints
  @if $global-breakpoints and $tops { $tops: map-update-breakpoints($tops, $global-breakpoints); }

  // set nav selector
  $nav-selector: if(not $inside, #{$nav}, #{$page} #{$nav});

  // set axis and transform shortcuts
  $axis: 'horizontal';
  $translate-shortcut: 'X';
  $rotate-shortcut: 'Y';
  @if index((top, bottom), $direction) {
    $axis: 'vertical';
    $translate-shortcut: 'Y';
    $rotate-shortcut: 'X';
  }

  // define modules
  $page-action: 'translate';
  $page-over-nav: false;
  $page-translate-size: if(index((left, top), $direction), $nav-size, - $nav-size);
  $page-transform-origin: false;
  $page-scale-default: scale(1);
  $page-scale-active: scale(0.8);

  $nav-action: false;
  $nav-translate-size: (- $page-translate-size);
  $nav-transform-origin: false;
  $nav-rotate-direction: false;
  $nav-rotate-axis-position: false;
  $nav-rotate-default: false;
  $nav-rotate-active: unquote('rotate#{$rotate-shortcut}(0)');
  $nav-scale-default: $page-scale-active;
  $nav-scale-active: $page-scale-default;
  $nav-transform-default: ();

  $overlay: true;
  $overlay-action: false;
  
  @if $mode == 'slide-in'{
    $page-action: false;
    $nav-action: 'translate';

  } @else if $mode == 'slide-along' {
    $page-over-nav: true;
    $nav-action: 'translate';
    $nav-translate-size: - ($nav-size / 2);

  } @else if $mode == 'slide-out' {
    $page-over-nav: true;
    $nav-action: 'translate';
    $nav-translate-size: ($nav-size / 2);

  } @else if $mode == 'rotate-in' {
    $page-over-nav: true;
    $nav-action: 'translate', 'rotate';
    $nav-rotate-direction: 'anticlockwise';
    $nav-rotate-axis-position: 'opposite';

  } @else if $mode == 'rotate-out' {
    $page-over-nav: true;
    $nav-action: 'translate', 'rotate';
    $nav-rotate-direction: 'clockwise';
    $nav-rotate-axis-position: 'opposite';

  } @else if $mode == 'rotate-in-reverse' {
    $page-over-nav: true;
    $nav-action: 'translate', 'rotate';
    $nav-rotate-direction: 'clockwise';
    $nav-rotate-axis-position: 'same';

  } @else if $mode == 'scale-down' {
    $page-action: 'scale';
    $nav-action: 'translate';

  } @else if $mode == 'scale-up' {
    $page-over-nav: true;
    $nav-action: 'scale';

  } @else if $mode == 'open-door' {
    $page-action: 'rotate';
    $page-transform-origin: 100% 50% 0;
    $nav-action: 'translate';

  } @else if $mode == 'push' {
    $nav-action: 'translate';

  } @else if $mode == 'reveal' {
    $page-over-nav: true;

  } @else if $mode == 'drawer' {
    $page-action: false;
    $nav-action: 'translate';
  }
  
  // set nav transform-origin
  $origin-x: 0;
  $origin-y: 0;
  $origin-z: 0;
  @if index((left, right), $direction) {
    $origin-y: 50%;

    @if $nav-rotate-axis-position == 'same' {
      $origin-x: if($direction == left, 0, 100%);
    } @else if $nav-rotate-axis-position == 'opposite' {
      $origin-x: if($direction == right, 0, 100%);
    }
  } @else {
    $origin-x: 50%;

    @if $nav-rotate-axis-position == 'same' {
      $origin-y: if($direction == top, 0, 100%);
    } @else if $nav-rotate-axis-position == 'opposite' {
      $origin-y: if($direction == bottom, 0, 100%);
    }
  }
  $nav-transform-origin: (#{$origin-x} #{$origin-y} #{$origin-z});

  // set nav rotate-default
  $nav-angle: if(index((left, bottom), $direction), -90deg, 90deg);
  @if $nav-rotate-direction == 'clockwise' { $nav-angle: - $nav-angle; }
  $nav-rotate-default: perspective(#{$nav-size}) unquote('rotate#{$rotate-shortcut}(#{$nav-angle})');

  // === page ===
  #{$page} {
    // page transition
    min-height: 100vh;
    @include ro-transition(transform #{$duration});

    // page action
    @if $page-action == 'translate' {
      input:checked ~ & { @include ro-transform(unquote('translate#{$translate-shortcut}(#{$page-translate-size})')); }

    } @else {
      @if $page-action == 'scale' {
        input:checked ~ & { @include ro-transform(#{$page-scale-active}); }

      } @else if $page-action == 'rotate' {
        @include ro-transform-origin($page-transform-origin);
        @include ro-transform-style(preserve-3d);

        input:checked ~ & {
          $page-rotate-angle: if(index((right, top), $direction), 7deg, -7deg);
          @include ro-transform(perspective(1000px) unquote('rotate#{$rotate-shortcut}(#{$page-rotate-angle})'));
        }
      }
    }

    // page over nav
    @if $page-over-nav {
      position: relative;
      z-index: map-get($ro-off-canvas-z-index, 'page');
    }

    // hide submenu on hide nav
    @if $submenu {
      input:not(:checked) ~ & #{$nav} [data-submenu] { #{$direction}: - $nav-size; }
    }
  }




  // === nav ===
  %nav-common {
    position: fixed;
    box-sizing: border-box;
    #{$direction}: 0;
    @if $axis == 'horizontal' {
      width: $nav-size;
      @if $mode == 'drawer' {
        @include nav-map(top, $tops); // set top value 
      } @else {
        top: 0;
      }
      bottom: 0;
      overflow-y: auto;
    } @else {
      height: $nav-size;
      left: 0;
      right: 0;
      overflow-x: auto;
    }
  }
  
  #{$nav-selector} {
    @extend %nav-common;
    z-index: map-get($ro-off-canvas-z-index, 'nav');
    @include ro-transition(transform #{$duration});

    @if index($nav-action, 'translate') {
      $nav-transform-default: (unquote('translate#{$translate-shortcut}(#{$nav-translate-size})'));
    }

    @if index($nav-action, 'rotate') or index($nav-action, 'scale') {
      @include ro-transform-origin($nav-transform-origin);
      @include ro-transform-style(preserve-3d);
      
      @if index($nav-action, 'rotate') {
        $nav-transform-default: append($nav-transform-default, $nav-rotate-default, space);
      }

      @if index($nav-action, 'scale') {
        $nav-transform-default: append($nav-transform-default, $nav-scale-default, space);
      }
    }

    @if length($nav-transform-default) != 0 {
      @include ro-transform($nav-transform-default);
      input:checked ~ & { @include ro-transform(none); }
    }

    // submenu
    @if $submenu {
      [data-has-submenu] { 
        @include clearfix(); 
        > label { float: right; }
      }
      [data-submenu] {
        @extend %nav-common;
        @include ro-transition(transform #{$duration});
        @include ro-transform(unquote('translate#{$translate-shortcut}(#{- $page-translate-size})'));
      }
      input:checked ~ [data-submenu] { 
        @include ro-transform(none); 
      }
    }
  }





  // === page-overlay ===
  #{$page} .page-overlay {
    @include ro-transition(opacity #{$duration});
    position: fixed;
    display: block;
    left: 0;
    top: 0;
    bottom: 0;
    z-index: map-get($ro-off-canvas-z-index, 'page-overlay');

    background: $overlay-color;
    opacity: 0;

    input:checked ~ & {
      @if $mode == 'drawer' { @include nav-map(top, $tops); } // set top value 
      right: 0;
      opacity: 1;
    }
  }

}

@mixin nav-map($prop, $tops) {
  $local-breakpoints: map-keys($tops);

  @each $bp in $local-breakpoints {
    @if $bp == null or $bp == 'default' {
      #{$prop}: map-get($tops, $bp);
    } @else {
      @include bp('max' $bp) {
        #{$prop}: map-get($tops, $bp);
      }
    }
  }
}