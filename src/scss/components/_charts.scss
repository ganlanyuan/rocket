/// pure css *tooltip*.
/// 
/// $key: `$direction $color radius (width $width) (height $height)`
/// @group components
/// @param {number | list} $key - key 
/// @example scss - Usage
/// .tooltip { @include tooltip(radius right #b02df3 width 300px); }
/// // radius: 0.22em; (This can be custmized by changing "$tooltip-radius: 0.22em !default;")
/// // direction: right;
/// // background-color: #b02df3;
/// // width: 300px; (for old browsers)
/// 
/// // it's better don't set tooltip element as a inline-block element 
/// 
/// @link http://creatiointl.org/gallery/william/rocket/components-tooltip.php demo
/// @link https://github.com/ganlanyuan/rocket full document

@mixin charts($key) {
  $chart-type: ro-get($key, $ro-charts-type, 'bar');
  $bar-height: ro-get-next($key, 'bar-height', 40px);
  $bar-gap: ro-get-next($key, 'bar-gap', 6em);
  $unit: ro-get-next($key, 'unit', 0.1);
  $color: ro-get-next($key, 'color');
  $gutter: ro-get-next($key, 'gutter');
  $hide: ro-get-next($key, 'hide');

  // set unit
  @if unitless($unit) {
    @if $unit < 1 {
      $unit: percentage($unit);
    } @else {
      $unit: percentage($unit / 100);
    }
  }
  // set grow, tick-grow, direction
  $grow: false;
  $tick-grow: false;
  $direction: false;
  @if $chart-type == 'bar' {
    $grow: width;
    $tick-grow: height;
    $direction: right;
  } @else if $chart-type == 'column' {
    $grow: height;
    $tick-grow: width;
    $direction: top;
  }

  // get data
  $data: false;
  @if type-of($key) == 'map' {
    $data: $key;
  } @else if type-of($key) == 'list' {
    // get data
    $data: ro-get-type($key, 'map');
  }
  $keys: map-keys($data);
  $values: map-values($data);

  // set line-color
  $line-color: #ddd;
  @if length($color) == (length(nth($values, 1)) + 1) {
    $line-color: nth($color, length($color));
  }


  // *** output *** //
  @if $chart-type == 'bar' or $chart-type == 'column' {
    position: relative;
    li {
      position: relative;
      strong { position: absolute; }
      > span {
        display: block;
        color: #fff;
        box-sizing: border-box;
        @for $i from 1 through length(nth($values, 1)) {
          &:nth-of-type(#{$i}) { background-color: nth($color, $i); }
        }
      }
    }
    .ticks {
      position: absolute;
      width: 100%;
      height: 100%;
      left: 0;
      top: 0;
      z-index: -1;
      > div {
        position: absolute;
        #{$grow}: 0;
        #{$tick-grow}: 100%;
        font-size: 0.7em;
        color: darken($line-color, 30%);
        border-#{$direction}: 1px solid $line-color;
      }
      span { 
        display: block; 
        width: 3em;
      }
    }
    .tags {
      position: absolute;
      div {
        display: inline-block;
        margin-right: 0.5em;
        font-size: 0.8em;
        text-transform: capitalize;
        &:before {
          content: '';
          width: 1em;
          height: 1em;
          margin-right: 0.25em;
          display: inline-block;
          vertical-align: middle;
        }
      }
    }
    @for $i from 1 through (100% / $unit + 1) {
      .tick-#{$i} { #{opposite($direction)}: ($unit * ($i - 1)); }
    }
    @for $i from 1 through length(nth($values, 1)) {
      .tag-#{$i}:before { background-color: nth($color, $i); }
    }
    @for $i from 1 through length($keys) {
      .item-#{$i} {
        > span {
          @for $j from 1 through length(nth($values, $i)) {
            &:nth-of-type(#{$j}) {
              #{$grow}: percentage(nth(nth($values, $i), $j) / 30);
            }
          }
        }
      }
    }
  }
  @if $chart-type == 'bar' {
    $gutter: 10px;

    margin-left: $bar-gap !important;
    li {
      padding: $gutter 0;
      strong {
        top: 0;
        @if unit($bar-gap) == 'px' {
          width: ($bar-gap - 10px);
        } @else if unit($bar-gap) == 'em' {
          width: ($bar-gap - 1em);
        } @else if unit($bar-gap) == 'rem' {
          width: ($bar-gap - 1rem);
        } @else if unit($bar-gap) == 'vw' {
          width: ($bar-gap - 1vw);
        }
        left: - $bar-gap;
        line-height: ($bar-height * length(nth($values, 1)));
        text-align: right;
        margin: $gutter 0;
      }
      span {
        height: $bar-height;
        line-height: $bar-height;
        padding-right: 0.8em;
        text-align: right;
      }
    }
    .ticks {
      @include clearfix(); 
      > div { text-align: right; }
      span {
        margin-top: -1.2em;
        margin-left: -1.5em;
        text-align: center;
      }
    }
    .tags { margin-top: 1em; }
  } @else if $chart-type == 'column' {
    $gutter: 0.2;
    $column-width: percentage((1 - $gutter) / length(nth($values, 1)));

    @include clearfix();
    li {
      float: left;
      padding-top: 60%;
      width: percentage(1 / length($keys));
      > strong {
        bottom: 0;
        width: 100%;
        text-align: center;
        margin-bottom: -2em;
      }
      > span {
        position: absolute;
        bottom: 0;
        width: $column-width;
        text-align: center;
        padding-top: 0.5em; 
        @for $i from 1 through length(nth($values, 1)) {
          &:nth-of-type(#{$i}) {
            left: (percentage($gutter / 2) + $column-width * ($i - 1));
          }
        }
      }
    }
    .ticks {
      span {
        margin-top: -0.5em;
        margin-left: -3.5em;
        text-align: right;
      }
    }
    .tags {
      right: 0;
      top: -1.5em;
      > div:last-child { margin-right: 0; }
    }
  }
}
