/// First, set a specific class (or ID) for each slider.   
/// Then, use this class (or id) to set up the radio names and IDs as well as labels.   
/// **Autoheight**: Add `kit.min.js` to `html`, and then put `autoheight-carousel` attribute to the slideshow container (.outer).
/// 
/// $key: `$items $time (ratio $ratio) (speed $speed) (timeout $timeout) hoverpause autoplay default`
/// @group components
/// @param {number | list} $key - key 
/// @example markup - Markup
/// <div class="banner">
///   <input type="radio" name="banner" id="banner-1" checked="">
///   <input type="radio" name="banner" id="banner-2">
///   <input type="radio" name="banner" id="banner-3">
///   <input type="radio" name="banner" id="banner-4">
///   <input type="radio" name="banner" id="banner-5">
///   <input type="checkbox" name="banner-autoplay" id="banner-autoplay" checked="">
///   <div class="outer">
///     <ul class="inner">
///       <li> slider01 </li>
///       <li> slider02 </li>
///       <li> slider03 </li>
///       <li> slider04 </li>
///       <li> slider05 </li>
///     </ul>
///   </div>
///   <div class="controls">
///     <label for="banner-1"><span class="prev"></span><span class="next"></span></label>
///     <label for="banner-2"><span class="prev"></span><span class="next"></span></label>
///     <label for="banner-3"><span class="prev"></span><span class="next"></span></label>
///     <label for="banner-4"><span class="prev"></span><span class="next"></span></label>
///     <label for="banner-5"><span class="prev"></span><span class="next"></span></label>
///   </div>
///   <div class="dots">
///     <label for="banner-1"><span class="normal"></span><span class="active"></span></label>
///     <label for="banner-2"><span class="normal"></span><span class="active"></span></label>
///     <label for="banner-3"><span class="normal"></span><span class="active"></span></label>
///     <label for="banner-4"><span class="normal"></span><span class="active"></span></label>
///     <label for="banner-5"><span class="normal"></span><span class="active"></span></label>
///   </div>
///   <div class="autoplay"><label for="banner-autoplay"><span></span></label></div>
/// </div>
/// 
/// @example scss - Usage
/// .slider { @include slider-gallery(5 speed 0.5s timeout 4s autoplay default); }
/// // items: 5;
/// // speed: 0.5s; (default 1s)
/// // timeout: 4s; (default 3s)
/// // autoplay: true;
/// // default: true; (default styles for controls and dots)
/// 
/// // customise dots and controls
/// .slider .dots .normal { ... }
/// .slider .dots .active { ... }
/// .slider .controls .prev { ... }
/// .slider .controls .next { ... }
/// 
/// // customise items
/// .slider {
///   // setting item
///   .outer { overflow: visible; }
///   li { 
///     @include transform(scale(1.1)); 
///     transition: all 1s ease 0s;
///   }
///   @for $i from 1 through 5 {
///     #gallery-c-#{$i}:checked ~ .outer li:nth-child(#{$i}) { @include transform(scale(1)); }
///   }
///   // setting .info
///   .info { opacity: 0; margin-left: 0;
///     -webkit-transition: all 1s $ro-global-bezier 0.5s;
///     transition: all 1s $ro-global-bezier 0.5s;
///    }
///   @for $i from 1 through 5 {
///     #gallery-c-#{$i}:checked ~ .outer li:nth-child(#{$i}) .info {
///       opacity: 1;
///       margin-left: 20px;
///     }
///   }
/// }
///
/// @link http://creatiointl.org/gallery/william/rocket/components-slider-gallery.php demo
/// @link https://github.com/ganlanyuan/rocket full document

@mixin slider-gallery($key){
  $items: 1;
  $autoplay: ro-get($key, 'autoplay');
  $default: ro-get($key, 'default');
  $hoverpause: ro-get($key, 'hoverpause');
  $speed: ro-get-next($key, 'speed', 1s);
  $timeout: ro-get-next($key, 'timeout', 3s);

  @if type-of($key) == number {
    $items: $key;
  } @else if type-of($key) == list {

    @each $item in $key {
      @if type-of($item) == number and unitless($item) {
        $items: $item;
      }
    }
  }

  $prefix: get-slider-selector(&);
  $id: "#" + $prefix;

  // *** output *** //
  // base
  & > input { position: absolute; left: -9999px; }
  .outer {
    position: relative;
    overflow: hidden;
  }
  .inner { 
    position: relative; 
    > li {
      @include item-normal; 
      box-sizing: border-box;
      transition: opacity $speed ease 0s;
    }
  }
  [autoheight-gallery] {
    transition: height ($speed / 2) ease 0s;
  }

  // setting items
  @for $i from 1 through $items {
    @at-root { 
      #{$id}-#{$i}:checked ~ {
        .outer li:nth-child(#{$i}) { 
          @include item-active; 
        }
      }
    }
  }

  // setting controls
  // default style
  @if $default {
    .controls {
      @include clearfix();
      max-width: 7.5em;
      margin: 10px auto;
      span {
        font-size: 13px;
        padding: 5px 8px;
        border-radius: 3px;
        transition: background-color 0.3s;
        display: none;
        color: #fff;
        background-color: #15A9DC;
        &:hover { background-color: #7D9DAC; }
      }
      .prev { float: left; }
      .next { float: right; }
    }
    .dots {
      width: 100%;
      text-align: center;
      margin: 10px 0;
      font-size: 0; // remove extra space from the blank between tags
      label, span {
        display: inline-block;
        vertical-align: top;
      }
      label {
        padding: 0 3px;
        &:hover .normal { background-color: #5a5a5a; }
      }
      span {
        width: 9px;
        height: 9px;
        background-color: #d3d3d3;
        border-radius: 50%;
        transition: background-color 0.3s;
      }
      .active { background-color: #5a5a5a; display: none; }
    }
  }
  // show and hide
  @for $i from 1 through $items {
    @at-root { 
      #{$id}-#{$i}:checked ~ {
        @if $i == 1 {
          .controls label:nth-child(#{$items}) .prev, 
          .controls label:nth-child(#{$i + 1}) .next { display: block; }
        }
        @else if $i == $items {
          .controls label:nth-child(#{$i - 1}) .prev, 
          .controls label:nth-child(1) .next { display: block; }
        }
        @else {
          .controls label:nth-child(#{$i - 1}) .prev, 
          .controls label:nth-child(#{$i + 1}) .next { display: block; }
        }
      }
    }
  }

  // setting dots
  @for $i from 1 through $items {
    @at-root { 
      #{$id}-#{$i}:checked ~ {
      .dots label:nth-child(#{$i}) .active { display: block; }
      .dots label:nth-child(#{$i}) .normal { display: none; }
      }
    }
  }

  // setting autoplay
  @if $autoplay {
    @if $default {
      .autoplay {
        opacity: 0;
        text-align: center;
        transition: opacity 1s;
        margin: 10px 0;
        .no-opacity & { display: none; }
        .no-cssanimations & { display: none !important; }
        > label {
          width: 30px;
          height: 30px;
          display: inline-block;
          background-color: #333;
          border-radius: 50%;
        }
        span {
          display: inline-block;
          width: 0;
          height: 0;
          border-color: transparent transparent transparent #fff;
          border-style: solid;
          border-width: 7px 0px 7px 13px;
          margin: 7px 0 0 3px;
        }
      }
      &:hover .autoplay { 
        opacity: 1; 
        .no-opacity & { display: block; } 
      }
      @at-root { 
        #{$id}-autoplay:checked ~ .autoplay { 
          span, label:after {
            display: inline-block;
            border-width: 0;
            width: 5px;
            height: 13px;
            background-color: #fff;
          }
          span { margin: 7px 4px 0 0; }
          label:after {
            content: '';
          } 
        }
      }
    }
    // animation
    @include keyframes(#{$prefix}) {
      0% { @include item-normal; }
      #{percentage($speed / ($timeout * $items))} { @include item-active; }
      #{percentage($timeout / ($timeout * $items))} { @include item-active; }
      #{percentage(($speed + $timeout) / ($timeout * $items))} { @include item-normal; }
    }
    @at-root { 
      #{$id}-autoplay:checked ~ {
        .controls, .dots { display: none !important; }
        .outer li {
          @include animation( #{$prefix} ($timeout * $items) ease infinite);
          @for $i from 2 through $items {
            &:nth-child(#{$i}) {
              @include animation-delay(($timeout * ($i - 1)));
            }
          }
        }
      }
    }
    // pause on hover
    @if $hoverpause {
      &:hover {
        #{$id}-autoplay ~ .outer li { 
          @include animation-play-state(paused); 
        }
      }
    }
  }
}

@mixin item-normal {
  @include opacity(0); 
  position: absolute;
  top: 0;
  z-index: nth($ro-slider-z-index, 4); 
}
@mixin item-active {
  @include opacity(1); 
  position: static;
  z-index: nth($ro-slider-z-index, 3); 
}