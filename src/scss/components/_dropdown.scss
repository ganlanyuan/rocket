// *** dropdown *** //
@mixin dropdown($key: 'ul'){
  $check: append(join(join($ro-dropdown-show, $ro-dropdown-style), $ro-dropdown-direction), 'default');

  $child: ro-get-type($key, 'string', $check, 'ul');
  $show: ro-get($key, $ro-dropdown-show, 'hover');
  $style: ro-get($key, $ro-dropdown-style, 'display');
  $direction: ro-get($key, $ro-dropdown-direction);
  $duration: ro-get-type($key, 'number', false, 0.3s);
  $default: ro-get($key, 'default');
  $path: false;

  
  // *** output *** //
  position: relative;
  @if $show == 'hover' { cursor: pointer; }
  // hide checkbox. 
  > input { 
    position: absolute;
    left: -9999px;
  }

  // add more hover space
  @if $show == 'hover' and $direction {
    &:before, 
    &:after {
      content: '';
      position: absolute;
      display: block;
      #{$direction}: 0;
    }
    &:before {
      top: -20px;
      width: 25px;
      height: 20px;
    }
    &:after {
      width: 35px;
      height: 30px;
    }
  }

  > #{$child} {
    // basic menu style
    position: absolute;
    transition: transform $duration, opacity ($duration / 2);
    
    // direction
    @if $direction {
      top: 0;
      #{opposite($direction)}: 100%;
    }

    // hide menu
    .no-csstransforms & { display: none; }
    @if $style == 'display' {
      display: none;
    } @else if $style == 'scale' {
      @include ro-transform-origin(50% 0% 0px);
      @include ro-transform-style(preserve-3d);
      @include ro-transform(scaleY(0.4));
      @include opacity(0);
    } @else if $style == 'rotate' {
      @include ro-transform-style(preserve-3d);
      @include ro-transform-origin(50% 0% 0px);
      @include ro-transform(rotateX(-30deg));
      @include opacity(0);
    }

    // default menu style
    @if $default {
      $bgc: #fff;
      $padding: 0.31em 1.25em;
      $border: 1px solid #dbdbdb;
      $border-radius: 0.19em;
      $shadow: rgba(0,0,0,0.15) 0px 6px 12px;

      background: $bgc;
      @if $border { border: $border; }
      @if $border-radius { border-radius: $border-radius; }
      @if $shadow { box-shadow: $shadow; }
      .current > a, li:hover > a { background: analogous($bgc 10%);}
      li { 
        transition: all $duration;
        &:first-child > a { padding-top: nth($padding, 1) * 2;}
        &:last-child > a { padding-bottom: nth($padding, 1) * 2;}
      }
      a { 
        display: block;
        padding: $padding;
        color: contrast($bgc);
        &:hover { text-decoration: none; }
      }
    }
  }

  // set path
  @if $show == 'hover' {
    $path: '&:hover >';
  } @else if $show == 'click' {
    $path: '> input:checked ~';
  }

  // show
  #{$path} #{$child} {
    .no-csstransforms & { display: block; }
    @if $style == 'display' {
      display: block;
    } @else if $style == 'scale' {
      @include ro-transform(scaleY(1));
      @include opacity(1);
    } @else if $style == 'rotate' {
      @include ro-transform(rotateX(0));
      @include opacity(1);
    }
  }
}