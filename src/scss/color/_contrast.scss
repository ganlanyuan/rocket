// contrast
//-----------------------------

$loops : 0;
@function approximateSq($num, $approx) {
  $root : (( $num / $approx ) + $approx) / 2;
  @return $root;
}

@function sqrt($num) {
  $root:0;
  $testRoot : 0;
  $upperBounds : round($num / 2) + 1; //never need over half the main number. Add one just to be sure!
  $loops : $upperBounds;
  @for $test from 2 through $upperBounds {
    $sq : $test * $test;
    @if $sq <= $num {
      $testRoot : $test;
    }
  }  
  $root : (approximateSq($num, $testRoot));
  @return $root;
}


// From John W. Long jlong
// Brightness math based on:
// http://www.nbdtech.com/Blog/archive/2008/04/27/Calculating-the-Perceived-Brightness-of-a-Color.aspx
  
$red-magic-number: 241;
$green-magic-number: 691;
$blue-magic-number: 68;
$brightness-divisor: $red-magic-number + $green-magic-number + $blue-magic-number;
 
@function brightness($color) {
  // Extract color components
  $red-component: red($color);
  $green-component: green($color);
  $blue-component: blue($color);
   
  // Calculate a brightness value in 3d color space between 0 and 255
  $number: sqrt((($red-component * $red-component * $red-magic-number) + ($green-component * $green-component * $green-magic-number) + ($blue-component * $blue-component * $blue-magic-number)) / $brightness-divisor);
   
  // Convert to percentage and return
  @return 100% * $number / 255;
}
 
@function contrast($color, $light: #fff, $dark: #000) {
  @if brightness($color) < 65% { @return $light; } 
  @else { @return $dark; }
} 

