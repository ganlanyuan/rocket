@function palette($key){
  $style: map-get($key, 'style');
  $color: map-get($key, 'color');
  $saturation: if(map-get($key, 'saturation'), map-get($key, 'saturation'), 0%);
  $lightness: if(map-get($key, 'lightness'), map-get($key, 'lightness'), 0%);
  $angle: if(map-get($key, 'angle'), map-get($key, 'angle'), 30);
  $scale: if(map-get($key, 'scale'), map-get($key, 'scale'), 0);

  $hue: hue($color);
  $target-hue: 0deg;
  
  @if $style == 'adjacent' {
    $target-hue: to-normal-hue(to-ideal-hue($hue) + $angle * $scale);
  }
  @if $style == 'complementary' {
    $target-hue: to-normal-hue(to-ideal-hue($hue) + 180);
  }
  @if $style == 'split-complementary' {
    @if $scale == 1 or $scale == -2 {
      $target-hue: to-normal-hue(to-ideal-hue($hue) + 180 - $angle);
    }
    @if $scale == 2 or $scale == -1 {
      $target-hue: to-normal-hue(to-ideal-hue($hue) + 180 + $angle);
    }
  }
  @if $style == 'triad' {
    @if $scale == 1 or $scale == -2 {
      $target-hue: to-normal-hue(to-ideal-hue($hue) + 120);
    }
    @if $scale == 2 or $scale == -1 {
      $target-hue: to-normal-hue(to-ideal-hue($hue) + 240);
    }
  }
  @if $style == 'rectangle' {
    @if abs($scale) == 1 {
      $target-hue: to-normal-hue(to-ideal-hue($hue) + $angle * $scale);
    }
    @if $scale == 2 {
      $target-hue: to-normal-hue(to-ideal-hue($hue) + 180);
    }
    @if abs($scale) == 3 {
      $target-hue: to-normal-hue(to-ideal-hue($hue) + 180 + $angle * $scale / 3);
    }
  }
  @if $style == 'square' {
    @if $scale == 1 or $scale == -3 {
      $target-hue: to-normal-hue(to-ideal-hue($hue) + 90);
    }
    @if $scale == 2 {
      $target-hue: to-normal-hue(to-ideal-hue($hue) + 180);
    }
    @if $scale == 3 or $scale == -1 {
      $target-hue: to-normal-hue(to-ideal-hue($hue) + 270);
    }
  }

  // return value
  @return adjust-color($color, $hue: ( $target-hue - $hue ), $saturation: $saturation, $lightness: $lightness);
}


// to-ideal-hue
@function to-ideal-hue($hue){
  $ideal-hue: 0;
  $gap: 0;
  @while $hue >= 360 { $hue: ($hue - 360); }
  @while $hue < 0 { $hue: ($hue + 360); }
  
  @if $hue == 0deg {
    $ideal-hue: 0;
  }
  @else {
    @for $i from 1 through length($ro-normal-model) {
      @if $hue >= nth($ro-normal-model, $i) and
        $hue < nth($ro-normal-model, $i + 1) {
        $gap: (nth($ro-ideal-model, $i + 1) - nth($ro-ideal-model, $i)) * ($hue - nth($ro-normal-model, $i)) / (nth($ro-normal-model, $i + 1) - nth($ro-normal-model, $i));
        $ideal-hue: nth($ro-ideal-model, $i) + $gap;
      }
    }
  }
  @return $ideal-hue;
}

// to-normal-hue
@function to-normal-hue($hue){
  $normal-hue: 0;
  $gap: 0;
  @while $hue >= 360 { $hue: $hue - 360; }
  @while $hue < 0 { $hue: ($hue + 360); }

  @if $hue == 0deg {
    $ideal-hue: 0;
  }
  @else {
    @for $i from 1 through length($ro-ideal-model) {
      @if $hue >= nth($ro-ideal-model, $i) and
        $hue < nth($ro-ideal-model, $i + 1) {
        $gap: (nth($ro-normal-model, $i + 1) - nth($ro-normal-model, $i)) * ($hue - nth($ro-ideal-model, $i)) / (nth($ro-ideal-model, $i + 1) - nth($ro-ideal-model, $i));
        $normal-hue: nth($ro-normal-model, $i) + $gap;
      }
    }
  }
  @return $normal-hue;
}

// adjacent
@function adjacent($key) {
  @return palette(map-merge($key, ('style': 'adjacent')));
}

// complementary
@function complementary($key) {
  @return palette(map-merge($key, ('style': 'complementary')));
}

// split-complementary
@function split-complementary($key) {
  @return palette(map-merge($key, ('style': 'split-complementary')));
}

// triad
@function triad($key) {
  @return palette(map-merge($key, ('style': 'triad')));
}

// rectangle
@function rectangle($key) {
  @return palette(map-merge($key, ('style': 'rectangle')));
}

// square
@function square($key) {
  @return palette(map-merge($key, ('style': 'square')));
}
