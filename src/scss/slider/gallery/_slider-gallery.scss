// *** slider-gallery *** //
@import 'base';

@mixin slider-gallery(
  $items: 5,
  $ratio: 619/1100, 
  $hide: 'none', // none | controls | dots | autoplay
  $default: true
){
  $prefix: get-slider-selector(&);
  $id: "#" + $prefix;
  @at-root (without: media) { // @at-root start

    // base
    @extend %slide-base; 
    @extend %slide-fade-base;
    .slider-container { padding-bottom: percentage($ratio); }

    // setting items
    @for $i from 1 through $items {
      @at-root { 
        #{$id}-#{$i}:checked ~ {
          .slider-container li:nth-child(#{$i}) { 
            @extend %item-active;
          }
        }
      }
    }

    // setting controls
    @if str-index($hide, 'controls') == null {
      // default style
      @if $default == true { @extend %default-controls; }
      // show and hide
      @for $i from 1 through $items {
        @at-root { 
          #{$id}-#{$i}:checked ~ {
            @if $i == 1 {
              .controls label:nth-child(#{$items}) .prev, 
              .controls label:nth-child(#{$i + 1}) .next { @extend %show; }
            }
            @else if $i == $items {
              .controls label:nth-child(#{$i - 1}) .prev, 
              .controls label:nth-child(1) .next { @extend %show; }
            }
            @else {
              .controls label:nth-child(#{$i - 1}) .prev, 
              .controls label:nth-child(#{$i + 1}) .next { @extend %show; }
            }
          }
        }
      }
    }

    // setting dots
    @if str-index($hide, 'dots') == null {
      @if $default == true { @extend %default-dots; }
      @for $i from 1 through $items {
        @at-root { 
          #{$id}-#{$i}:checked ~ {
          .dots label:nth-child(#{$i}) .active { @extend %show; }
          .dots label:nth-child(#{$i}) .normal { @extend %hide; }
          }
        }
      }
    }

    // setting autoplay
    @if str-index($hide, 'autoplay') == null {
      @if $default {
        @extend %default-autoplay;
        @at-root { 
          #{$id}-autoplay:checked ~ .autoplay { 
            label:before { content: '1'; } 
          }
          // #{$id}-autoplay:checked ~ {
          //   .dots, .controls { 
          //     opacity: 0; 
          //     @at-root {
          //       #{selector-nest(#{'.' + $prefix + ':hover '}, &)} { opacity: 1; }
          //     }
          //   }
          // } 
        }
      }
      // animation
      $unit: (100/($peritem * $items));
      @for $i from 1 through $items {
        @include keyframes(#{$prefix}-#{$i}) {
          @if $i == 1 {
            #{percentage(($peritem * $items - $pause)*$unit/100)} { @include item-normal; }
            #{percentage(($peritem * $items)*$unit/100)} { @include item-active; }
          }
          @else {
            #{percentage(($peritem * ($i - 1) - $pause)*$unit/100)} { @include item-normal; }
            #{percentage(($peritem * ($i - 1))*$unit/100)} { @include item-active; }
          }
          #{percentage(($peritem * $i - $pause)*$unit/100)} { @include item-active; }
          #{percentage(($peritem * $i)*$unit/100)} { @include item-normal; }
        }
        @at-root { 
          #{$id}-autoplay:checked ~ {
            .slider-container li:nth-child(#{$i}) {
              @include animation( #{$prefix}-#{$i} $peritem * $items ease infinite);
            }
          }
        }
      }
      // pause on hover
      // &:hover {
      //   #{$id}-autoplay ~ .slider-container li { 
      //     @include animation-play-state(paused); 
      //   }
      // }
    }

    // hide controls, dots or autoplay
    @each $item in controls, dots, autoplay {
      @if str-index($hide, $item) != null {
        & .#{$item} { display: none !important; }
      }
    }

  } // @at-root end
}