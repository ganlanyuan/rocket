/// A pure CSS responsive slider with previous/next buttons, nav dots, autoplay(IE8- are not supported), autoheight and more. It works well on modern browsers and IE8+, but it doesn't support loop and lazyload for now.
/// **markup**
/// First, set a specific class (or ID) for each slider.
/// Then, use this class (or id) to set up the radio names and IDs as well as labels.
/// In the example shows on the left, I used banner as my specific class. 
/// 
/// $key: `$items $ratio autoplay default`
/// @group slider
/// @param {number | list} $key - key 
/// @example markup - markup
/// <div class="banner">
///   <input type="radio" name="banner" id="banner-1" checked="">
///   <input type="radio" name="banner" id="banner-2">
///   <input type="radio" name="banner" id="banner-3">
///   <input type="radio" name="banner" id="banner-4">
///   <input type="radio" name="banner" id="banner-5">
///   <input type="checkbox" name="banner-autoplay" id="banner-autoplay" checked="">
///   <div class="outer">
///     <ul class="inner">
///       <li> slider01 </li>
///       <li> slider02 </li>
///       <li> slider03 </li>
///       <li> slider04 </li>
///       <li> slider05 </li>
///     </ul>
///   </div>
///   <div class="controls">
///     <label for="banner-1"><span class="prev"></span><span class="next"></span></label>
///     <label for="banner-2"><span class="prev"></span><span class="next"></span></label>
///     <label for="banner-3"><span class="prev"></span><span class="next"></span></label>
///     <label for="banner-4"><span class="prev"></span><span class="next"></span></label>
///     <label for="banner-5"><span class="prev"></span><span class="next"></span></label>
///   </div>
///   <div class="dots">
///     <label for="banner-1"><span class="normal"></span><span class="active"></span></label>
///     <label for="banner-2"><span class="normal"></span><span class="active"></span></label>
///     <label for="banner-3"><span class="normal"></span><span class="active"></span></label>
///     <label for="banner-4"><span class="normal"></span><span class="active"></span></label>
///     <label for="banner-5"><span class="normal"></span><span class="active"></span></label>
///   </div>
///   <div class="autoplay"><label for="banner-autoplay"><span></span></label></div>
/// </div>
/// @example scss - scss
/// .slider { @include slider-gallery(5 autoplay default); }
/// // items: 5;
/// // ratio: 9/16; (default) 
/// // autoplay: true;
/// // default: true; (default styles for controls and dots)
/// 
/// // customise dots and controls
/// .slider .dots .normal { ... }
/// .slider .dots .active { ... }
/// .slider .controls .prev { ... }
/// .slider .controls .next { ... }
/// 
/// // customise items
/// .slider {
///   .outer { overflow: visible; }
///   li { @include transform(scale(1.1)); }
///   @for $i from 1 through 5 {
///     #gallery-b-#{$i}:checked ~ .slider-container li:nth-child(#{$i}) { @include transform(scale(1)); }
///   }
/// }
/// 
/// @link https://github.com/ganlanyuan/rocket full document

@mixin slider-gallery($key){
  $items: 1;
  $ratio: 9/16; 
  $autoplay: false;
  $default: false;

  @if type-of($key) == number {
    $items: $key;
  } @else if type-of($key) == list {
    @if index($key, ratio) {
      $ratio: get-next($key, ratio);
      $key: reject($key, $ratio);
    }
    @if index($key, autoplay) {
      $autoplay: true;
    }
    @if index($key, default) {
      $default: true;
    }

    @for $i from 1 through length($key) {
      $val: nth($key, $i);
      
      @if type-of($val) == number {
        $items: $val;
      }
    }
  }

  $prefix: get-slider-selector(&);
  $id: "#" + $prefix;

  @at-root (without: media) { // @at-root (without: media) start
    // base
    @extend %slide-base; 
    @extend %slide-fade-base;
    .outer { padding-bottom: percentage($ratio); }

    // setting items
    @for $i from 1 through $items {
      @at-root { 
        #{$id}-#{$i}:checked ~ {
          .outer li:nth-child(#{$i}) { 
            @extend %item-active;
          }
        }
      }
    }

    // setting controls
    // default style
    @if $default { @extend %default-controls; }
    // show and hide
    @for $i from 1 through $items {
      @at-root { 
        #{$id}-#{$i}:checked ~ {
          @if $i == 1 {
            .controls label:nth-child(#{$items}) .prev, 
            .controls label:nth-child(#{$i + 1}) .next { @extend %show; }
          }
          @else if $i == $items {
            .controls label:nth-child(#{$i - 1}) .prev, 
            .controls label:nth-child(1) .next { @extend %show; }
          }
          @else {
            .controls label:nth-child(#{$i - 1}) .prev, 
            .controls label:nth-child(#{$i + 1}) .next { @extend %show; }
          }
        }
      }
    }

    // setting dots
    @if $default == true { @extend %default-dots; }
    @for $i from 1 through $items {
      @at-root { 
        #{$id}-#{$i}:checked ~ {
        .dots label:nth-child(#{$i}) .active { @extend %show; }
        .dots label:nth-child(#{$i}) .normal { @extend %hide; }
        }
      }
    }

    // setting autoplay
    @if $autoplay {
      @if $default {
        @extend %default-autoplay;
        @at-root { 
          #{$id}-autoplay:checked ~ .autoplay { 
            label:before { content: '1'; } 
          }
        }
      }
      // animation
      @include keyframes(#{$prefix}) {
        0% { @include item-normal; }
        #{percentage($ro-slider-play / ($ro-slider-peritem * $items))} { @include item-active; }
        #{percentage($ro-slider-peritem / ($ro-slider-peritem * $items))} { @include item-active; }
        #{percentage(($ro-slider-play + $ro-slider-peritem) / ($ro-slider-peritem * $items))} { @include item-normal; }
      }
      @at-root { 
        #{$id}-autoplay:checked ~ {
          .controls, .dots { display: none !important; }
          .outer li {
            @include animation( #{$prefix} $ro-slider-peritem * $items ease infinite);
            @for $i from 2 through $items {
              &:nth-child(#{$i}) {
                @include animation-delay(($ro-slider-peritem * ($i - 1)));
              }
            }
          }
        }
      }
      // pause on hover
      // &:hover {
      //   #{$id}-autoplay ~ .outer li { 
      //     @include animation-play-state(paused); 
      //   }
      // }
    }

  } // @at-root (without: media) end
}
