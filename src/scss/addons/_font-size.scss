/// Responsive type.
/// 
/// $key: `$map $breakpoints $condition`
/// @group addons
/// @param {map | list} $key - key 
/// @example scss - Usage
/// $bp: (
///   small : 480px,
///   medium: 700px,
///   large : 1024px
/// );
/// $p-font-sizes: (
///   null  : (15px 1.3),
///   small : 16px,
///   medium: (17px 1.4),
///   900px : 18px,
///   large : (19px 1.45),
///   1440px: 20px,
/// );
/// $h3-font-sizes: (
///   null  : (18px 1.3),
///   900px : 22px,
///   large : (30px 1.2),
/// );
/// h3.example-font-size { @include font-size($h3-font-sizes $bp); }
/// p.example-font-size { @include font-size($p-font-sizes $bp); }
/// 
/// @link http://creatiointl.org/gallery/william/rocket/addons-font-size.php demo
/// @link https://github.com/ganlanyuan/rocket full document

@mixin responsive-type($key) {
  $map: false;
  $breakpoints: false;
  @each $item in $key {
    @if type-of($item) == 'map' {
      @if not $map {
        $map: $item;
      } @else {
        $breakpoints: $item;
      }
    }
  }

  // *** output *** //
  @each $breakpoint, $type in $map {
    @if $breakpoint == null {
      @include type($type);
    } @else {
      // If $type is a key that exists in $breakpoints, use the value
      @if map-has-key($breakpoints, $breakpoint) {
        $breakpoint: map-get($breakpoints, $breakpoint);
      }

      @include bp('min' $breakpoint) {
        @include type($type);
      }
    }
  }
}


@mixin font-size($key) {
  @include responsive-type($key);
}