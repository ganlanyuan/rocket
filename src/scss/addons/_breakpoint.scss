/// A shorthand @mixin for *break point*. Accept maximumly 6 breakpoints. 
/// 
/// $key: `$condition $media $breakpoints`
/// @group addons
/// @param {list} $key - key 
/// @example scss - Usage
/// .bp { @include breakpoint('min' 640) {}; }
/// // output: @media (min-width: 40em) {};
/// .bp {@include breakpoint('max' 640 screen) {}; }
/// // output: @media screen and (max-width: 40em) {};
/// .bp {@include breakpoint(640 767) {}; }
/// // output: @media (min-width: 40em) and (max-width: 47.94em) {};
/// 
/// @link http://creatiointl.org/gallery/william/rocket/addons-breakpoint.php demo
/// @link https://github.com/ganlanyuan/rocket full document

@mixin breakpoint($key){
  $condition: ro-get($key, ('min' 'max'), 'min');
  $media: ro-get($key, $ro-media-types);

  // get breakpoints
  $key-em: ();
  @each $item in $key {
    @if type-of($item) == 'number' {
      @if strip-unit($item) == 0 {
        $item: 0;
      } @else if unitless($item) or unit($item) == 'px' {
        $item: em($item);
      }

      $key-em: append($key-em, $item);
    }
  }

  $single: false;
  $min-1: false;
  $max-1: false;
  $min-2: false;
  $max-2: false;
  $min-3: false;
  $max-3: false;

  $length: length($key-em);
  @if $length == 1 {
    $single: nth($key-em, 1);
  } 
  @if $length >= 2 {
    $min-1: nth($key-em, 1);
    $max-1: nth($key-em, 2);
  } 
  @if $length >= 3 {
    $min-2: nth($key-em, 3);
  } 
  @if $length >= 4 {
    $max-2: nth($key-em, 4);
  } 
  @if $length >= 5 {
    $min-3: nth($key-em, 5);
  } 
  @if $length >= 6 {
    $max-3: nth($key-em, 6);
  }
  @if $length > 6 {
    @warn 'You are passing more than 6 breakpoints, they are too many for me ^^';
  }

  // *** output *** //
  @if $media {
    @if $length == 1 {
      @media #{$media} and (#{$condition}-width: $single) {
        @content;
      }
    } 
    @if $length == 2 {
      @media #{$media} and (min-width: $min-1) and (max-width: $max-1) {
        @content;
      }
    } 
    @if $length == 3 {
      @media #{$media} and (min-width: $min-1) and (max-width: $max-1), 
             #{$media} and (min-width: $min-2) {
        @content;
      }
    } 
    @if $length == 4 {
      @media #{$media} and (min-width: $min-1) and (max-width: $max-1), 
             #{$media} and (min-width: $min-2) and (max-width: $max-2) {
        @content;
      }
    } 
    @if $length == 5 {
      @media #{$media} and (min-width: $min-1) and (max-width: $max-1), 
             #{$media} and (min-width: $min-2) and (max-width: $max-2),
             #{$media} and (min-width: $min-3) {
        @content;
      }
    } 
    @if $length == 6 {
      @media #{$media} and (min-width: $min-1) and (max-width: $max-1), 
             #{$media} and (min-width: $min-2) and (max-width: $max-2),
             #{$media} and (min-width: $min-3) and (max-width: $max-3) {
        @content;
      }
    }
  } @else {
    @if $length == 1 {
      @media (#{$condition}-width: $single) {
        @content;
      }
    } 
    @if $length == 2 {
      @media (min-width: $min-1) and (max-width: $max-1) {
        @content;
      }
    } 
    @if $length == 3 {
      @media (min-width: $min-1) and (max-width: $max-1), 
             (min-width: $min-2) {
        @content;
      }
    } 
    @if $length == 4 {
      @media (min-width: $min-1) and (max-width: $max-1), 
             (min-width: $min-2) and (max-width: $max-2) {
        @content;
      }
    } 
    @if $length == 5 {
      @media (min-width: $min-1) and (max-width: $max-1), 
             (min-width: $min-2) and (max-width: $max-2),
             (min-width: $min-3) {
        @content;
      }
    } 
    @if $length == 6 {
      @media (min-width: $min-1) and (max-width: $max-1), 
             (min-width: $min-2) and (max-width: $max-2),
             (min-width: $min-3) and (max-width: $max-3) {
        @content;
      }
    }
  }
}

@mixin bp($key) {
  @include breakpoint($key) {
    @content;
  };
}
