// *** break point *** //

// min-width
@mixin breakpoint-mi($key){
  $min: 0;
  $media: false;

  // get min, media type
  @if type-of($key) == number {
    $min: $key;
  } @else if type-of($key) == list {
    @each $type in $media-types {
      @if index($key, $type) {
        $media: $type;
        $key: reject($key, $type);
      }
      $min: nth($key, 1);
    }
  }

  // px to em
  @if unitless($min) or
      unit($min) == px {
    $min: em($min);
  }

  // output
  @if $media {
    @media #{$media} and (min-width: $min) {
      @content;
    }
  } @else {
    @media (min-width: $min) {
      @content;
    }
  }
}

//  max-width
@mixin breakpoint-ma($key){
  $max: 0;
  $media: false;

  // get max, media type
  @if type-of($key) == number {
    $max: $key;
  } @else if type-of($key) == list {
    @each $type in $media-types {
      @if index($key, $type) {
        $media: $type;
        $key: reject($key, $type);
      }
      $max: nth($key, 1);
    }
  }

  // px to em
  @if unitless($max) or
      unit($max) == px {
    $max: em($max);
  }

  // output
  @if $media {
    @media #{$media} and (max-width: $max) {
      @content;
    }
  } @else {
    @media (max-width: $max) {
      @content;
    }
  }
}

// min-width & max-width
@mixin breakpoint-mm($key){
  $min: 0;
  $max: 0;
  $media: false;

  // get min, max, media type
  @if type-of($key) == list {
    @each $type in $media-types {
      @if index($key, $type) {
        $media: $type;
        $key: reject($key, $type);
      }
      $min: nth($key, 1);
      $max: nth($key, 2);
    }
  }

  // px to em
  @if unitless($min) or unit($min) == px {
    $min: em($min);
  }
  @if unitless($max) or unit($max) == px {
    $max: em($max);
  }

  // output
  @if $media {
    @media #{$media} and (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  }
}
