// *** breakpoint *** //
@mixin ro-breakpoint($key){
  @include check-arg-type($key, 'map');

  $breakpoint: map-get($key, 'breakpoint');
  $condition: if(map-get($key, 'condition'), map-get($key, 'condition'), 'min');
  $media: map-get($key, 'media');
  $feature: if(map-get($key, 'feature'), map-get($key, 'feature'), 'width');

  $media-string: if($media, '#{$media} and ', '');
  $selector: '';

  $breakpoint-em: ();
  // get breakpoints
  @each $item in $breakpoint {
    @if strip-unit($item) == 0 {
      $item: 0em;
    } @else {
      $item: em($item);
    }

    $breakpoint-em: append($breakpoint-em, $item);
  }
  $length: length($breakpoint-em);

  @if $length == 1 {
    $bp: if($breakpoint-fix and $condition == 'max', (nth($breakpoint-em, 1) - em(1)), nth($breakpoint-em, 1));
    $selector: $media-string + '(#{$condition}-#{$feature}: #{$bp})';
  } @else if $length >= 2 {
    @for $i from 1 through $length {
      @if number-odd-even($i) == 'odd' {
        $selector: $selector + ', ' + $media-string + ' (min-#{$feature}: #{nth($breakpoint-em, $i)})';
      } @else if number-odd-even($i) == 'even' {
        $bp-max: if($breakpoint-fix, (nth($breakpoint-em, $i) - em(1)), nth($breakpoint-em, $i));
        $selector: $selector + 'and (max-#{$feature}: #{$bp-max})';
      }
    }
    // remove the first ', '
    @if str-index($selector, ', ') == 1 { $selector: str-slice($selector, 3); }
  } @else if $length == 0 {
    @error "No breakpoint found.";
  }

  // *** output *** //
  @media #{unquote($selector)} { @content; }
}

@mixin bp($key) {
  @include ro-breakpoint($key) {
    @content;
  };
}