// *** function *** //
// to-number
@function to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }
  
  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
  
  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);
    
    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i))
    }
    
    @if $character == '.' {
      $digits: 1; 
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);  
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }
  
  @return if($minus, -$result, $result);;
}

// to-length
@function to-length($value, $unit) {
  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);
  
  @if not index(map-keys($units), $unit) {
    $_: log('Invalid unit `#{$unit}`.');
  }
  
  @return $value * map-get($units, $unit);
}

// to-string
@function to-string($value) {
  @return inspect($value);
}

// pxto
@function pxto($result-unit, $pxval, $base) {
  @if unit($pxval) == 'em' or unit($pxval) == 'rem' { 
    @return $pxval; 
  } @else {
    @if unit($pxval) == 'px' or unitless($pxval) { $pxval: strip-unit($pxval); }
    @if unit($base) == 'px' or unitless($base) { $base: strip-unit($base); }
    @return ($pxval / $base) * $result-unit;
  } 
}

// em
@function em($pxval, $base: $ro-em-base) {
  @return pxto(1em, $pxval, $base);
}

// rem
@function rem($pxval, $base: $ro-em-base) {
  @return pxto(1rem, $pxval, $base);
}

// strip-unit
@function strip-unit($val) {
  @return ($val / ($val * 0 + 1));
}

// opposite
@function opposite($direction){
  @if $direction == left { 
    @return right; 
  } @else if $direction == right { 
    @return left; 
  } @else if $direction == top { 
    @return bottom; 
  } @else if $direction == bottom { 
    @return top; 
  } @else { 
    @return false; 
  }
}

@function remove-dup($list) {
  $result: ();

  @each $item in $list {
    @if not index($result, $item) {
      $result: append($result, $item);
    }
  }

  @return $result;
}

// reject
@function reject($list, $val){
  $result: ();

  @if type-of($list) == 'list' {
    @each $item in $list {
      @if $item != $val {
        $result: append($result, $item);
      }
    }
  } @else {
    $result: $list;
  }

  @return $result;
}

// list-ascend
@function list-ascend($list) {
  $list-old: $list;
  $list-new: ();
  
  @while length($list-old) > 1 {
    $list-new: append($list-new, min($list-old...));
    $list-old: reject($list-old, min($list-old...));
  }
  $list-new: append($list-new, nth($list-old, 1));
  
  @return $list-new;
}

// list-descend
@function list-descend($list) {
  $list-old: $list;
  $list-new: ();
  
  @while length($list-old) > 1 {
    $list-new: append($list-new, max($list-old...));
    $list-old: reject($list-old, max($list-old...));
  }
  $list-new: append($list-new, nth($list-old, 1));
  
  @return $list-new;
}

// map-update-breakpoints
@function map-update-breakpoints($map, $bps) {
  @if not $bps {
    @error "breakpoints doesn't exit."
  }

  @each $key, $value in $map {
    @if type-of($key) == 'string' and map-has-key($bps, $key) {
        $key: map-get($bps, $key);
    }
  }

  @return $map;
}

// nums-get-max
@function nums-get-max($list) {
  $list-new: ();
  $max: false;

  @if type-of($list) == 'list' {
    @each $item in $list {
      @if type-of($item) == 'number' {
        $list-new: append($list-new, $item);
      }
    }
    $max: max($list-new...);
    @return $max;
  } @else {
    @error '#{$list} is not a list.'
  }
}

// ro-get
@function ro-get($key, $arg, $def:false){
  $result: $def;

  @if type-of($arg) == 'string' {
    @if index($key, $arg) {
      $result: true;
    } 
  } @else if type-of($arg) == 'list' {
    @each $item in $arg {
      @if index($key, $item) {
        $result: $item;
      } 
    }
  }

  @return $result;
}

// ro-get-type
@function ro-get-type($key, $arg, $check:false, $def:false) {
  $result: $def;

  @each $item in $key {
    @if type-of($item) == $arg {
      @if $check {
        @if not index($check, $item) {
          $result: $item;
        }
      } @else {
        $result: $item;
      }
    }
  }

  @return $result;
}

// ro-get-prev
@function ro-get-prev($list, $val, $def:false) {
  $this-index: index($list, $val);
  @if $this-index {
    @return nth($list, ($this-index - 1));
  } @else {
    @return $def;
  }
}

// ro-get-next
@function ro-get-next($list, $val, $def:false) {
  $this-index: index($list, $val);
  @if $this-index {
    @return nth($list, ($this-index + 1));
  } @else {
    @return $def;
  }
}

// selector functions
@function selector-str(){
  $sel: &;
  $sel-str: (nth($sel, 1) + '');

  @return $sel-str;
}
@function selector-str-sliced($len){
  @return str-slice(selector-str(), $len, str-length(selector-str())) + ', ';
}
@function str-remove-comma($key){
  @return str-slice($key, 1, (str-length($key) - 2));
}


// plus-one
@function plus-one ($key) {
  @if type-of($key) == 'number' {
    @if unitless($key) {
      $key: $key + 1;
    } @else if unit($key) == 'px' {
      $key: $key + 1px;
    } @else if unit($key) == 'em' {
      $key: $key + em(1);
    } @else if unit($key) == 'rem' {
      $key: $key + rem(1);
    }
  }

  @return $key;
}

// minus-one
@function minus-one ($key) {
  @if type-of($key) == 'number' {
    @if unitless($key) {
      $key: $key - 1;
    } @else if unit($key) == 'px' {
      $key: $key - 1px;
    } @else if unit($key) == 'em' {
      $key: $key - em(1);
    } @else if unit($key) == 'rem' {
      $key: $key - rem(1);
    }
  }

  @return $key;
}

// str-cut
@function str-cut($string, $separator, $position) {
  $i: 1;
  $final-string: '';
  $length: str-length($string);

  @if str-index($string, $separator) {
    $i: str-index($string, $separator);
    @if $position == after {
      $i: $i + 1;
      $final-string: str-slice($string, $i, $length);
    } @else if $position == before {
      $i: $i - 1;
      $final-string: str-slice($string, 1, $i);
    }
  } @else {
    $final-string: $string;
  }

  @return $final-string;
}

// col-calc
@function col-calc ($col, $cols, $gutter){
  $result: '';

  $col-percentage: percentage($col / $cols);
  $col-gutter: ($gutter * $col / $cols);
  $result: '#{$col-percentage}' + ' + ' + '#{$col-gutter}';
  @return $result;
}

// get-slider-selector
@function get-slider-selector($selector){
  $str-selector: #{$selector};
  $start: 0;
  $result: null;
  
  @while (str-index($str-selector, '.')) { $str-selector: str-slice($str-selector, str-index($str-selector, '.') + 1, str-length($str-selector)); }
  @while (str-index($str-selector, '#')) { $str-selector: str-slice($str-selector, str-index($str-selector, '#') + 1, str-length($str-selector)); }

  @return $str-selector;
}

// get-last-selector
@function get-last-selector($key) {
  $_return: ();
  
  @if type-of($key) == 'list' {
    @each $item in $key {
      $_return: append($_return, nth($item, -1));
    }
  }
  
  @return $_return;
}

@function is-simple-list($key) {
  @if type-of($key) == 'list' {
    $types: ();

    @each $item in $key {
      $type: type-of($item);
      @if index(('string' 'number' 'null' 'bool'), $type) {
        $types: append($types, true);
      } @else {
        $types: append($types, false);
      }
    }

    @return if(index($types, false), false, true);
  }
}

// == is-number-list ==
@function is-number-list($key) {
  $is-number-list: ();
  @each $item in $key {
    @if type-of($item) == 'list' {
      @each $sub-item in $item {
        @if type-of($sub-item) == 'list' {
          @each $sub-sub-item in $sub-item {
            $is-number-list: if(
              type-of($sub-sub-item) != 'number',
              append($is-number-list, false),
              append($is-number-list, true) );
          }
        } @else {
          $is-number-list: if(
            type-of($sub-item) != 'number',
            append($is-number-list, false),
            append($is-number-list, true) );
        }
      }
    } @else {
      $is-number-list: if(
        type-of($item) != 'number',
        append($is-number-list, false),
        append($is-number-list, true) );
    }
  }

  @return if(
    index($is-number-list, false),
    false,
    true );
}

@function is-simple-map($key) {
  @if type-of($key) == 'map' {
    $types: ();
    $list: join(map-keys($key), map-values($key));

    @each $item in $list {
      $type: type-of($item);
      @if index(('string' 'number' 'null' 'bool'), $type) {
        $types: append($types, true);
      } @else {
        $types: append($types, false);
      }
    }

    @return if(index($types, false), false, true);
  }
}

@function get-breakpoint($bp1, $bp2) {
  @for $i from 1 through length($bp1) {
    $bp: nth($bp1, $i);
    @if type-of($bp) == 'string' and $bp2 and index(map-keys($bp2), $bp) {
      $bp1: set-nth($bp1, $i, map-get($bp2, $bp));
    }
  }

  @return $bp1;
}
