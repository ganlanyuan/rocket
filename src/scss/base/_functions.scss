// *** function *** //

// em
@function em($pxval, $base: $ro-em-base) {
  @if unit($pxval) == 'em' or unit($pxval) == 'rem' { @return $pxval; }
  @else {
    @if unit($pxval) == 'px' or unitless($pxval) { $pxval: strip-unit($pxval); }
    @if unit($base) == 'px' or unitless($base) { $base: strip-unit($base); }
    @return ($pxval / $base) * 1em;
  } 
}

// rem
@function rem($pxval, $base: $ro-rem-base) {
  @if unit($pxval) == 'rem' or unit($pxval) == 'em' { @return $pxval; }
  @else {
    @if unit($pxval) == 'px' or unitless($pxval) { $pxval: strip-unit($pxval); }
    @if unit($base) == 'px' or unitless($base) { $base: strip-unit($base); }
    @return ($pxval / $base) * 1rem;
  } 
}

// strip-unit
@function strip-unit($val) {
  @return ($val / ($val * 0 + 1));
}

// opposite
@function opposite($direction){
  @if $direction == left { 
    @return right; 
  } @else if $direction == right { 
    @return left; 
  } @else if $direction == top { 
    @return bottom; 
  } @else if $direction == bottom { 
    @return top; 
  } @else { 
    @return false; 
  }
}

// reject
@function reject($list, $val){
  $_return: ();

  @if type-of($list) == 'list' {
    @for $i from 1 through length($list) {
      @if nth($list, $i) != $val {
        $_return: append($_return, nth($list, $i));
      }
    }
  } @else {
    $_return: $list;
  }

  @return $_return;
}

// ro-get
@function ro-get($key, $arg, $def:false){
  $_return: $def;

  @if type-of($arg) == 'string' {
    @if index($key, $arg) {
      $_return: true;
    } 
  } @else if type-of($arg) == 'list' {
    @each $item in $arg {
      @if index($key, $item) {
        $_return: $item;
      } 
    }
  }

  @return $_return;
}

// ro-get-type
@function ro-get-type($key, $arg, $check:false, $def:false) {
  $_return: $def;

  @each $item in $key {
    @if type-of($item) == $arg {
      @if $check {
        @if not index($check, $item) {
          $_return: $item;
        }
      } @else {
        $_return: $item;
      }
    }
  }

  @return $_return;
}

// ro-get-prev
@function ro-get-prev($list, $val, $def:false) {
  $this-index: index($list, $val);
  @if $this-index {
    @return nth($list, ($this-index - 1));
  } @else {
    @return $def;
  }
}

// ro-get-next
@function ro-get-next($list, $val, $def:false) {
  $this-index: index($list, $val);
  @if $this-index {
    @return nth($list, ($this-index + 1));
  } @else {
    @return $def;
  }
}

// selector functions
@function selector-str(){
  $sel: &;
  $sel-str: (nth($sel, 1) + '');

  @return $sel-str;
}
@function selector-str-sliced($len){
  @return str-slice(selector-str(), $len, str-length(selector-str())) + ', ';
}
@function str-remove-comma($key){
  @return str-slice($key, 1, (str-length($key) - 2));
}


// plus-one
@function plus-one ($key) {
  @if type-of($key) == 'number' {
    @if unitless($key) {
      $key: $key + 1;
    } @else if unit($key) == 'px' {
      $key: $key + 1px;
    } @else if unit($key) == 'em' {
      $key: $key + em(1);
    } @else if unit($key) == 'rem' {
      $key: $key + rem(1);
    }
  }

  @return $key;
}

// minus-one
@function minus-one ($key) {
  @if type-of($key) == 'number' {
    @if unitless($key) {
      $key: $key - 1;
    } @else if unit($key) == 'px' {
      $key: $key - 1px;
    } @else if unit($key) == 'em' {
      $key: $key - em(1);
    } @else if unit($key) == 'rem' {
      $key: $key - rem(1);
    }
  }

  @return $key;
}

// str-cut
@function str-cut($string, $separator, $position) {
  $i: 1;
  $final-string: '';
  $length: str-length($string);

  @if str-index($string, $separator) {
    $i: str-index($string, $separator);
    @if $position == after {
      $i: $i + 1;
      $final-string: str-slice($string, $i, $length);
    } @else if $position == before {
      $i: $i - 1;
      $final-string: str-slice($string, 1, $i);
    }
  } @else {
    $final-string: $string;
  }

  @return $final-string;
}

// span-calc
@function span-calc ($col, $cols, $gutter){
  $_return: '';

  $col-percentage: percentage($col / $cols);
  $col-gutter: ($gutter * $col / $cols);
  $_return: '#{$col-percentage}' + ' + ' + '#{$col-gutter}';
  @return $_return;
}
