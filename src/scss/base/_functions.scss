// *** function *** //
@function contains($list, $values...) {
  @each $value in $values {
    @if type-of(index($list, $value)) != "number" {
      @return false;
    }
  }

  @return true;
}

@function is-number($value) {
  @return contains("0" "1" "2" "3" "4" "5" "6" "7" "8" "9" 0 1 2 3 4 5 6 7 8 9, $value);
}

@function opposite($direction){
  @if $direction == left { @return right; }
  @else if $direction == right { @return left; }
  @else if $direction == top { @return bottom; }
  @else if $direction == bottom { @return top; }
  @else { @return false; }
}

@function strip-units($val) {
  @return ($val / ($val * 0 + 1));
}

// em
@function em($pxval, $base: $em-base) {
  @if unit($pxval) == 'em' or unit($pxval) == 'rem' { @return $pxval; }
  @else {
    @if unit($pxval) == 'px' or unitless($pxval) { $pxval: strip-units($pxval); }
    @if unit($base) == 'px' or unitless($base) { $base: strip-units($base); }
    @return ($pxval / $base) * 1em;
  } 
}

// rem
@function rem($pxval, $base: $rem-base) {
  @if unit($pxval) == 'rem' { @return $pxval; }
  @else {
    @if unit($pxval) == 'px' or unitless($pxval) { $pxval: strip-units($pxval); }
    @if unit($base) == 'px' or unitless($base) { $base: strip-units($base); }
    @return ($pxval / $base) * 1rem;
  } 
}

// reject
@function reject($list, $val){
  $list-new: ();
  @for $i from 1 through length($list) {
    @if nth($list, $i) != $val {
      $list-new: append($list-new, nth($list, $i));
    }
  }

  $list: $list-new;
  @return $list;
}

// get-prev & get-next
@function get-prev($list, $val) {
  $this-index: index($list, $val);
  @return nth($list, ($this-index - 1));
}

@function get-next($list, $val) {
  $this-index: index($list, $val);
  @return nth($list, ($this-index + 1));
}

// str-dash slice
@function str-cut($string, $separator, $position) {
  $i: 1;
  $final-string: null;
  $length: str-length($string);

  @if str-index($string, $separator) {
    $i: str-index($string, $separator);
  }
  @if $position == after {
    $i: $i + 1;
    $final-string: str-slice($string, $i, $length);
  } @else if $position == before {
    $i: $i - 1;
    $final-string: str-slice($string, 1, $i);
  }

  @return $final-string;
}