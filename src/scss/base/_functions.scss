// *** function *** //

@function opposite($direction){
  @if $direction == left { 
    @return right; 
  } @else if $direction == right { 
    @return left; 
  } @else if $direction == top { 
    @return bottom; 
  } @else if $direction == bottom { 
    @return top; 
  } @else { 
    @return false; 
  }
}

@function strip-units($val) {
  @return ($val / ($val * 0 + 1));
}

// em
@function em($pxval, $base: $ro-em-base) {
  @if unit($pxval) == 'em' or unit($pxval) == 'rem' { @return $pxval; }
  @else {
    @if unit($pxval) == 'px' or unitless($pxval) { $pxval: strip-units($pxval); }
    @if unit($base) == 'px' or unitless($base) { $base: strip-units($base); }
    @return ($pxval / $base) * 1em;
  } 
}

// rem
@function rem($pxval, $base: $ro-rem-base) {
  @if unit($pxval) == 'rem' or unit($pxval) == 'em' { @return $pxval; }
  @else {
    @if unit($pxval) == 'px' or unitless($pxval) { $pxval: strip-units($pxval); }
    @if unit($base) == 'px' or unitless($base) { $base: strip-units($base); }
    @return ($pxval / $base) * 1rem;
  } 
}

// reject
@function reject($list, $val){
  $list-new: ();
  @for $i from 1 through length($list) {
    @if nth($list, $i) != $val {
      $list-new: append($list-new, nth($list, $i));
    }
  }

  $list: $list-new;
  @return $list;
}

// get-prev & get-next
@function get-prev($list, $val) {
  $this-index: index($list, $val);
  @return nth($list, ($this-index - 1));
}

@function get-next($list, $val) {
  $this-index: index($list, $val);
  @return nth($list, ($this-index + 1));
}

// plus-one
@function plus-one ($key) {
  @if type-of($key) == 'number' {
    @if unitless($key) {
      $key: $key + 1;
    } @else if unit($key) == 'px' {
      $key: $key + 1px;
    } @else if unit($key) == 'em' {
      $key: $key + em(1);
    } @else if unit($key) == 'rem' {
      $key: $key + rem(1);
    }
  }

  @return $key;
}

// minus-one
@function minus-one ($key) {
  @if type-of($key) == 'number' {
    @if unitless($key) {
      $key: $key - 1;
    } @else if unit($key) == 'px' {
      $key: $key - 1px;
    } @else if unit($key) == 'em' {
      $key: $key - em(1);
    } @else if unit($key) == 'rem' {
      $key: $key - rem(1);
    }
  }

  @return $key;
}
// str-dash slice
@function str-cut($string, $separator, $position) {
  $i: 1;
  $final-string: null;
  $length: str-length($string);

  @if str-index($string, $separator) {
    $i: str-index($string, $separator);
  }
  @if $position == after {
    $i: $i + 1;
    $final-string: str-slice($string, $i, $length);
  } @else if $position == before {
    $i: $i - 1;
    $final-string: str-slice($string, 1, $i);
  }

  @return $final-string;
}


// get-slider-selector
@function get-slider-selector($selector){
  $str-selector: #{$selector};
  $start: 0;
  $result: null;
  
  @while (str-index($str-selector, '.')) { $str-selector: str-slice($str-selector, str-index($str-selector, '.') + 1, str-length($str-selector)); }
  @while (str-index($str-selector, '#')) { $str-selector: str-slice($str-selector, str-index($str-selector, '#') + 1, str-length($str-selector)); }

  @return $str-selector;
}

// calc-columns-width
@function span-calc ( $col, $cols, $gutter ){
  $_return: '';

  $col-percentage: percentage($col / $cols);
  $col-gutter: ($gutter * $col / $cols);
  $_return: #{#{$col-percentage} + ' + ' + #{$col-gutter}};
  @return $_return;
}
