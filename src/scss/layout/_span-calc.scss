/// *span-calc* is using css-calc to create columns, old browser (e.g. IE8) will not be supported.
///
/// $key: `($column of $columns) $gutter (move $move) (float $float) last`
/// @group layout
/// @param {number | list} $key - key 
/// @example scss - Usage
/// .nav { @include span-calc(3); }
/// // column: 3;
/// // columns: 12; (default)
/// // columns: 20px; (default)
/// 
/// .nav { @include span-calc(11 of 16 30px); }
/// // column: 3;
/// // columns: 12;
/// // gutter: 2%;
/// 
/// .nav { @include span(last right 11 of 16 30px move -5); }
/// // last: true; (The last column)
/// // float: right;
/// // move: -5; (move left 5 columns)
/// 
/// // Tips: gutter must be a fixed value(px, em, rem).
///
/// @link http://creatiointl.org/gallery/william/rocket/layout-grid.php demo
/// @link https://github.com/ganlanyuan/rocket full document

@mixin span-calc($key){
  $column: 0;
  $columns: ro-get-next($key, 'of', map-get($ro-layout, 'columns'));
  $gutter: 20px;
  $move: ro-get-next($key, 'move');
  $float: ro-get($key, left right, left);
  $last: ro-get($key, 'last');

  // set up column
  @if type-of($key) == 'number' {
    $column: $key;
  } @else if type-of($key) == list {
    @if index($key, 'of') {
      $column: ro-get-prev($key, 'of');
    } @else {
      @each $item in $key {
        @if type-of($item) == number and
            unitless($item) {
          $column: $item;
        }
      }
    }
  }

  // set up gutter
  $key: reject($key, $column);
  $key: reject($key, $columns);
  $key: reject($key, $move);
  @each $item in $key {
    @if type-of($item) == 'number' {
      $gutter: $item;
    }
  }
  // strip unit when gutter == 0
  @if strip-unit($gutter) == 0 {
    $gutter: 0;
  }

  
  // *** output *** //
  // direction
  @if $float == right { 
    float: $float; 
  } @else { 
    float: left; 
  }

  // change order
  @if $move { position: relative; }

  // add unit to gutter
  @if $gutter and unitless($gutter) and $gutter > 0 and $gutter < 1 { $gutter: percentage($gutter); }

  // no gutter
  @if not $gutter or $gutter == 0 {
    width: percentage($column / $columns);
    margin-#{opposite($float)}: 0;

    // move
    @if $move and $move != 0 { 
      left: percentage($move / $columns); 
    } @else {
      left: 0;
    }
  
  // fixed gutter
  } @else if unit($gutter) and unit($gutter) != '%' {
    $column-width: span-calc($column, $columns, $gutter);
    width: calc( #{$column-width} - #{$gutter} );
    @if not $last { 
      margin-#{opposite($float)}: $gutter; 
    }
    // move
    @if $move and $move != 0 { 
      $move-cols: span-calc($move, $columns, $gutter);
      left: calc( #{$move-cols} ); 
    } @else {
      left: 0;
    }
  } @else {
    $warn: "$gutter can't be a percentage, use a fixed $gutter instead.";
    @warn $warn + ' Current value: #{$gutter}';
  }
}
