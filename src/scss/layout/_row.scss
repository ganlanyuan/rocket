/// Grid wrapper, works with span when using a fixed value for gutter.
/// 
/// $key: `$map $mode (child $child) (gutter $gutter) keep`
/// @group layout
/// @param {number | list} $key - key 
/// @example scss - Usage
/// $layout: (
///   2:1,
///   7:0,
///   3:0,
/// );
/// .row { @include row($layout); }
///
/// @link http://creatiointl.org/gallery/william/rocket/layout-grid.php demo
/// @link https://github.com/ganlanyuan/rocket full document

@mixin row($key:false){
  $mode: ro-get($key, ('isolate' 'fluid'), 'fluid');
  $child: ro-get-next($key, 'child', 'div');
  $gutter: ro-get-next($key, 'gutter', map-get($ro-layout, 'gutter'));
  $half-gutter: ($gutter / 2);
  $keep: ro-get($key, 'keep', false);

  // get map
  $map: false;
  $keys: false;
  $values: false;
  $order: ();
  @if type-of($key) == 'map' {
    $map: $key;
  } @else if type-of($key) == 'list' {
    // check if $key is the data list
    @each $item in $key {
      @if $item != null and type-of($item) != 'number' {
        $keys: false;
      } @else {
        $keys: true;
      }
    }

    // get $keys
    @if $keys {
      $keys: $key;
    } @else {
      $keys: ro-get-type($key, 'list');
    }
    // get map
    $map: ro-get-type($key, 'map');
  }
  
  @if $map {
    $keys: map-keys($map);
    $values: map-values($map);

    // get order
    $u-values: list-ascend(remove-dup($values)); // reordered values
    @each $u-val in $u-values {
      @for $i from 1 through length($values) {
        @if nth($values, $i) == $u-val {
          $order: append($order, $i);
        }
      }
    }
  } @else {
    $values: (0, 0, 0);
    $order: (1, 2, 3);
  }

  // get full width
  $full-width: 0;
  @each $item in $keys {
    $full-width: $full-width + $item;
  }
  
  // *** output *** //
  @if not $keep {
    @include clearfix();
    margin-left: - $half-gutter;
    margin-right: - $half-gutter;

    @if $keys { @include flexbox; }
  }

  @if $keys {
    > #{$child} {
      @if not $keep {
        @include flex(1 1);
        padding-left: $half-gutter;
        padding-right: $half-gutter;
        box-sizing: border-box;
      }

      // set col width
      @for $i from 1 through length($keys) {
        &:nth-child(#{$i}) {
          @include flex-basis(percentage(nth($keys, $i) / $full-width));
          @include order(nth($values, $i));
          // fix IE10 & 11: horizental padding break layout
          .flexboxtweener & { max-width: percentage(nth($keys, $i) / $full-width); }
        }
      }
    }
  }

  // no-flexbox
  .no-flexbox.no-flexboxtweener & {
    @if $keys {
      > #{$child} {
        @if not $keep {
          float: left;
          @if $mode == 'isolate' { margin-right: -100%; }
        }
        
        // reset left value
        &:nth-child(n+1) { left: 0; }

        @for $i from 1 through length($keys) {
          &:nth-child(#{$i}) {
            // set col width
            width: percentage(nth($keys, $i) / $full-width);

            // set col order
            $location: index($order, $i);
            $location-val: 0;
            @if $mode == 'isolate' {
              @if $location != 1 {
                @for $j from 1 to $location {
                  $location-val: ($location-val + nth($keys, nth($order, $j)));
                }
                margin-left: percentage($location-val / $full-width);
              } @else {
                margin-left: 0;
              }
            } @else if $mode == 'fluid' {
              $origin-val: 0;
              $move-val: 0;
              // get origin-val
              @if $i != 1 {
                @for $h from 1 to $i {
                  $origin-val: ($origin-val + nth($keys, $h));
                }
              } @else {
                $origin-val: 0;
              }
              // get location-val
              @if $location != 1 {
                @for $q from 1 to $location {
                  $location-val: ($location-val + nth($keys, nth($order, $q)));
                }
              } @else {
                $location-val: 0;
              }
              // get move-val
              $move-val: ($location-val - $origin-val);

              @if $move-val != 0 {
                position: relative;
                left: percentage($move-val / $full-width);
              }
            }
          }
        }
      }
    }
  }
}
