// *** diamond *** //
@mixin diamond($key){
  @include check-arg-type($key, 'map');

  $layout: map-get($key, 'layout');
  $shape: if(map-get($key, 'shape'), map-get($key, 'shape'), 'diamond');
  $tight: map-get($key, 'tight');
  $global-breakpoints: map-get($key, 'breakpoint');
  $local-breakpoints: false;
  $condition: if(map-get($key, 'condition'), map-get($key, 'condition'), 'min');
  $media-type: map-get($key, 'media-type');
  $keep: map-get($key, 'keep');

  @if type-of($layout) == 'map' {
    // update $layout breakpoints
    @if $global-breakpoints { $layout: map-update-breakpoints($layout, $global-breakpoints); }
    @if $layout and type-of($layout) == 'map' { $local-breakpoints: map-keys($layout); }

    @if index($local-breakpoints, null) != null or index($local-breakpoints, 'default') != null { 
      $keep: false; 
    } 

    @each $bp in $local-breakpoints {
      $num: map-get($layout, $bp);

      @if $bp == null or $bp == 'default' {
        @include diamond-base($shape);
        $keep: true;

        @include make-diamond($num, $shape, $tight);

      } @else if type-of($bp) == 'number' {
        @include bp( ('breakpoint': $bp, 'condition': $condition) ) {
          @if not $keep {
            @include diamond-base($shape);
            $keep: true;
          }

          @include make-diamond($num, $shape, $tight);
        }
      }
    }
  } @else {
    @if not $keep {
      @include diamond-base($shape);
    }
    @include make-diamond($layout, $shape, $tight);
  }
}

@mixin diamond-base($shape){
  position: relative;
  float: left;
  overflow: hidden;

  @if $shape == 'diamond' { 
    @include ro-transform( rotate(-45deg) scale((1/sqrt(2))) ); 
  } @else if $shape == 'octagon' {
    @include ro-transform(rotate(-45deg));
  }
  > .diamond-content {
    @include center();
    position: absolute;
    width: 100%;
    height: 100%;
    left: 0;
    top: 0;

    @if $shape == 'diamond' {
      @include ro-transform( rotate(45deg) scale( sqrt(2) ) );
    } @else if $shape == 'octagon' {
      @include ro-transform(rotate(45deg));
      overflow: inherit;
    }
  }
}

@mixin make-diamond($layout, $shape, $tight) {
  $count: false;
  $size: false;

  // count & size
  @if type-of($layout) == 'number' {
    @if unitless($layout) {
      $count: $layout; 
    } @else {
      $size: $layout;
    }
  } @else if type-of($layout) == 'list' {
    @each $item in $layout {
      @if type-of($item) == 'number' {
        @if unitless($item) {
          $count: $item;
        } @else {
          $size: $item;
        }
      }
    }
  }
  @if $size and unit($size) == '%' and $count {
    $count: floor(100% / $size);
  }
  @if not $size {
    @if $count {
      $size: percentage(1 / $count);
    }
  } 
  @if not $count {
    @if $size and unit($size) == '%' {
      $count: floor(100% / $size);
    }
  } 

  @if $size {
    width: $size;
    @if unit($size) == '%' {
      height: 0;
      padding-bottom: $size;
    } @else {
      height: $size;
    }

    @if $shape == 'diamond' {
      @if $count and $tight {
        &:nth-child(n) {
          margin: 0;
          clear: none;
        }
        &:nth-child(#{$count * 2 - 1}n + #{($count + 1)}) {
          margin-left: ($size / 2);
          clear: both;
        }
        &:nth-child(n + #{($count + 1)}) {
          margin-top: (- $size / 2);
        }
      }
    } 
  }

}