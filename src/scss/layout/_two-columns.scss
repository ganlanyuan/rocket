/// *two-columns* is for creating a two columns layout. One of them has a fixed width.
/// 
/// $key: `$direction $aside-width (gutter $gutter)`
/// @group layout
/// @param {list} $key - key 
/// @example markup - markup
/// <!-- Add "data-col-main", "data-col-aside" attributes to your markup. -->
/// 
/// <div class="wrapper">
/// 
///   <!-- main -->
///   <div data-col-main=""></div>
/// 
///   <!-- aside -->
///   <div data-col-aside=""></div>
/// </div>
/// @example scss - Usage
/// .wrapper { @include two-columns(left 300px gutter 30px); }
/// // direction: left; (aside is on the left)
/// // aside-width: 300px;
/// // gutter: 30px;
/// @link https://github.com/ganlanyuan/rocket full document

@mixin two-columns($key: left 300px gutter 20px) {
  $direction: left; 
  $aside-width: 300px; 
  $gutter: 20px;
  $total: 320px;

  @if type-of($key) == number {
    $aside-width: $key;
  } @else if type-of($key) == list {

    // set up gutter
    @if index($key, gutter) {
      $gutter: get-next($key, gutter);
      $key: reject($key, gutter);
      $key: reject($key, $gutter);
    }

    // set up direction 
    @each $item in left, right {
      @if index($key, $item) { 
        $direction: $item;
        $key: reject($key, $item);
      } 
    }

    // set up aside width
    $aside-width: nth($key, 1);
  }

  $total: ($aside-width + $gutter);

  // output
  @include clearfix; 
  .no-csscalc & {
    padding-#{opposite($direction)}: 0;
    padding-#{$direction}: $total;
  }

  // main
  > [data-col-main] {
    float: opposite($direction);
    width: calc(100% - #{$total});
    .no-csscalc & {
      width: 100%;
    }
  }

  // aside
  > [data-col-aside] {
    float: $direction;
    width: $aside-width;
    .no-csscalc & {
      margin-#{$direction}: - $total;
    }
  }
}
