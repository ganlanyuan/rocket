@import '../setting/variables';
@import '../utilities/args-get';
@import '../utilities/args-get-next';
@import '../utilities/args-get-global-breakpoints';
@import '../utilities/check-zero-value';
@import '../utilities/list-remove';
@import '../utilities/list-decrease';
@import '../utilities/list-increase';
@import '../utilities/is-number-map-list';
@import '../utilities/is-nested-list';
@import '../utilities/map-update-breakpoints';
@import '../utilities/get-position-from-order';
@import '../utilities/opposite';
@import '../addons/breakpoint';
@import '../vendors/clearfix';

@mixin grid($key){
  $selector: args-get-next($key, 'selector', 'div');
  $gutter: args-get-next($key, 'gutter', $global-gutter);
  // strip unit when gutter == 0
  $gutter: check-zero-value($gutter);
  $float: if(index($key, 'RTL'), right, left);

  $global-breakpoints: args-get-global-breakpoints($key);
  @if $global-breakpoints { $key: list-remove($key, $global-breakpoints); } // remove global-breakpoints from args if exist
  $local-breakpoints: false;
  $condition: args-get($key, ('min' 'max'), 'min');
  $media: args-get($key, $ro-media-type);
  $keep: args-get($key, 'keep', false);

  @if type-of($selector) == 'list' {
    @error 'Only one type of child element is acceptable. You passed (#{$selector}).';
  } @else if type-of($selector) != 'string' {
    @error 'Child should be a string. You passed "#{$selector}".';
  }

  // get data
  $column: false;
  @if type-of($key) == map {
    $column: $key;
  } @else if type-of($key) == 'list' {
    @if is-number-map-list($key) {
      $column: $key;
    } @else {
      @each $item in $key {
        @if not $column {
          @if type-of($item) == 'map' or 
              type-of($item) == 'list' and is-number-map-list($item) {
            $column: $item;
          }
        }
      }
    }
  }
  // if not valuable data found
  @if not $column { @error 'Parameters must include list or map.'; }


  // has breakpoints
  @if grid-has-breakpoints($column) {
    
    // update breakpoints
    @if $global-breakpoints { $column: map-update-breakpoints($column, $global-breakpoints); }
    $local-breakpoints: map-keys($column);

    @if index($local-breakpoints, 'default') { 
      // set base styles & default styles
      @include grid-base($selector, $float, $gutter);
      $default-column: map-get($column, 'default');

      // set default columns styles
      @if length($local-breakpoints) == 1 {
        @include divide-rows($default-column, $gutter, $selector, $float);
      } @else {
        $local-breakpoints-nums: list-remove($local-breakpoints, 'default');

        @if $condition == 'max' {
          @include bp('min' max($local-breakpoints-nums...)) {
            @include divide-rows($default-column, $gutter, $selector, $float);
          }
        } @else {
          @include bp(0 min($local-breakpoints-nums...)) {
            @include divide-rows($default-column, $gutter, $selector, $float);
          }
        }

        // remove 'default' from breakpoints
        $local-breakpoints: $local-breakpoints-nums;
      }

    } @else {

      // set base styles
      @if $condition == 'max' {
        @include bp('max' max($local-breakpoints...)) {
          @include grid-base($selector, $float, $gutter);
        }
      } @else {
        @include bp('min' min($local-breakpoints...)) {
          @include grid-base($selector, $float, $gutter);
        }
      }
    }

    // re-order breakpoints based on codition
    @if type-of($local-breakpoints) == 'list' and length($local-breakpoints) > 1 {
      $local-breakpoints: if($condition == 'max', list-decrease($local-breakpoints), list-increase($local-breakpoints));
    }

    // loop through the breakpoints
    @for $i from 1 through length($local-breakpoints) {
      $bp: nth($local-breakpoints, $i);
      // use @media (min) and (max)
      @if $i < length($local-breakpoints) {
        @include bp($media $bp nth($local-breakpoints, $i + 1)) {
          @include divide-rows(map-get($column, $bp), $gutter, $selector, $float);
        }

      // use @media (min) or (max)
      } @else {
        @include bp($condition $media $bp) {
          @include divide-rows(map-get($column, $bp), $gutter, $selector, $float);
        }
      }
    }

  // no breakpoints
  } @else {
    @include grid-base($selector, $float, $gutter);
    @include divide-rows($column, $gutter, $selector, $float);
  }
}

//  width: %
//  direction: float
//  order: margin/float, -100% margin/opposite-float

//  2-1. percentage gutter
//     gutter: no set

//  2-2. gutter with other units
//     gutter: minus margin of the container element, padding of child elements

@mixin grid-base($selector, $float, $gutter){
  @include clearfix();
  > #{$selector} { 
    position: relative;
    left: 0;

    float: $float;
    @if $gutter != 0 { margin-#{opposite($float)}: $gutter; }
  }
}

// == divide-rows ==
@mixin divide-rows($value, $gutter, $selector, $float) {
  $columns: false;
  $orders: false;
  $list-length: 0;
  $max-order: false;
  
  // many rows
  @if is-nested-list($value) {

    // make grid in each row
    @each $item in $value {
      $columns: grid-get-columns($item);
      $orders: grid-get-orders($item);

      @include grid-row($columns, $orders, $selector, $float, $gutter, $max-order, $list-length);

      // get list-length
      @if $columns { $list-length: ($list-length + length($columns)); }

      // get max-order
      @if $orders {
        @if $max-order {
          $max-order: ($max-order + max($orders...));
        } @else {
          $max-order: max($orders...);
        }
      }
    }

  // single row
  } @else {
    $columns: grid-get-columns($value);
    $orders: grid-get-orders($value);

    @include grid-row($columns, $orders, $selector, $float, $gutter);
  }
}

// == grid-row ==
@mixin grid-row($cols, $orders, $selector, $float, $gutter, $max-order:false, $list-length:0) {

  $full-col: 0;
  @each $item in $cols { $full-col: ($full-col + $item); }

  @for $i from 1 through length($cols) {
    $new-orders: ();
    $location: 1;
    @if $orders {
      $new-orders: get-position-from-order($orders);
      $location: index($new-orders, $i);
    } @else {
      $new-orders: (1 2 3 4 5 6 7 8 9 10);
      $location: $i;
    }

    > #{$selector}:nth-child(#{$i + $list-length}) {
      // set clear
      @if $list-length > 1 and $i == 1 { clear: both; }

      // set width
      @if unit($gutter) == '%' or $gutter == 0 {
        width: ((100% + $gutter) * nth($cols, $i) / $full-col - $gutter);
      } @else {
        $pc: percentage(nth($cols, $i) / $full-col);
        $px: ($gutter * ($full-col - nth($cols, $i)) / $full-col);
        width: -webkit-calc(#{$pc} - #{$px});
        width: -moz-calc(#{$pc} - #{$px});
        width: calc(#{$pc} - #{$px});
      }

      // set left
      @if $location != $i {
        $before: 0;
        $now: 0;
        @for $j from 1 to $i { $before: $before + nth($cols, $j); }
        @for $k from 1 to $location { $now: $now + nth($cols, nth($new-orders, $k)); }

        @if unit($gutter) == '%' or $gutter == 0 {
          #{$float}: ((100% + $gutter) * ($now - $before) / $full-col);
        } @else {
          $pc: (100% * ($now - $before) / $full-col);
          $px: ($gutter * ($now - $before) / $full-col);
          #{$float}: -webkit-calc(#{$pc} + #{$px});
          #{$float}: -moz-calc(#{$pc} + #{$px});
          #{$float}: calc(#{$pc} + #{$px});
        }
      }

      // set margin
      @if $i == length($cols) {
        margin-#{opposite($float)}: 0;
      }
    }
  }
}

// == grid-get-columns ==
@function grid-has-breakpoints($key) {
  @if type-of($key) == 'map' {
    $bools: ();

    @each $bp in map-keys($key) {
      $type: type-of($bp);
      @if $type == 'string' or $type == 'number' and not unitless($bp) {
        $bools: append($bools, true);
      } @else {
        $bools: append($bools, false);
      }
    }

    @return index($bools, false) == null;
  } @else {
    @return false;
  }
}

@function grid-get-columns($value) {
  $columns: false;

  @if type-of($value) == 'list' or type-of($value) == 'number' {
    $columns: $value;
  } @else if type-of($value) == 'map' {
    @if length(map-keys($value)) == 1 {
      $columns: nth(map-keys($value), 1);
    } @else {
      $columns: map-keys($value);
    }
  }

  @return $columns;
}

// == grid-get-orders ==
@function grid-get-orders($value) {
  $orders: false;
  @if type-of($value) == 'map' {
    @if length(map-values($value)) == 1 {
      $orders: nth(map-values($value), 1);
    } @else {
      $orders: map-values($value);
    }
  }

  @if $orders {
    $min-order: min($orders...);
    $new-orders: ();

    @if $min-order <= 0 {
      @each $item in $orders {
        $new-orders: append($new-orders, ($item + abs($min-order) + 1));
      }

      $orders: $new-orders;
    }
  }

  @return $orders;
}