// *** grid *** //
@mixin grid($key:false){
  $grid: args-get-next($key, 'grid');

  $breakpoints: args-get-next($key, 'bp');
  $condition: args-get($key, ('min' 'max'), 'min');
  $media-type: args-get($key, $ro-media-type);

  $child: args-get-next($key, 'child', 'div');
  $gutter: args-get-next($key, 'gutter', map-get($ro-layout, 'gutter'));
  $direction: args-get($key, (left right), right);
  $keep: args-get($key, 'keep', false);

  $initialized: false;

  // get grid
  @if not $grid {
    @if type-of($key) == 'map' {
      $grid: $key;
    } @else if type-of($key) == 'list' {
      
      @if is-number-list($key) {
        $grid: $key;
      } @else {
        @if args-get-type($key, 'map') {
          $grid: args-get-type($key, 'map');
        } @else if args-get-type($key, 'list') and is-number-list(args-get-type($key, 'list')) {
          @each $item in $key {
            @if not $grid and type-of($item) == 'list' and is-number-list(args-get-type($key, 'list')) {
              $grid: $item;
            }
          }
        }
      }
    }
  }

  // *** output *** //
  // basis
  @if not $keep {
    // clear float
    .no-flexbox.no-flexboxtweener & { @include clearfix(); }

    // flexbox
    @include ro-flexbox; 
    @include ro-flex-wrap(wrap);
    @if $direction == left {
      @include ro-flex-direction(row-reverse);
    }

    > #{$child} {
      box-sizing: border-box;
      width: 100%;
    }    
  }

  @if $grid {
    $bp-first: if( type-of($grid) == 'map', nth(map-keys($grid), 1), false );

    // check the first key, to see if it has breakpoints
    // has breakpoints
    @if $bp-first and 
        type-of($bp-first) == 'string' or 
        type-of($bp-first) == 'number' and not unitless($bp-first) {
      
      // get number breakpoints and max-breakpoint
      @each $bp in $grid {
        @if type-of($bp) != 'number' and 
            $bp != 'default' and 
            $breakpoints and 
            map-has-key($breakpoints, $bp) {
              $bp: map-get($breakpoints, $bp);
            }
      }
      $bps: map-keys($grid);

      @each $bp in $bps {
        @if $bp == 'default' {
          @include check-list(map-get($grid, $bp), $gutter, $child, $direction, $initialized);
        } @else {
          @include bp($condition $media-type $bp) {
            // reset order, clear
            > #{$child}:nth-child(n) { 
              @include ro-order(0); 
              .no-flexbox.no-flexboxtweener & { clear: none; }
            }
            @include check-list(map-get($grid, $bp), $gutter, $child, $direction, $initialized);
          }
        }
      }
    // no breakpoints
    } @else {
      @include check-list($grid, $gutter, $child, $direction, $initialized);
    }
  }
}

// == check-list ==
@mixin check-list($value, $gutter, $child, $direction, $initialized) {
  $columns: false;
  $orders: false;
  $has-orders: false;

  $list-length: 0;
  $max-order: 0;
  
  // initialize
  @if not $initialized {
    margin-#{$direction}: - $gutter;
    > #{$child} {
      padding-#{$direction}: $gutter;

      .no-flexbox.no-flexboxtweener & {
        float: opposite($direction);
        margin-#{$direction}: -100%;
      }
    }

    $initialized: true;
  }

  @if is-deep-list($value) {
    @each $item in $value {
      $columns: grid-get-columns($item);
      $orders: grid-get-orders($item);

      @include make-grid($columns, $orders, $child, $direction, $max-order, $list-length, $has-orders);

      @if $orders { $has-orders: true; }
      @if $columns { $list-length: ($list-length + length($columns)); }
      @if $orders {
        $max-order: ($max-order + max($orders...));
      } @else {
        $max-order: $max-order + 1;
      }
    }

    // some of previous groups have orders, this group doesn't
    %same-order { @include ro-order($max-order); }

  } @else {
    $columns: grid-get-columns($value);
    $orders: grid-get-orders($value);

    @include make-grid($columns, $orders, $child);
  }
}

// == make-grid ==
@mixin make-grid($cols, $orders, $child, $direction:right, $max-order:0, $list-length:0, $has-orders:false) {

  $full-col: 0;
  @each $item in $cols {
    $full-col: ($full-col + $item);
  }
  
  // new row: clear float
  .no-flexbox.no-flexboxtweener & {
    @if $list-length > 0 {
      > #{$child}:nth-child(#{$list-length + 1}) { clear: both; }
    }
  }

  @for $i from 1 through length($cols) {
    > #{$child}:nth-child(#{$i + $list-length}) {
      width: percentage(nth($cols, $i) / $full-col);

      // flexbox
      @if $orders { 
        @include ro-order((nth($orders, $i) + $max-order)); 
      } @else if $has-orders {
        @extend %same-order;
      }

      // no-flexbox
      $new-orders: ();
      $location: 1;
      $val: 0;
      @if $orders {
        $simplify-orders: list-increase(list-remove-duplicates($orders)); // reordered
        @each $item in $simplify-orders {
          @for $i from 1 through length($orders) {
            @if nth($orders, $i) == $item {
              $new-orders: append($new-orders, $i);
            }
          }
        }

        $location: index($new-orders, $i);
      } @else {
        $new-orders: (1 2 3 4 5 6 7 8 9 10);
        $location: $i;
      }

      .no-flexbox.no-flexboxtweener & {
        @if $location == 1 {
          margin-#{opposite($direction)}: 0;
        } @else {
          @for $j from 1 to $location {
            $val: ($val + nth($cols, nth($new-orders, $j)));
          }
          margin-#{opposite($direction)}: percentage($val / $full-col);
        }
      }
    }
  }
}

// == is-deep-list == 
@function is-deep-list($list) {
  @if type-of($list) != 'list' {
    @debug '#{$list} is not a list';
  }

  $is-deep-list: false;
  @if type-of($list) == 'list' {
    @each $item in $list {
      @if type-of($item) == 'list' or type-of($item) == 'map' {
        @if not $is-deep-list {
          $is-deep-list: true;
        }
      }
    }
  }

  @return $is-deep-list;
}

// == grid-get-columns ==
@function grid-get-columns($value) {
  $columns: false;

  @if type-of($value) == 'list' or type-of($value) == 'number' {
    $columns: $value;
  } @else if type-of($value) == 'map' {
    @if length(map-keys($value)) == 1 {
      $columns: nth(map-keys($value), 1);
    } @else {
      $columns: map-keys($value);
    }
  }

  @return $columns;
}

// == grid-get-orders ==
@function grid-get-orders($value) {
  $orders: false;
  @if type-of($value) == 'map' {
    @if length(map-values($value)) == 1 {
      $orders: nth(map-values($value), 1);
    } @else {
      $orders: map-values($value);
    }
  }

  @if $orders {
    $min-order: min($orders...);
    $new-orders: ();

    @if $min-order <= 0 {
      @each $item in $orders {
        $new-orders: append($new-orders, ($item + abs($min-order) + 1));
      }

      $orders: $new-orders;
    }
  }

  @return $orders;
}