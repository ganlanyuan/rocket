@mixin liquid($key){
  $selector: args-get-next($key, 'selector', 'div');
  $gutter: args-get-next($key, 'gutter', $global-gutter);
  // strip unit when gutter == 0
  $gutter: check-zero-value($gutter);
  $float: if(index($key, 'RTL'), right, left);

  $global-breakpoints: args-get-global-breakpoints($key);
  @if $global-breakpoints { $key: list-remove($key, $global-bps); } // remove global-breakpoints from args if exist
  $local-breakpoints: false;
  $condition: args-get($key, ('min' 'max'), 'min');
  $media: args-get($key, $ro-media-type);
  $keep: args-get($key, 'keep', false);

  // get data
  $column: args-get-liquid-data($key, 2);
  $columns: false;
  $order: false; 




  @include clearfix(); 
  // using map
  @if type-of($column) == 'map' {

    // simple map, without media querys
    // ('auto' 200px : 2 1)
    @if length(nth(map-keys($column), 1)) == 2 {
      $columns: nth(map-keys($column), 1);
      $order: nth(map-values($column), 1);
      @include make-liquid($columns, $order, $selector, $gutter, $float);

    // ('auto' : 2, 200px : 1)
    } @else if is-simple-map($column) {
      $columns: map-keys($column);
      $order: map-values($column);
      @include make-liquid($columns, $order, $selector, $gutter, $float);

    // complex map, with media querys
    } @else {
      @if $global-breakpoints { $column: map-update-breakpoints($column, $global-breakpoints); }
      $local-breakpoints: map-keys($column);

      @each $bp in $local-breakpoints {
        $column-item: map-get($column, $bp);

        @if type-of($column-item) == 'list' {
          $columns: $column-item;
          @if not $order { $order: (1, 2); }
        } @else if type-of($column-item) == 'map' {
          $columns: map-keys($column-item);
          $order: map-values(map-get($column, $bp));
        }

        @if $bp == 'default' or $bp == null {
          @include make-liquid($columns, $order, $selector, $gutter, $float);
        } @else {
          @include bp( ('condition': $condition, 'media': $media, 'breakpoint': $bp) ) {
            @include make-liquid($columns, $order, $selector, $gutter, $float);
          }
        }
      }
    }
    
  // using list
  } @else {
    $columns: $column;
    $order: (1, 2);

    @include make-liquid($columns, $order, $selector, $gutter, $float);
  }

}

@mixin make-liquid($columns, $order, $selector, $gutter, $float) {
  $column-unit: if(nth($columns, 1) == null or nth($columns, 1) == 'auto',
    unit(nth($columns, 2)),
    unit(nth($columns, 1))
  );
  $gutter-calc: if($gutter == 0, 0px, $gutter);
  $gutter-ie8: gutter-fallback($gutter, $column-unit);

  $selector-list: ();
  @if type-of($selector) == 'string' {
    $selector-list: ('#{$selector}:nth-child(1)', '#{$selector}:nth-child(2)');
  } @else if type-of($selector) == 'list' and length($selector) == 2 {
    $selector-list: $selector;
  } 

  $positions: get-position-from-order($order);
  $new-columns: ();
  @for $i from 1 through 2 {
   $new-columns: append($new-columns, nth($columns, nth($positions, $i)));
  } 

  // flexible-column is on the left
  @if nth($new-columns, 1) == null or nth($new-columns, 1) == 'auto' {
    // padding-right: (nth($new-columns, 2) + $gutter);
    padding: get-TRBL(opposite($float) (nth($new-columns, 2) + $gutter-ie8));
    @include box-sizing(border-box);

    @for $i from 1 through length($new-columns) {
      > #{nth($selector-list, nth($positions, $i))} {
        @if $i == 1 {
          // float: left;
          float: $float;
          width: 100%;
        } @else {
          // float: right;
          // margin-right: (- (nth($new-columns, 2) + $gutter));
          float: opposite($float);
          width: nth($new-columns, 2);
          margin: get-TRBL(opposite($float) (- (nth($new-columns, 2) + $gutter-ie8)));
        }
      }
    }

  // flexible-column is on the right
  } @else {
    // padding-left: (nth($new-columns, 1) + $gutter);
    padding: get-TRBL($float (nth($new-columns, 1) + $gutter-ie8));
    @include box-sizing(border-box);

    @for $i from 1 through length($new-columns) {
      > #{nth($selector-list, nth($positions, $i))} {
        @if $i == 1 {
          // float: left;
          // margin-left: (- (nth($new-columns, 1) + $gutter));
          float: $float;
          width: nth($new-columns, 1);
          margin: get-TRBL($float (- (nth($new-columns, 1) + $gutter-ie8)));

        } @else {
          // float: right;
          float: opposite($float);
          width: 100%;
        }
      }
    }
  }

}