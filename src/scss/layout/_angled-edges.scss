// *** angled-edges *** //
@mixin angled-edges ($key) {
  $edges: ro-get($key, $ro-angled-edges, 'bottom');
  $flip: ro-get($key, 'flip');
  $selector: '&:before, &:after';
  @if $edges == 'top' {
    $selector: '&:before';
  } @else if $edges == 'bottom' {
    $selector: '&:after';
  }

  $angle-1: false;
  $angle-2: false;
  $gap: false;
  $gap-1: false;
  $gap-2: false;
  @if type-of($key) == 'number' {
    @if unit($key) == 'deg' {
      $angle-1: $key;
    } @else {
      $gap: $key;
    }
  } @else if type-of($key) == 'list' {
    @each $item in $key {
      @if type-of($item) == 'number' {
        @if unit($item) == 'deg' {
          @if $angle-1 {
            $angle-2: $item;
          } @else {
            $angle-1: $item;
          }
        } @else {
          $gap: $item;
        }
      }
    }
  }
  @if not $angle-1 { $angle-1: 15deg; }
  @if not $angle-2 { 
    @if $flip {
      $angle-2: - $angle-1; 
    } @else {
      $angle-2: $angle-1; 
    }
  }

  @if not $gap { $gap: 0; }
  @if unitless($gap) or unit($gap) == '%' {
    $gap-1: ((tan(abs($angle-1)) * 100%) + $gap);
    $gap-2: ((tan(abs($angle-2)) * 100%) + $gap);
  } @else {
    $gap-1: calc(#{(tan(abs($angle-1)) * 100%)} + #{$gap});
    $gap-2: calc(#{(tan(abs($angle-2)) * 100%)} + #{$gap});
  }

  position: relative;
  z-index: 1;
  #{$selector} {
    background: inherit;
    content: '';
    display: block;
    position: absolute;
    left: 0;
    right: 0;
    height: 50%;
    z-index: -1;
  }

  @if $edges == 'top' {
    #{$selector} {
      #{$edges}: 0;
      @include transform(skewY($angle-1));
      @if strip-unit($angle-1) < 0 {
        @include transform-origin(0 0);
      } @else {
        @include transform-origin(100% 0);
      }
    }
    // supports transforms, doesn't support calc
    @if not unitless($gap) and unit($gap) != '%' {
      .csstransforms.no-csscalc & { margin-#{$edges}: (tan(abs($angle-1)) * 100%); }
    }
    // supports transforms and calc
    .csstransforms & { margin-#{$edges}: $gap-1; }
  } @else if $edges == 'bottom' {
    #{$selector} {
      // background-position: 0 56.25%;
      #{$edges}: 0;
      @include transform(skewY($angle-1));
      @if strip-unit($angle-1) < 0 {
        @include transform-origin(100% 0);
      } @else {
        @include transform-origin(0 100%);
      }
    }
    // supports transforms, doesn't support calc
    @if not unitless($gap) and unit($gap) != '%' {
      .csstransforms.no-csscalc & { margin-#{$edges}: (tan(abs($angle-1)) * 100%); }
    }
    // supports transforms and calc
    .csstransforms & { margin-#{$edges}: $gap-1; }
  } @else if $edges == 'both' {
    &:before {
      top: 0;
      @include transform(skewY($angle-1));
      @if strip-unit($angle-1) < 0 {
        @include transform-origin(0 0);
      } @else {
        @include transform-origin(100% 0);
      }
    }
    &:after {
      bottom: 0;
      @include transform(skewY($angle-2));
      @if strip-unit($angle-2) < 0 {
        @include transform-origin(100% 0);
      } @else {
        @include transform-origin(0 100%);
      }
    }
    // supports transforms, doesn't support calc
    @if not unitless($gap) and unit($gap) != '%' {
      .csstransforms.no-csscalc & { 
        margin-top: (tan(abs($angle-1)) * 100%); 
        margin-bottom: (tan(abs($angle-2)) * 100%); 
      }
    }
    // supports transforms and calc
    .csstransforms & { 
      margin-top: $gap-1;
      margin-bottom: $gap-2;
    }
  }

}