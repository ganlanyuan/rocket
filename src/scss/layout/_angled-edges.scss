// *** angled-edges *** //
@mixin angled-edges ($key) {
  @include check-arg-type($key, 'map');

  $color: map-get($key, 'color');
  $angle: map-get($key, 'angle');
  $color1: if(length($color) >= 1, nth($color, 1), #fff);
  $color2: if(length($color) >= 2, nth($color, 2), #fff);
  $angle1: false;
  $angle2: false;
  $edge: if(map-get($key, 'edge'), map-get($key, 'edge'), 'bottom');
  $flip: map-get($key, 'flip');
  $view: 1800px;

  // set selector
  $selector: '&:before, &:after';
  @if $edge == 'top' {
    $selector: '&:before';
  } @else if $edge == 'bottom' {
    $selector: '&:after';
  }

  // angles
  @if $angle {
    @each $item in $angle {
      @if type-of($item) == 'number' and unit($item) == 'deg' {
        @if not $angle1 {
          $angle1: $item;
        } @else {
          $angle2: $item;
        }
      }
    }
  }
  @if not $angle1 { $angle1: 5deg; }
  @if not $angle2 { $angle2: $angle1; }
  @if $flip { $angle2: - $angle1; }

  // *** output *** //
  position: relative;
  overflow: hidden;
  #{$selector} {
    content: '';
    display: block;
    position: absolute;
    width: 0;
    height: 0;
    border: 0px solid transparent;
  }

  @if $edge == 'top' or $edge == 'bottom' {
    $dir: right;
    @if $edge == 'bottom' { $dir: left; }

    padding-#{$edge}: edge-tan($angle1, 100%);
    #{$selector} {
      #{$edge}: 0;
      border-#{$edge}: edge-tan($angle1, $view) solid $color1;

      @if strip-unit($angle1) < 0 {
        #{$dir}: 0;
        border-#{$dir}-width: $view;
      } @else {
        #{opposite($dir)}: 0;
        border-#{opposite($dir)}-width: $view;
      }
    }
  } @else if $edge == 'both' {
    padding-top: edge-tan($angle1, 100%);
    padding-bottom: edge-tan($angle2, 100%);
    &:before {
      top: 0;
      border-top: edge-tan($angle1, $view) solid $color1;

      @if strip-unit($angle1) < 0 {
        right: 0;
        border-right-width: $view;
      } @else {
        left: 0;
        border-left-width: $view;
      }
    }
    &:after {
      bottom: 0;
      border-bottom: edge-tan($angle2, $view) solid $color2;

      @if strip-unit($angle2) < 0 {
        left: 0;
        border-left-width: $view;
      } @else {
        right: 0;
        border-right-width: $view;
      }
    }
  }

}

@function edge-tan($angle1, $width) {
  @return (tan(abs($angle1)) * $width);
}