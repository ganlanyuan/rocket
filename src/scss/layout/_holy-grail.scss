@mixin holy-grail($key){
  $selector: args-get-next($key, 'selector', 'div');
  $gutter: args-get-next($key, 'gutter', $global-gutter);
  // strip unit when gutter == 0
  $gutter: check-zero-value($gutter);
  $float: if(index($key, 'RTL'), right, left);

  $global-breakpoints: args-get-global-breakpoints($key);
  @if $global-breakpoints { $key: list-remove($key, $global-breakpoints); } // remove global-breakpoints from args if exist
  $local-breakpoints: false;
  $condition: args-get($key, ('min' 'max'), 'min');
  $media: args-get($key, $ro-media-type);
  $keep: args-get($key, 'keep', false);

  // get data
  $column: args-get-liquid-data($key, 3);
  $columns: false;
  $order: false;

  @include clearfix(); 
  // using map
  @if type-of($column) == 'map' {

    // simple map: without breakpoint
    // ('auto' 200px 150px : 2 1 1)
    @if length(nth(map-keys($column), 1)) == 3 {
      $columns: nth(map-keys($column), 1);
      $order: nth(map-values($column), 1);
      @include make-holy-grail($columns, $order, $selector, $gutter, $float);

    // ('auto' : 2, 200px : 1, 150px : 1)
    } @else if is-simple-map($column) {
      $columns: map-keys($column);
      $order: map-values($column);
      @include make-holy-grail($columns, $order, $selector, $gutter, $float);

    // complex map: with breakpoints
    } @else {
      @if $global-breakpoints { $column: map-update-breakpoints($column, $global-breakpoints); }
      $local-breakpoints: map-keys($column);

      @if index($local-breakpoints, 'default') { 
        // set default styles
        $default-column: map-get($column, 'default');

        @if type-of($default-column) == 'list' {
          $columns: $default-column;
          @if not $order { $order: (1 2 3); }
        } @else if type-of($default-column) == 'map' {
          $columns: map-keys($default-column);
          $order: map-values($default-column);
        }

        // set default columns styles
        @if length($local-breakpoints) == 1 {
          @include make-holy-grail($columns, $order, $selector, $gutter, $float);
        } @else {
          $local-breakpoints-nums: list-remove($local-breakpoints, 'default');

          @if $condition == 'max' {
            @include bp('min' max($local-breakpoints-nums...)) {
              @include make-holy-grail($columns, $order, $selector, $gutter, $float);
            }
          } @else {
            @include bp(0 min($local-breakpoints-nums...)) {
              @include make-holy-grail($columns, $order, $selector, $gutter, $float);
            }
          }

          // remove 'default' from breakpoints
          $local-breakpoints: $local-breakpoints-nums;
        }
      }

      // re-order breakpoints based on codition
      @if type-of($local-breakpoints) == 'list' and length($local-breakpoints) > 1 {
        $local-breakpoints: if($condition == 'max', list-decrease($local-breakpoints), list-increase($local-breakpoints));
      }

      // loop through the breakpoints
      @for $i from 1 through length($local-breakpoints) {
        $bp: nth($local-breakpoints, $i);
        $column-item: map-get($column, $bp);

        @if type-of($column-item) == 'list' {
          $columns: $column-item;
          @if not $order { $order: (1 2 3); }
        } @else if type-of($column-item) == 'map' {
          $columns: map-keys($column-item);
          $order: map-values($column-item);
        }

        // use @media (min) and (max)
        @if $i < length($local-breakpoints) {
          @include bp($media $bp nth($local-breakpoints, $i + 1)) {
            @include make-holy-grail($columns, $order, $selector, $gutter, $float);
          }

        // use @media (min) or (max)
        } @else {
          @include bp($condition $media $bp) {
            @include make-holy-grail($columns, $order, $selector, $gutter, $float);
          }
        }
      }
    }
    
  // using list
  } @else {
    $columns: $column;
    $order: (1 2 3);
    @include make-holy-grail($columns, $order, $selector, $gutter, $float);
  }

}

@mixin make-holy-grail($columns, $order, $selector, $gutter, $float) {
  $sidebars: list-remove($columns, 'auto');

  $selector-list: ();
  @if type-of($selector) == 'string' {
    $selector-list: ('#{$selector}:nth-child(1)', '#{$selector}:nth-child(2)', '#{$selector}:nth-child(3)');
  } @else if type-of($selector) == 'list' and length($selector) == 3 {
    $selector-list: $selector;
  } 

  // get positions based on order
  // (2 1): the second column on the left
  // (1 2): the first column on the left
  $positions: get-position-from-order($order);

  // $new-columns: ();
  // @for $i from 1 through 3 {
  //   $new-columns: append($new-columns, nth($columns, nth($positions, $i)));
  // }

  // loop through columns
  @for $i from 1 through length($columns) {
    > #{nth($selector-list, $i)} {
      // set float
      //   1 2 3
      // a * * *
      // b * * *
      // c * * *
      @if nth($positions, 1) == $i {
        float: #{$float};
      } @else if nth($positions, 3) == $i {
        float: #{opposite($float)};
      } @else {
        @if $i == 1 {
          float: #{$float};
        } @else if nth($positions, 1) == 1 {
          float: #{$float};
        } @else {
          float: #{opposite($float)};
        }
      }

      @if $gutter == 0 { $gutter: 0px; }

      // set width
      @if nth($columns, $i) == 'auto' {
        @if $gutter == 0 { $gutter: 0px; }
        width: -webkit-calc(100% - #{nth($sidebars, 1)} - #{nth($sidebars, 2)} - #{$gutter * 2});
        width: -moz-calc(100% - #{nth($sidebars, 1)} - #{nth($sidebars, 2)} - #{$gutter * 2});
        width: calc(100% - #{nth($sidebars, 1)} - #{nth($sidebars, 2)} - #{$gutter * 2});
      } @else {
        width: nth($columns, $i);
      }

      // set margin
      @if nth($positions, 2) == $i {
        $fl: if($i == 1 or nth($positions, 1) == 1, $float, opposite($float));
        margin-#{$fl}: $gutter;
      }

      // switch columns when the 1st column is in the middle
      // b a c
      // c a b
      @if nth($positions, 2) == 1 {
        $auto-plus: 100% - #{nth($sidebars, 1)} - #{nth($sidebars, 2)} - #{$gutter * 2};
        $auto-minus: -100% + #{nth($sidebars, 1)} + #{nth($sidebars, 2)} + #{$gutter};
        $col1: nth($columns, nth($positions, 1));
        $col2: nth($columns, 1);
        @if $i == 1 {
          position: relative;
          @if $col1 == 'auto' {
            @include get-calc($float, $auto-plus);
          } @else {
            #{$float}: $col1; 
          }
        } @else if $i == nth($positions, 1) {
          position: relative;
          @if $col2 == 'auto' {
            @include get-calc($float, $auto-minus);
          } @else {
            @if unit($col2) == unit($gutter) or $gutter == 0 {
              #{$float}: - ($col2 + $gutter);
            } @else {
              @include get-calc($float, #{-$col2} - #{$gutter});
            }
          }
        }
      }
    }
  }

}