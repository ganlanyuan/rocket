@mixin holy-grail($key){
  $selector: args-get-next($key, 'selector', 'div');
  $gutter: args-get-next($key, 'gutter', $global-gutter);
  // strip unit when gutter == 0
  $gutter: check-zero-value($gutter);
  $float: if(index($key, 'RTL'), right, left);

  $global-breakpoints: args-get-global-breakpoints($key);
  @if $global-breakpoints { $key: list-remove($key, $global-breakpoints); } // remove global-breakpoints from args if exist
  $local-breakpoints: false;
  $condition: args-get($key, ('min' 'max'), 'min');
  $media: args-get($key, $ro-media-type);
  $keep: args-get($key, 'keep', false);

  // get data
  $column: args-get-liquid-data($key, 3);
  $columns: false;
  $order: false;




  @include clearfix(); 
  // using map
  @if type-of($column) == 'map' {

    // simple map: without breakpoint
    // ('auto' 200px 150px : 2 1 1)
    @if length(nth(map-keys($column), 1)) == 3 {
      $columns: nth(map-keys($column), 1);
      $order: nth(map-values($column), 1);
      @include make-holy-grail($columns, $order, $selector, $gutter, $float);

    // ('auto' : 2, 200px : 1, 150px : 1)
    } @else if is-simple-map($column) {
      $columns: map-keys($column);
      $order: map-values($column);
      @include make-holy-grail($columns, $order, $selector, $gutter, $float);

    // complex map: with breakpoints
    } @else {
      @if $global-breakpoints {
        $column: map-update-breakpoints($column, $global-breakpoints);
      }
      $local-breakpoints: map-keys($column);

      @each $bp in $local-breakpoints {
        $column-item: map-get($column, $bp);

        @if type-of($column-item) == 'list' {
          $columns: $column-item;
          @if not $order { $order: (1, 2, 3); }
        } @else if type-of($column-item) == 'map' {
          $columns: map-keys($column-item);
          $order: map-values(map-get($column, $bp));
        }

        @if $bp == 'default' or $bp == null {
          @include make-holy-grail($columns, $order, $selector, $gutter, $float);
        } @else {
          @include bp( ('condition': $condition, 'media': $media, 'breakpoint': $bp) ) {
            @include make-holy-grail($columns, $order, $selector, $gutter, $float);
          }
        }
      }
    }
    
  // using list
  } @else {
    $columns: $column;
    $order: (1, 2, 3);
    @include make-holy-grail($columns, $order, $selector, $gutter, $float);
  }

}

@mixin make-holy-grail($columns, $order, $selector, $gutter, $float) {
  $columns-num: ();
  @each $item in $columns {
    @if type-of($item) == 'number' { $columns-num: append($columns-num, $item); }
  }

  $column-unit: false;
  @if unit(nth($columns-num, 1)) == unit(nth($columns-num, 2)) {
    $column-unit: unit(nth($columns-num, 1));
  } @else {
    @error 'Please match the units. You passed "#{$columns}".'
  }
  $gutter-ie8: gutter-fallback($gutter, $column-unit);

  $selector-list: ();
  $selector-ie8: '';
  @if type-of($selector) == 'string' {

    $selector-list: ('#{$selector}:nth-child(1)', '#{$selector}:nth-child(2)', '#{$selector}:nth-child(3)');
    $selector-ie8: '#{&} > #{$selector}';
  } @else if type-of($selector) == 'list' and length($selector) == 3 {

    $selector-list: $selector;
    $selector-ie8: '#{&} > #{nth($selector, 1)}, #{&} > #{nth($selector, 2)}, #{&} > #{nth($selector, 3)}'
  } 

  $positions: get-position-from-order($order);
  $new-columns: ();
  @for $i from 1 through 3 {
    $new-columns: append($new-columns, nth($columns, nth($positions, $i)));
  }

  @at-root #{$selector-ie8} {
    position: relative;
    @include box-sizing(border-box);
  }

  // flexible-column is on the left
  @if nth($new-columns, 1) == null or nth($new-columns, 1) == 'auto' {

    @for $i from 1 through length($new-columns) {
      > #{nth($selector-list, nth($positions, $i))} {

        @if ($i == 1) {
          // float: left;
          // margin-right: -100%;
          // padding-right: #{(nth($new-columns, 2) + nth($new-columns, 3) + $gutter * 2)});
          float: $float;
          margin: get-TRBL(opposite($float) -100%);
          padding: get-TRBL(opposite($float) (nth($new-columns, 2) + nth($new-columns, 3) + $gutter-ie8 * 2));
          width: 100%;
          z-index: 0;

        } @else {
          // float: right;
          float: opposite($float);
          width: nth($new-columns, $i);
          padding: 0; 
          z-index: 1;

          @if $i == 2 {
            // margin-left: -100%;
            // margin-right: (nth($new-columns, 3) + $gutter);
            margin: get-TRBL(opposite($float) (nth($new-columns, 3) + $gutter-ie8) $float -100%);
          } @else {
            // margin-left: -100%;
            margin: get-TRBL($float -100%);
          }

        }
      }
    }

  // flexible-column is on the middle
  } @else if nth($new-columns, 2) == null or nth($new-columns, 2) == 'auto' {

    @for $i from 1 through length($new-columns) {
      > #{nth($selector-list, nth($positions, $i))} {

        @if ($i == 3) {
          // float: right;
          // margin-left: -100%;
          float: opposite($float);
          width: nth($new-columns, $i);
          margin: get-TRBL($float -100%);
          padding: 0; 
          z-index: 1;

        } @else {
          // float: left;
          float: $float;

          @if $i == 2 {
            // padding-left: #{(nth($new-columns, 1) + $gutter)};
            // padding-right: #{(nth($new-columns, 3) + $gutter)};
            // margin-right: -100%;
            // margin-left: #{(nth($new-columns, 1) + $gutter)};
            width: 100%;
            padding: get-TRBL(opposite($float) (nth($new-columns, 3) + $gutter-ie8) $float (nth($new-columns, 1) + $gutter-ie8));
            margin: get-TRBL(opposite($float) -100%);
            z-index: 0;

          } @else {
            // margin-right: -100%;
            width: nth($new-columns, $i);
            margin: get-TRBL(opposite($float) -100%);
            padding: 0; 
            z-index: 1;
          }
        }
      }
    }

  // flexible-column is on the right
  } @else if nth($new-columns, 3) == null or nth($new-columns, 3) == 'auto' {

    @for $i from 1 through length($new-columns) {
      > #{nth($selector-list, nth($positions, $i))} {

        @if ($i == 3) {
          // float: right;
          // margin-left: -100%;
          // padding-left: (nth($new-columns, 1) + nth($new-columns, 2) + $gutter * 2);
          float: opposite($float);
          width: 100%;
          margin: get-TRBL($float -100%);
          padding: get-TRBL($float (nth($new-columns, 1) + nth($new-columns, 2) + $gutter-ie8 * 2));
          z-index: 0;

        } @else {
          // float: left;
          float: $float;
          width: nth($new-columns, $i);
          padding: 0; 
          z-index: 1;

          @if $i == 2 {
            // margin-left: #{(nth($new-columns, 1) + $gutter)};
            // margin-right: -100%;
            margin: get-TRBL(opposite($float) -100% $float (nth($new-columns, 1) + $gutter-ie8));
          } @else {
            // margin-right: -100%;
            margin: get-TRBL(opposite($float) -100%);
          }

        }
      }
    }
  }
}