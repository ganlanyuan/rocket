@mixin holy-grail($key){
  @include check-arg-type($key, 'map');

  $layout: map-get($key, 'layout');
  $child: if(map-get($key, 'child'), map-get($key, 'child'), 'div');
  $gutter: if(map-get($key, 'gutter'), map-get($key, 'gutter'), map-get($ro-layout, 'gutter'));
  $direction: if(map-get($key, 'direction'), map-get($key, 'direction'), 'LTR');
  $global-breakpoints: map-get($key, 'breakpoints');
  $local-breakpoints: false;
  $condition: if(map-get($key, 'condition'), map-get($key, 'condition'), 'min');
  $media-type: map-get($key, 'media-type');
  $keep: map-get($key, 'keep');

  // strip unit when gutter == 0
  $gutter: check-zero-value($gutter);
  $float: if($direction == 'LTR', left, right);
  $columns: false;
  $order: false; 

  @include clearfix(); 
  // using map
  @if type-of($layout) == 'map' {

    // simple map: without breakpoint
    // ('auto' 200px 150px : 2 1 1)
    @if length(nth(map-keys($layout), 1)) == 3 {
      $columns: nth(map-keys($layout), 1);
      $order: nth(map-values($layout), 1);
      @include make-holy-grail($columns, $order, $child, $gutter, $float);

    // ('auto' : 2, 200px : 1, 150px : 1)
    } @else if is-simple-map($layout) {
      $columns: map-keys($layout);
      $order: map-values($layout);
      @include make-holy-grail($columns, $order, $child, $gutter, $float);

    // complex map: with breakpoints
    } @else {
      @if $global-breakpoints {
        $layout: map-update-breakpoints($layout, $global-breakpoints);
      }
      $local-breakpoints: map-keys($layout);

      @each $bp in $local-breakpoints {
        $layout-item: map-get($layout, $bp);

        @if type-of($layout-item) == 'list' {
          $columns: $layout-item;
          @if not $order { $order: (1, 2, 3); }
        } @else if type-of($layout-item) == 'map' {
          $columns: map-keys($layout-item);
          $order: map-values(map-get($layout, $bp));
        }

        @if $bp == 'default' or $bp == null {
          @include make-holy-grail($columns, $order, $child, $gutter, $float);
        } @else {
          @include bp($condition $media-type $bp) {
            @include make-holy-grail($columns, $order, $child, $gutter, $float);
          }
        }
      }
    }
    
  // using list
  } @else {
    $columns: $layout;
    $order: (1, 2, 3);
    @include make-holy-grail($columns, $order, $child, $gutter, $float);
  }

}

@mixin make-holy-grail($columns, $order, $child, $gutter, $float) {
  $columns-num: ();
  @each $item in $columns {
    @if type-of($item) == 'number' { $columns-num: append($columns-num, $item); }
  }

  $column-unit: false;
  @if unit(nth($columns-num, 1)) == unit(nth($columns-num, 2)) {
    $column-unit: unit(nth($columns-num, 1));
  } @else {
    @error 'Please match the units. You passed "#{$columns}".'
  }
  $gutter-ie8: gutter-fallback($gutter, $column-unit);

  $child-list: ();
  $children-ie8: '';
  @if type-of($child) == 'string' {

    $child-list: ('#{$child}:nth-child(1)', '#{$child}:nth-child(2)', '#{$child}:nth-child(3)');
    $children-ie8: '#{&} > #{$child}';
  } @else if type-of($child) == 'list' and length($child) == 3 {

    $child-list: $child;
    $children-ie8: '#{&} > #{nth($child, 1)}, #{&} > #{nth($child, 2)}, #{&} > #{nth($child, 3)}'
  } 

  $positions: get-position-from-order($order);
  $new-columns: ();
  @for $i from 1 through 3 {
    $new-columns: append($new-columns, nth($columns, nth($positions, $i)));
  }

  @at-root #{$children-ie8} {
    position: relative;
    @include box-sizing(border-box);
  }

  // flexible-column is on the left
  @if nth($new-columns, 1) == null or nth($new-columns, 1) == 'auto' {

    @for $i from 1 through length($new-columns) {
      > #{nth($child-list, nth($positions, $i))} {

        @if ($i == 1) {
          // float: left;
          // margin-right: -100%;
          // padding-right: #{(nth($new-columns, 2) + nth($new-columns, 3) + $gutter * 2)});
          float: $float;
          margin: get-TRBL(opposite($float) -100%);
          padding: get-TRBL(opposite($float) (nth($new-columns, 2) + nth($new-columns, 3) + $gutter-ie8 * 2));
          width: 100%;
          z-index: 0;

        } @else {
          // float: right;
          float: opposite($float);
          width: nth($new-columns, $i);
          padding: 0; 
          z-index: 1;

          @if $i == 2 {
            // margin-left: -100%;
            // margin-right: (nth($new-columns, 3) + $gutter);
            margin: get-TRBL(opposite($float) (nth($new-columns, 3) + $gutter-ie8) $float -100%);
          } @else {
            // margin-left: -100%;
            margin: get-TRBL($float -100%);
          }

        }
      }
    }

  // flexible-column is on the middle
  } @else if nth($new-columns, 2) == null or nth($new-columns, 2) == 'auto' {

    @for $i from 1 through length($new-columns) {
      > #{nth($child-list, nth($positions, $i))} {

        @if ($i == 3) {
          // float: right;
          // margin-left: -100%;
          float: opposite($float);
          width: nth($new-columns, $i);
          margin: get-TRBL($float -100%);
          padding: 0; 
          z-index: 1;

        } @else {
          // float: left;
          float: $float;

          @if $i == 2 {
            // padding-left: #{(nth($new-columns, 1) + $gutter)};
            // padding-right: #{(nth($new-columns, 3) + $gutter)};
            // margin-right: -100%;
            // margin-left: #{(nth($new-columns, 1) + $gutter)};
            width: 100%;
            padding: get-TRBL(opposite($float) (nth($new-columns, 3) + $gutter-ie8) $float (nth($new-columns, 1) + $gutter-ie8));
            margin: get-TRBL(opposite($float) -100%);
            z-index: 0;

          } @else {
            // margin-right: -100%;
            width: nth($new-columns, $i);
            margin: get-TRBL(opposite($float) -100%);
            padding: 0; 
            z-index: 1;
          }
        }
      }
    }

  // flexible-column is on the right
  } @else if nth($new-columns, 3) == null or nth($new-columns, 3) == 'auto' {

    @for $i from 1 through length($new-columns) {
      > #{nth($child-list, nth($positions, $i))} {

        @if ($i == 3) {
          // float: right;
          // margin-left: -100%;
          // padding-left: (nth($new-columns, 1) + nth($new-columns, 2) + $gutter * 2);
          float: opposite($float);
          width: 100%;
          margin: get-TRBL($float -100%);
          padding: get-TRBL($float (nth($new-columns, 1) + nth($new-columns, 2) + $gutter-ie8 * 2));
          z-index: 0;

        } @else {
          // float: left;
          float: $float;
          width: nth($new-columns, $i);
          padding: 0; 
          z-index: 1;

          @if $i == 2 {
            // margin-left: #{(nth($new-columns, 1) + $gutter)};
            // margin-right: -100%;
            margin: get-TRBL(opposite($float) -100% $float (nth($new-columns, 1) + $gutter-ie8));
          } @else {
            // margin-right: -100%;
            margin: get-TRBL(opposite($float) -100%);
          }

        }
      }
    }
  }
}