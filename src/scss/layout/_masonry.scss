// *** masonry *** //
@mixin masonry ($key) {
  @include check-arg-type($key, 'map');

  $column: map-get($key, 'column');
  $selector: if(map-get($key, 'selector'), map-get($key, 'selector'), 'li');
  $gutter: if(map-get($key, 'gutter'), map-get($key, 'gutter'), $global-gutter);
  $global-breakpoints: map-get($key, 'breakpoint');
  $local-breakpoints: false;
  $condition: if(map-get($key, 'condition'), map-get($key, 'condition'), 'min');
  $media-type: map-get($key, 'media');
  $keep: map-get($key, 'keep');

  // strip unit when gutter == 0
  $gutter: check-zero-value($gutter);

  // transfer % to em
  @if $gutter and strip-unit($gutter) != 0 and index(('%', 'vw', 'vmax'), unit($gutter)) != null{
    $gutter: to-length((strip-unit($gutter) * 10 / 16), em);
  }

  @if type-of($column) == 'map' {
    @if $global-breakpoints { $column: map-update-breakpoints($column, $global-breakpoints); }
    $local-breakpoints: map-keys($column);

    @if index($local-breakpoints, null) != null or index($local-breakpoints, 'default') != null { 
      $keep: false; 
    }

    @each $bp in $local-breakpoints {
      $count: map-get($column, $bp);

      @if $bp == 'default' or $bp == null {
        @include masonry-base($selector, $gutter);
        $keep: true;
        @include make-masonry($count);

      } @else if type-of($bp) == 'number' {
        @include bp( ('condition': $condition, 'media': $media-type, 'breakpoint': $bp) ) {
          @if not $keep {
            @include masonry-base($selector, $gutter);
            $keep: true;
          }
          @include make-masonry($count);
        }
      } @else {
        @warn '"#{$bp}" is not a valid breakpoint.';
      }
    }
  } @else {
    @include masonry-base($selector, $gutter);
    @include make-masonry($column);
  }
}

@mixin masonry-base($selector, $gutter){
  overflow: hidden; // fix an chrome overflow
  @if $gutter {
    -webkit-column-gap: $gutter;
       -moz-column-gap: $gutter;
            column-gap: $gutter;
  }
  > #{$selector} {
    @if not $gutter {
      // default column-gap: 1em
      padding-bottom: 1em;
    } @else if $gutter != 0 {
      padding-bottom: $gutter;
    }
    -webkit-column-break-inside: avoid;
              page-break-inside: avoid;
                   break-inside: avoid;
  }
}

@mixin make-masonry($count) {
  -webkit-column-count: $count;
     -moz-column-count: $count;
          column-count: $count;
}