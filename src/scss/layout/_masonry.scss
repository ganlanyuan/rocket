@mixin masonry ($key) {
  $selector: args-get-next($key, 'selector', 'li');
  $gutter: args-get-next($key, 'gutter', $global-gutter);
  // strip unit when gutter == 0
  $gutter: check-zero-value($gutter);

  $global-breakpoints: args-get-global-breakpoints($key);
  @if $global-breakpoints { $key: list-remove($key, $global-breakpoints); } // remove global-breakpoints from args if exist
  $local-breakpoints: false;
  $condition: args-get($key, ('min' 'max'), 'min');
  $media: args-get($key, $ro-media-type);
  $keep: args-get($key, 'keep', false);

  // get data
  $column: false;
  @if type-of($key) == 'number' and unitless($key) or 
      type-of($key) == 'map' {
    $column: $key;
  } @else if type-of($key) == 'list' and not $column {
    @each $item in $key {
      @if not $column and
          type-of($item) == 'number' and unitless($item) or
          type-of($item) == 'map' {
        $column: $item;
      }
    }
  }
  
  // if not valuable data found
  @if not $column { @error 'Parameters must include number or map.'; }

  // transfer % to em
  @if $gutter and strip-unit($gutter) != 0 and index(('%', 'vw', 'vmax'), unit($gutter)) != null{
    $gutter: to-length((strip-unit($gutter) * 10 / 16), em);
  }





  @if type-of($column) == 'map' {
    @if $global-breakpoints { $column: map-update-breakpoints($column, $global-breakpoints); }
    $local-breakpoints: map-keys($column);

    @if index($local-breakpoints, null) != null or index($local-breakpoints, 'default') != null { 
      $keep: false; 
    }

    @each $bp in $local-breakpoints {
      $count: map-get($column, $bp);

      @if $bp == 'default' or $bp == null {
        @include masonry-base($selector, $gutter);
        $keep: true;
        @include make-masonry($count);

      } @else if type-of($bp) == 'number' {
        @include bp($condition $media $bp) ) {
          @if not $keep {
            @include masonry-base($selector, $gutter);
            $keep: true;
          }
          @include make-masonry($count);
        }
      } @else {
        @warn '"#{$bp}" is not a valid breakpoint.';
      }
    }
  } @else {
    @include masonry-base($selector, $gutter);
    @include make-masonry($column);
  }
}

@mixin masonry-base($selector, $gutter){
  overflow: hidden; // fix an chrome overflow
  @if $gutter {
    -webkit-column-gap: $gutter;
       -moz-column-gap: $gutter;
            column-gap: $gutter;
  }
  > #{$selector} {
    @if not $gutter {
      // default column-gap: 1em
      padding-bottom: 1em;
    } @else if $gutter != 0 {
      padding-bottom: $gutter;
    }
    -webkit-column-break-inside: avoid;
              page-break-inside: avoid;
                   break-inside: avoid;
  }
}

@mixin make-masonry($count) {
  -webkit-column-count: $count;
     -moz-column-count: $count;
          column-count: $count;
}