@mixin gallery($key){
  $maps: args-get-maps($key);
  $map: false;
  $per-row: 1;
  $gutter: args-get-next($key, 'gutter', map-get($ro-layout, gutter));
  $child: args-get-next($key, 'child', 'li');
  $float: if(args-get($key, $ro-text-direction, 'LTR') == 'LTR', left, right);

  $global-bps: false;
  $bps: false;
  $condition: args-get($key, ('min' 'max'), 'min');
  $media-type: args-get($key, $ro-media-type);

  $keep: args-get($key, 'keep');

  // get map
  @if length($maps) >= 1 {
    $map: nth($maps, 1);
  }
  @if length($maps) >= 2 {
    $global-bps: nth($maps, 2);
  }

  // get per-row
  @if type-of($key) == 'number' and unitless($key) {
    $per-row: $key;
  } @else if type-of($key) == 'list' and not $map {
    @each $item in $key {
      @if type-of($item) == 'number' {
        @if unitless($item) {
          $per-row: $item;
        }
      }
    }
  }

  // update $map breakpoints
  @if $global-bps {
    $map: map-update-breakpoints($map, $global-bps);
  }
  @if $map {
    $bps: map-keys($map);
  }

  // *** output *** //
  @if not $keep {
    @include clearfix();
    margin-right: - $gutter;
  }

  > #{$child} {
    @if not $keep {
      float: $float;
      -webkit-box-sizing: border-box;
      -moz-box-sizing: border-box;
      box-sizing: border-box;
      padding: 0 $gutter $gutter 0;
    }
  }

  // set col width
  @if $bps {
    @each $bp in $bps {
      $this-per-row: map-get($map, $bp);

      @if $bp == null or $bp == 'default' {
        @include make-gallery($this-per-row, $child, false);
      } @else if type-of($bp) == 'number' {
        @include bp($bp $condition) {
          @include make-gallery($this-per-row, $child, false);
        }
      }
    }
  } @else {
     @include make-gallery($per-row, $child, false);
  }
}

@mixin make-gallery($per-row, $child, $ie8) {
  > #{$child} { 
    width: percentage(1 / $per-row); 
    &:nth-child(n) { clear: none; }
    &:nth-child(#{$per-row}n+1) { clear: both; }
  }
}