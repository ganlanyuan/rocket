// *** gallery *** //
@mixin gallery($key){
  $per-row: 1;
  @each $item in $key {
    @if type-of($item) == number and unitless($item) {
      $per-row: $item;
    }
  }
  $map: false;
  $map-keys: false;
  $breakpoints: false;

  @if type-of($key) == 'map' {
    $map: $key;
  } @else if type-of($key) == 'list' {
    @each $item in $key {
      @if type-of($item) == 'map' {
        @if not $map {
          $map: $item;
        } @else if not $breakpoints {
          $breakpoints: $item;
        }
      }
    }
  }
  @if $map { $map-keys: map-keys($map); }

  $gutter: ro-get-next($key, 'gutter', map-get($ro-layout, gutter));
  $child: ro-get-next($key, 'child', 'li');
  $direction: ro-get($key, left right, right);
  $keep: ro-get($key, 'keep');
  $condition: ro-get($key, ('min' 'max'), 'min');

  // *** output *** //
  @if not $keep {
    @include clearfix();
    margin-right: - $gutter;
  }

  > #{$child} {
    @if not $keep {
      float: opposite($direction);
      box-sizing: border-box;
      padding: 0 $gutter $gutter 0;
    }

    // set col width
    @if $map {
      @each $item in $map-keys {
        @if type-of($item) == 'number' {
          @include bp($item $condition) { 
            width: percentage(1 / map-get($map, $item)); 
            &:nth-child(n) { clear: none; }
            &:nth-child(#{map-get($map, $item)}n+1) { clear: both; }
          }
        } @else if $item == 'null' or $item == 'default' {
          width: percentage(1 / map-get($map, $item));
          &:nth-child(n) { clear: none; }
          &:nth-child(#{map-get($map, $item)}n+1) { clear: both; }
        } @else if $breakpoints {
          @include bp(map-get($breakpoints, $item) $condition) { 
            width: percentage(1 / map-get($map, $item)); 
            &:nth-child(n) { clear: none; }
            &:nth-child(#{map-get($map, $item)}n+1) { clear: both; }
          }
        }
      }
    } @else {
      width: percentage(1 / $per-row);
      &:nth-child(n) { clear: none; }
      &:nth-child(#{$per-row}n+1) { clear: both; }
    }
  }
}
