// *** liquid-3 *** //
@mixin holy-grail($key){
  $maps: args-get-maps($key);
  $map: false;
  $columns: false;
  $order: false; // for flexbox
  $position-number: (); // for non-flexbox
  $child: args-get-next($key, 'child', 'div');
  $gutter: args-get-next($key, 'gutter', map-get($ro-layout, 'gutter'));

  $global-bps: false;
  $bps: ();
  $condition: args-get($key, ('min' 'max'), 'min');
  $media-type: args-get($key, $ro-media-type);

  $use-flex: args-get($key, 'use-flex');
  $non-flex: if($use-flex, '.no-flexbox.no-flexboxtweener &', '&');
  $initialized: false;

  // get map
  @if length($maps) >= 1 {
    $map: nth($maps, 1);
  }
  @if length($maps) >= 2 {
    $global-bps: nth($maps, 2);
  }

  @if length($maps) == 0 and type-of($key) == 'list' {
    @if not is-nested-list($key) {
      @if is-liquid-list($key) {
        $columns: $key;
      } @else {
        $child: $key;
      }
    } @else {
      @each $item in $key {
        @if type-of($item) == 'list' and not is-nested-list($item) {
          @if is-liquid-list($item) {
            $columns: $item;
          } @else {
            $child: $item;
          }
        }
      }
    }
  }
  
  @if $map {
    @if is-simple-map($map) {
      $columns: map-keys($map);
      $order: map-values($map);
      $position-number: get-position-number($order);

      @include make-holy-grail($columns, $order, $position-number, $child, $gutter, $initialized, $use-flex, $non-flex);
    } @else {
      // has breakpoint
      @if $global-bps {
        $map: map-update-breakpoints($map, $global-bps);
      }
      $bps: map-keys($map);

      @for $i from 1 through length($bps) {
        $bp: nth($bps, $i);
        $layout: map-get($map, $bp);

        @if $i != 1 {
          $initialized: true;
        }

        @if type-of($layout) == 'list' {
          $columns: $layout;
          @if not $position-number { $position-number: (1, 2, 3); }
        } @else if type-of($layout) == 'map' {
          $columns: map-keys($layout);
          $order: map-values(map-get($map, $bp));
          $position-number: get-position-number($order);
        }

        @if $bp == 'default' or $bp == null {
          @include make-holy-grail($columns, $order, $position-number, $child, $gutter, $initialized, $use-flex, $non-flex);
        } @else {
          @include bp($condition $media-type $bp) {
            @include make-holy-grail($columns, $order, $position-number, $child, $gutter, $initialized, $use-flex, $non-flex);
          }
        }
      }
    }
    
  } @else {
    @if not $position-number { $position-number: (1, 2, 3); }

    @include make-holy-grail($columns, $order, $position-number, $child, $gutter, $initialized, $use-flex, $non-flex);
  }

}

@mixin make-holy-grail($columns, $order, $position-number, $child, $gutter, $initialized, $use-flex, $non-flex) {

  $child-list: if(
    type-of($child) == 'list' and length($child) == 3,
    $child, 
    ("> #{$child}:nth-child(1)", "> #{$child}:nth-child(2)", "> #{$child}:nth-child(3)") );
  $children: if(
    type-of($child) == 'list' and length($child) == 3,
    ("> #{nth($child, 1)}, > #{nth($child, 2)}, > #{nth($child, 3)}"), 
    "> #{$child}" );
  $child-reset: if(
    type-of($child) == 'list' and length($child) == 3,
    $children,
    "> #{$child}:nth-child(n)" );

  @if $use-flex {
    @if not $initialized {
      @include ro-flexbox;

      // flex gutter
      margin-right: - $gutter;
      #{$children} { margin-right: $gutter; }
    }
    
    @for $i from 1 through length($columns) {
      $thisWidth: nth($columns, $i);
      $asides: list-remove($columns, null);

      #{nth($child-list, $i)} {
        width: if(
          $thisWidth == null,
          calc(100% - #{nth($asides, 1)} - #{nth($asides, 2)} - #{$gutter * 3}),
          $thisWidth );

        @if $order { @include ro-order(nth($order, $i)); }
      }
    }
  }

  // no-flexbox
  #{$non-flex} {
    // get main-layout
    $main-layout: null;
    @if nth($columns, nth($position-number, 1)) == null {
      $main-layout: 'left';
    } @else if nth($columns, nth($position-number, 2)) == null {
      $main-layout: 'center';
    } @else if nth($columns, nth($position-number, 3)) == null {
      $main-layout: 'right';
    }

    // check gutter 
    @if unit($gutter) == '%' { $gutter: 0; }
    // get left, right and full width 
    $left-width: 0;
    $right-width: 0;
    $full-width: 0;
    $new-keys: ();
    $new-order: ();
    @for $i from 1 through length($columns) {
      @if nth($columns, $i) == null {
        $new-keys: list-remove($columns, null);
        $new-order: list-remove($position-number, $i);
      } @else {
        @if unitless(nth($columns, $i)) {
          $columns: set-nth($columns, $i, (nth($columns, $i) * 1px));
        }
        $full-width: ($full-width + nth($columns, $i) + $gutter);
      }
    }
    @if nth($new-order, 1) > nth($new-order, 2) {
      $left-width: (nth($new-keys, 2) + $gutter);
      $right-width: (nth($new-keys, 1) + $gutter);
    } @else {
      $left-width: (nth($new-keys, 1) + $gutter);
      $right-width: (nth($new-keys, 2) + $gutter);
    }

    @if $columns {
      @if not $initialized { 
        @include clearfix();
        margin-right: 0;
        #{$children} { box-sizing: border-box; } 
      } @else {
        #{$child-reset} { padding: 0; margin: 0; }
      }

      @if $main-layout == 'left' {
        #{nth($child-list, nth($position-number, 1))} {
          width: 100%;
          padding-right: $full-width;
          float: left;
          margin-right: -100%;
        } 
        #{nth($child-list, nth($position-number, 2))} {
          width: nth($columns, nth($position-number, 2));
          margin-right: $right-width;
          float: right;
          margin-left: -100%;
        }
        #{nth($child-list, nth($position-number, 3))} {
          width: nth($columns, nth($position-number, 3));
          float: right;
          margin-left: -100%;
          margin-right: 0; // reset flex margin-right
        }
      } @else if $main-layout == 'center' {
        #{nth($child-list, nth($position-number, 1))} {
          width: nth($columns, nth($position-number, 1));
          float: left;
          margin-right: -100%;
        }
        #{nth($child-list, nth($position-number, 2))} {
          width: 100%;
          padding-left: $left-width;
          padding-right: $right-width;
          float: left;
          margin-right: -100%;
        }
        #{nth($child-list, nth($position-number, 3))} {
          width: nth($columns, nth($position-number, 3));
          float: right;
          margin-left: -100%;
          margin-right: 0; // reset flex margin-right
        }
      } @else if $main-layout == 'right' {
        #{nth($child-list, nth($position-number, 1))} {
          width: nth($columns, nth($position-number, 1));
          float: left;
          margin-right: -100%;
        }
        #{nth($child-list, nth($position-number, 2))} {
          width: nth($columns, nth($position-number, 2));
          margin-left: $left-width;
          float: left;
          margin-right: -100%;
        } 
        #{nth($child-list, nth($position-number, 3))} {
          width: 100%;
          padding-left: $full-width;
          float: right;
          margin-left: -100%;
          margin-right: 0; // reset flex margin-right
        }
      }

    }
  }
}

@function get-position-number($order) {
  $nums: list-increase(list-remove-duplicates($order)); // reordered values
  $position-number: ();

  @each $num in $nums {
    @for $i from 1 through length($order) {
      @if nth($order, $i) == $num {
        $position-number: append($position-number, $i);
      }
    }
  }

  @return $position-number;
}


@mixin liquid-3($key) {
  @include holy-grail($key);
}

