// *** masonry-cluster *** //
@mixin masonry-cluster ($key) {
  $map: false;
  $columns: false;
  $bps: false;
  $condition: args-get($key, ('min' 'max'), 'min');

  $child: args-get-next($key, 'child', 'li');
  $direction: args-get($key, $ro-masonry-cluster-directions, row);
  $gutter: args-get-next($key, 'gutter');
  $gutter-direction: if($direction == row, right, bottom);
  @if not $gutter { $gutter: 0; }
  $initialized: false;

  // get map
  @if type-of($key) == 'map' {
    $map: $key;
  } @else if type-of($key) == 'list' {
    @if is-deep-list($key) {
      @each $item in $key {
        @if type-of($item) == 'map' or type-of($item) == 'list' {
          @if not $map {
            $map: $item;
          }

          @if type-of($item) == 'map' and $map {
            $bps: $item;
          }
        }
      }
    } @else {
      $map: $key;
    }
  } 

  // *** output *** //
  @if type-of($map) == 'list' {
    $columns: $map;
    @include make-masonry-cluster ($columns, $child, $direction, $gutter, $gutter-direction, $initialized);
  } @else {
    @if $bps {
      $map: map-update-breakpoints($map, $bps);
    }

    @for $i from 1 through length(map-keys($map)) {
      $bp: nth(map-keys($map), $i);
      $columns: nth(map-values($map), 1);

      @if type-of($bp) == 'number' {
        @include bp($bp $condition) {
          @include make-masonry-cluster($columns, $child, $direction, $gutter, $gutter-direction, $initialized);
        }
      } @else {
        @include make-masonry-cluster($columns, $child, $direction, $gutter, $gutter-direction, $initialized);
      }

      @if $i == 1 {
        $initialized: true;
      }
    }
  }
}

@mixin make-masonry-cluster ($map, $child, $direction, $gutter, $gutter-direction, $initialized) {
  @if not $initialized {
    @include ro-flexbox;
    @include ro-flex-direction($direction);
    @include ro-justify-content(space-between);
  }

  $full-columns: 0;
  @each $item in $map {
    $full-columns: $full-columns + $item;
  }

  > #{$child} {
    @if not $initialized {
      @include ro-flex(1 1 auto);
      overflow: hidden;
    }

    $child-count: length($map);
    @for $i from 1 through $child-count {
      &:nth-child(#{$i}) {
        @include ro-flex-basis(calc(#{percentage(nth($map, $i) / $full-columns)} - #{$gutter * ($child-count - 1) / $child-count}));

        @if not $initialized and $i != length($map) {
          margin-#{$gutter-direction}: $gutter;
        }
      }
    }
  }
}
