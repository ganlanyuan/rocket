@mixin liquid-2($key){
  $maps: args-get-maps($key);
  $map: false;
  $columns: false;
  $order: false; 
  $child: args-get-next($key, 'child', 'div');
  $gutter: args-get-next($key, 'gutter', map-get($ro-layout, 'gutter'));
  $ie8: args-get($key, 'ie8', false);

  $global-bps: false;
  $bps: ();
  $condition: args-get($key, ('min' 'max'), 'min');
  $media-type: args-get($key, $ro-media-type);


  // get map
  // (200px:1, null:0)
  @if length($maps) >= 1 {
    $map: nth($maps, 1);
  }
  @if length($maps) >= 2 {
    $global-bps: nth($maps, 2);
  }

  // if no map, use list
  // (200px null)
  @if length($maps) == 0 and type-of($key) == 'list' {
    @if not is-nested-list($key) {
      @if is-liquid-list($key) {
        $columns: $key;
      } @else {
        $child: $key;
      }
    } @else {
      @each $item in $key {
        @if type-of($item) == 'list' and not is-nested-list($item) {
          @if is-liquid-list($item) {
            $columns: $item;
          } @else {
            $child: $item;
          }
        }
      }
    }
  }
  
  @extend %clearfix; 
  
  // using map
  // (200px:1, null:0)
  @if $map {
    // simple map, without media querys
    // (200px:1, null:0)
    @if is-simple-map($map) {
      $columns: map-keys($map);
      $order: map-values($map);
      @include make-liquid-2($columns, $order, $child, $gutter, false);

      @if $ie8 {
        @include make-liquid-2($columns, $order, $child, $gutter, true);
      }

    // complex map, with media querys
    // ('default': (200px:1, null:0), 800px: (null 300px))
    } @else {
      @if $global-bps {
        $map: map-update-breakpoints($map, $global-bps);
      }
      $bps: map-keys($map);
      $bp-ie8: get-ie8-bp($bps, $condition);

      @for $i from 1 through length($bps) {
        $bp: nth($bps, $i);
        $layout: map-get($map, $bp);

        @if type-of($layout) == 'list' {
          $columns: $layout;
          @if not $order { $order: (1, 2); }
        } @else if type-of($layout) == 'map' {
          $columns: map-keys($layout);
          $order: map-values(map-get($map, $bp));
        }

        @if $bp == 'default' or $bp == null {
          @include make-liquid-2($columns, $order, $child, $gutter, false);
        } @else {
          @include bp($condition $media-type $bp) {
            @include make-liquid-2($columns, $order, $child, $gutter, false);
          }
        }

        // generate ie8-only style
        @if $bp == $bp-ie8 {
          @include make-liquid-2($columns, $order, $child, $gutter, true);
        }
      }
    }
    
  // using list
  // (200px null)
  } @else {
    @if not $order { $order: (1, 2); }
    @include make-liquid-2($columns, $order, $child, $gutter, false);

    @if $ie8 {
      @include make-liquid-2($columns, $order, $child, $gutter, true);
    }
  }

}

@mixin make-liquid-2($columns, $order, $child, $gutter, $ie8) {  

  $child-list: ();
  $children-ie8: '';
  @if type-of($child) == 'string' {

    $child-list: ('#{$child}:nth-child(1)', '#{$child}:nth-child(2)');
    $children-ie8: '.lt-ie9 #{&} > #{$child}';
  } @else if type-of($child) == 'list' and length($child) == 2 {

    $child-list: $child;
    $children-ie8: '.lt-ie9 #{&} > #{nth($child, 1)}, .lt-ie9 #{&} > #{nth($child, 2)}'
  } 

  $positions: get-positions($order);
  $new-columns: ();
  @for $i from 1 through 2 {
   $new-columns: append($new-columns, nth($columns, nth($positions, $i)));
  } 

  // flexible-column is on the left
  @if nth($columns, nth($positions, 1)) == null or nth($columns, nth($positions, 1)) == 'auto' {

    @if $ie8 {
      .lt-ie9 & {
        padding: 0 (nth($new-columns, 2) + $gutter) 0 0;
        box-sizing: border-box;
      }
    }

    @for $i from 1 through length($new-columns) {
      $selector: if($ie8, 
        '.lt-ie9 & > .ie8-#{nth($positions, $i)}', 
        '> ' nth($child-list, nth($positions, $i))
        );

      #{$selector} {
        @if $i == 1 {
          float: left;

          @if $ie8 {
            width: 100%;
          } @else {
            width: calc(100% - #{(nth($new-columns, 2) + $gutter)});
          }
        } @else {
          float: right;
          width: nth($new-columns, 2);

          @if $ie8 {
            margin: 0 (- nth($new-columns, 2)) 0 0;
          }
        }
      }
    }

  // flexible-column is on the right
  } @else {

    @if $ie8 {
      .lt-ie9 & {
        padding: 0 0 0 (nth($new-columns, 1) + $gutter);
        box-sizing: border-box;
      }
    }

    @for $i from 1 through length($new-columns) {
      $selector: if($ie8, 
        '.lt-ie9 & > .ie8-#{nth($positions, $i)}', 
        '> ' nth($child-list, nth($positions, $i))
        );

      #{$selector} {
        @if $i == 1 {
          float: left;
          width: nth($new-columns, 1);

          @if $ie8 {
            margin: 0 0 0 (- nth($new-columns, 1));
          }

        } @else {
          float: right;

          @if $ie8 {
            width: 100%;
          } @else {
            width: calc(100% - #{(nth($new-columns, 1) + $gutter)});
          }
        }
      }
    }
  }

}

// == is-liquid-list ==
@function is-liquid-list($key) {
  $is-liquid-list: ();

  @each $item in $key {
    $is-liquid-list: if(
      type-of($item) != 'number' and $item != null,
      append($is-liquid-list, false),
      append($is-liquid-list, true) );
  }

  @return if(index($is-liquid-list, false), false, true);
}
