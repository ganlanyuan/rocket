// *** liquid-2 *** //
@mixin liquid-2($key){
  $map: false;
  $columns: false;
  $order: false; // for flexbox
  $position-number: false; // for non-flexbox

  $global-bps: false;
  $bps: ();
  $condition: args-get($key, ('min' 'max'), 'min');
  $media-type: args-get($key, $ro-media-type);

  $use-flex: args-get($key, 'use-flex');
  $non-flex: if($use-flex, '.lt-ie10 &', '&');

  $child: args-get-next($key, 'child', 'div');
  $gutter: args-get-next($key, 'gutter', map-get($ro-layout, 'gutter'));
  $initialized: false;

  // get map
  @if type-of($key) == 'map' {
    $map: $key;
  } @else if type-of($key) == 'list' {
    @if not is-nested-list($key) and is-liquid-list($key) {
      $columns: $key;
    } @else {
      @each $item in $key {
        @if type-of($item) == 'list' and not is-nested-list($item) {
          @if is-liquid-list($item) {
            $columns: $item;
          } @else {
            $child: $item;
          }
        } @else if type-of($item) == 'map' {
          @if not $map {
            $map: $item;
          } @else if not $global-bps {
            $global-bps: $item;
          }
        }
      }
    }
  }
  
  @if $map {
    @if is-simple-map($map) {
      $columns: map-keys($map);
      $order: map-values($map);
      $position-number: get-position-number($order);

      @include make-liquid-2($columns, $order, $position-number, $child, $gutter, $initialized, $use-flex, $non-flex);
    } @else {
      // has breakpoint
      @if $global-bps {
        $map: map-update-breakpoints($map, $global-bps);
      }
      $bps: map-keys($map);

      @for $i from 1 through length($bps) {
        $bp: nth($bps, $i);
        $layout: map-get($map, $bp);

        @if $i != 1 {
          $initialized: true;
        }

        @if type-of($layout) == 'list' {
          $columns: $layout;
          @if not $position-number { $position-number: (1, 2); }
        } @else if type-of($layout) == 'map' {
          $columns: map-keys($layout);
          $order: map-values(map-get($map, $bp));
          $position-number: get-position-number($order);
        }

        @if $bp == null  {
          @include make-liquid-2($columns, $order, $position-number, $child, $gutter, $initialized, $use-flex, $non-flex);
        } @else {
          @include bp($condition $media-type nth($bps, $i)) {
            @include make-liquid-2($columns, $order, $position-number, $child, $gutter, $initialized, $use-flex, $non-flex);
          }
        }
      }
    }
    
  } @else {
    @if not $position-number { $position-number: (1, 2); }

    @include make-liquid-2($columns, $order, $position-number, $child, $gutter, $initialized, $use-flex, $non-flex);
  }

}

@mixin make-liquid-2($columns, $order, $position-number, $child, $gutter, $initialized, $use-flex, $non-flex) {  

  $child-list: if(
    type-of($child) == 'list' and length($child) == 2,
    $child, 
    ("> #{$child}:nth-child(1)", "> #{$child}:nth-child(2)") );
  $children: if(
    type-of($child) == 'list' and length($child) == 2,
    ("> #{nth($child, 1)}, > #{nth($child, 2)}"), 
    "> #{$child}" );

  // flexbox
  @if $use-flex {
    @if not $initialized {
      @include ro-flexbox;
      @include ro-justify-content(space-between);
    }

    @for $i from 1 through length($columns) {
      // set width
      $thisWidth: nth($columns, $i);
      $asides: list-remove($columns, null);

      #{nth($child-list, $i)} {
        width: if(
          $thisWidth == null,
          ( calc(100% - #{nth($asides, 1)} - #{$gutter}) ), 
          $thisWidth );
        @if $order { @include ro-order(nth($order, $i)); }
      }
    }
  }

  // non-flexbox
  #{$non-flex} {
    $sidebar-position: if(
      nth($columns, nth($position-number, 1)) == null, 
      right,
      left );
    $sidebar-order: if(
      nth($columns, 1) == null,
      2,
      1 );
    $main-order: if(
      nth($columns, 1) == null,
      1,
      2 );
    $child-reset: if(
      type-of($child) == 'list' and length($child) == 2,
      $children,
      "> #{$child}:nth-child(n)" );

    @if $columns {
      @if not $initialized { @include clearfix(); }
      padding: 0;
      padding-#{$sidebar-position}: nth($columns, $sidebar-order);

      @if $initialized { 
        #{$child-reset} { 
          margin: 0;
          padding: 0; 
        } 
      }

      #{$children} {
        @if not $initialized { box-sizing: border-box; }
        float: if(
          nth($columns, 1) == null, 
          opposite($sidebar-position),
          $sidebar-position );
      }
      #{nth($child-list, $main-order)} {
        width: 100%;
        padding-#{$sidebar-position}: $gutter;
      } 
      #{nth($child-list, $sidebar-order)} {
        width: nth($columns, $sidebar-order);
        margin-#{$sidebar-position}: - nth($columns, $sidebar-order);
      }
    }
  }

}

@function get-position-number($order) {
  $nums: list-increase(list-remove-duplicates($order)); // reordered values
  $position-number: ();

  @each $num in $nums {
    @for $i from 1 through length($order) {
      @if nth($order, $i) == $num {
        $position-number: append($position-number, $i);
      }
    }
  }

  @return $position-number;
}

// == is-liquid-list ==
@function is-liquid-list($key) {
  $is-liquid-list: ();

  @each $item in $key {
    $is-liquid-list: if(
      type-of($item) != 'number' and $item != null,
      append($is-liquid-list, false),
      append($is-liquid-list, true) );
  }

  @return if(
    index($is-liquid-list, false),
    false,
    true );
}
