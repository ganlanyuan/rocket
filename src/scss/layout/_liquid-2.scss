// *** liquid-2 *** //
@mixin liquid-2($key){
  $maps: args-get-maps($key);
  $map: false;
  $columns: false;
  $order: false; 
  $child: args-get-next($key, 'child', 'div');
  $gutter: args-get-next($key, 'gutter', map-get($ro-layout, 'gutter'));

  $global-bps: false;
  $bps: ();
  $condition: args-get($key, ('min' 'max'), 'min');
  $media-type: args-get($key, $ro-media-type);

  $initialized: false;
  $non-calc: '.lt-ie9 &';

  // get map
  @if length($maps) >= 1 {
    $map: nth($maps, 1);
  }
  @if length($maps) >= 2 {
    $global-bps: nth($maps, 2);
  }

  @if length($maps) == 0 and type-of($key) == 'list' {
    @if not is-nested-list($key) {
      @if is-liquid-list($key) {
        $columns: $key;
      } @else {
        $child: $key;
      }
    } @else {
      @each $item in $key {
        @if type-of($item) == 'list' and not is-nested-list($item) {
          @if is-liquid-list($item) {
            $columns: $item;
          } @else {
            $child: $item;
          }
        }
      }
    }
  }
  
  @if $map {
    @if is-simple-map($map) {
      $columns: map-keys($map);
      $order: map-values($map);

      @include make-liquid-2($columns, $order, $child, $gutter, $initialized, $non-calc);
    } @else {
      // has breakpoint
      @if $global-bps {
        $map: map-update-breakpoints($map, $global-bps);
      }
      $bps: map-keys($map);

      @for $i from 1 through length($bps) {
        $bp: nth($bps, $i);
        $layout: map-get($map, $bp);

        @if $i != 1 {
          $initialized: true;
        }

        @if type-of($layout) == 'list' {
          $columns: $layout;
          @if not $order { $order: (1, 2); }
        } @else if type-of($layout) == 'map' {
          $columns: map-keys($layout);
          $order: map-values(map-get($map, $bp));
        }

        @if $bp == 'default' or $bp == null {
          @include make-liquid-2($columns, $order, $child, $gutter, $initialized, $non-calc);
        } @else {
          @include bp($condition $media-type $bp) {
            @include make-liquid-2($columns, $order, $child, $gutter, $initialized, $non-calc);
          }
        }
      }
    }
    
  } @else {
    @if not $order { $order: (1, 2); }

    @include make-liquid-2($columns, $order, $child, $gutter, $initialized, $non-calc);
  }

}

@mixin make-liquid-2($columns, $order, $child, $gutter, $initialized, $non-calc) {  

  $child-list: if(
    type-of($child) == 'list' and length($child) == 2,
    $child, 
    ("> #{$child}:nth-child(1)", "> #{$child}:nth-child(2)") );
  $children: if(
    type-of($child) == 'list' and length($child) == 2,
    ("> #{nth($child, 1)}, > #{nth($child, 2)}"), 
    "> #{$child}" );

  $reverse: nth($order, 1) > nth($order, 2);
  $first-column-auto: nth($columns, 1) == null;
  $main-order: if($first-column-auto, 1, 2);
  $sidebar-order: if($main-order == 1, 2, 1);

  $sidebar-direction: left;
  @if $reverse {
    $sidebar-direction: if($first-column-auto, left, right);
  } @else {
    $sidebar-direction: if($first-column-auto, right, left);
  }

  @if not $initialized { 
    @include clearfix(); 
  }

  @for $i from 1 through length($columns) {
    // set width
    $thisWidth: nth($columns, $i);
    $aside: nth(list-remove($columns, null), 1);

    #{nth($child-list, $i)} {
      @if $reverse {
        float: if($i == 1, right, left);
      } @else {
        float: if($i == 1, left, right);
      }

      @if $thisWidth == null {
        width: 100%;
        width: calc(100% - #{$aside} - #{$gutter});
      } @else {
        width: $thisWidth;
      }

    }
  }

  // non-calc
  #{$non-calc} {
    $full-sidebar: nth($columns, $sidebar-order) + $gutter;

    @if not $initialized {
      #{$children} { box-sizing: border-box; }
    }

    @if $columns {
      @if $sidebar-direction == left {
        padding: 0 0 0 #{$full-sidebar};
        #{nth($child-list, $sidebar-order)} {
          margin: 0 0 0 #{- $full-sidebar};
        }
      } @else {
        padding: 0 #{$full-sidebar} 0 0;
        #{nth($child-list, $sidebar-order)} {
          margin: 0 #{- $full-sidebar} 0 0;
        }
      }
    }
  }

}

// == is-liquid-list ==
@function is-liquid-list($key) {
  $is-liquid-list: ();

  @each $item in $key {
    $is-liquid-list: if(
      type-of($item) != 'number' and $item != null,
      append($is-liquid-list, false),
      append($is-liquid-list, true) );
  }

  @return if(index($is-liquid-list, false), false, true);
}
