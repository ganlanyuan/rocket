/* # Functions ---------- */
/* opposite [function] */
[data-module="Functions"] [data-test="opposite [function]"] .assert-equal {
  -result: PASS;
  -description: "return opposite direction.";
}
[data-module="Functions"] [data-test="opposite [function]"] .assert-equal {
  -result: PASS;
  -description: "return opposite direction.";
}
[data-module="Functions"] [data-test="opposite [function]"] .assert-equal {
  -result: PASS;
  -description: "return opposite direction.";
}
[data-module="Functions"] [data-test="opposite [function]"] .assert-equal {
  -result: PASS;
  -description: "return opposite direction.";
}

/* # Functions ---------- */
/* strip-unit [function] */
[data-module="Functions"] [data-test="strip-unit [function]"] .assert-equal {
  -result: PASS;
  -description: "return em length";
}

/* # trigonometric ---------- */
/* sqrt [function] */
[data-module="trigonometric"] [data-test="sqrt [function]"] .assert-equal {
  -result: PASS;
  -description: "return a square root of 9.";
}
[data-module="trigonometric"] [data-test="sqrt [function]"] .assert-equal {
  -result: PASS;
  -description: "return a square root of 0.";
}
[data-module="trigonometric"] [data-test="sqrt [function]"] .assert-equal {
  -result: PASS;
  -description: "return false when value is negative.";
}

/* # Functions ---------- */
/* to-length [function] */
[data-module="Functions"] [data-test="to-length [function]"] .assert-equal {
  -result: PASS;
  -description: "return length";
}
[data-module="Functions"] [data-test="to-length [function]"] .assert-equal {
  -result: PASS;
  -description: "return length";
}

/* # Functions ---------- */
/* to-number [function] */
[data-module="Functions"] [data-test="to-number [function]"] .assert-equal {
  -result: PASS;
  -description: "return number";
}
[data-module="Functions"] [data-test="to-number [function]"] .assert-equal {
  -result: PASS;
  -description: "return number";
}

/* # Functions ---------- */
/* to-string [function] */
[data-module="Functions"] [data-test="to-string [function]"] .assert-equal {
  -result: PASS;
  -description: "return a string";
}
[data-module="Functions"] [data-test="to-string [function]"] .assert-equal {
  -result: PASS;
  -description: "return a string";
}
[data-module="Functions"] [data-test="to-string [function]"] .assert-equal {
  -result: PASS;
  -description: "return a string";
}
[data-module="Functions"] [data-test="to-string [function]"] .assert-equal {
  -result: PASS;
  -description: "return a string";
}

/* # Functions ---------- */
/* pxto [function] */
[data-module="Functions"] [data-test="pxto [function]"] .assert-equal {
  -result: PASS;
  -description: "return em length";
}
[data-module="Functions"] [data-test="pxto [function]"] .assert-equal {
  -result: PASS;
  -description: "return rem length";
}

/* # Functions ---------- */
/* em [function] */
[data-module="Functions"] [data-test="em [function]"] .assert-equal {
  -result: PASS;
  -description: "return em length";
}

/* # Functions ---------- */
/* rem [function] */
[data-module="Functions"] [data-test="rem [function]"] .assert-equal {
  -result: PASS;
  -description: "return rem length";
}

/* # String ---------- */
/* string-slice-from [function] */
[data-module="String"] [data-test="string-slice-from [function]"] .assert-equal {
  -result: PASS;
  -description: 'get string slice after "-".';
}
[data-module="String"] [data-test="string-slice-from [function]"] .assert-equal {
  -result: PASS;
  -description: 'get string slice before ".".';
}

/* # Functions ---------- */
/* list-remove-duplicates [function] */
[data-module="Functions"] [data-test="list-remove-duplicates [function]"] .assert-equal {
  -result: PASS;
  -description: "remove duplicate list items.";
}

/* # Functions ---------- */
/* list-increase [function] */
[data-module="Functions"] [data-test="list-increase [function]"] .assert-equal {
  -result: PASS;
  -description: "reorder number list: increase";
}

/* # Functions ---------- */
/* list-decrease [function] */
[data-module="Functions"] [data-test="list-decrease [function]"] .assert-equal {
  -result: PASS;
  -description: "reorder number list: decrease";
}

/* # List ---------- */
/* is-nested-list [function] */
[data-module="List"] [data-test="is-nested-list [function]"] .assert-false {
  -result: PASS;
  -description: "This is a simple list.";
}
[data-module="List"] [data-test="is-nested-list [function]"] .assert-true {
  -result: PASS;
  -description: "This list contains nested list.";
}
[data-module="List"] [data-test="is-nested-list [function]"] .assert-true {
  -result: PASS;
  -description: "This list contains map.";
}

/* # List ---------- */
/* is-number-list [function] */
[data-module="List"] [data-test="is-number-list [function]"] .assert-true {
  -result: PASS;
  -description: "This is a number list.";
}
[data-module="List"] [data-test="is-number-list [function]"] .assert-true {
  -result: PASS;
  -description: "This list is a number list.";
}
[data-module="List"] [data-test="is-number-list [function]"] .assert-false {
  -result: PASS;
  -description: "This list contains map.";
}
[data-module="List"] [data-test="is-number-list [function]"] .assert-false {
  -result: PASS;
  -description: "This list contains string.";
}

/* # Functions ---------- */
/* map-update-breakpoints [function] */
[data-module="Functions"] [data-test="map-update-breakpoints [function]"] .assert-equal {
  -result: PASS;
  -description: "update map";
}

/* # map ---------- */
/* is-simple-map [function] */
[data-module="map"] [data-test="is-simple-map [function]"] .assert-true {
  -result: PASS;
  -description: "This is a simple map.";
}
[data-module="map"] [data-test="is-simple-map [function]"] .assert-false {
  -result: PASS;
  -description: "This map containes lists.";
}
[data-module="map"] [data-test="is-simple-map [function]"] .assert-false {
  -result: PASS;
  -description: "This map contains nested map.";
}

/* # Arguments ---------- */
/* args-get [function] */
[data-module="Arguments"] [data-test="args-get [function]"] .assert-true {
  -result: PASS;
  -description: "get a value from arguments.";
}
[data-module="Arguments"] [data-test="args-get [function]"] .assert-false {
  -result: PASS;
  -description: "get a value from arguments.";
}
[data-module="Arguments"] [data-test="args-get [function]"] .assert-equal {
  -result: PASS;
  -description: "get a value from arguments.";
}

/* # Arguments ---------- */
/* args-get-type [function] */
[data-module="Arguments"] [data-test="args-get-type [function]"] .assert-equal {
  -result: PASS;
  -description: "get a map.";
}
[data-module="Arguments"] [data-test="args-get-type [function]"] .assert-equal {
  -result: PASS;
  -description: "get a color.";
}
[data-module="Arguments"] [data-test="args-get-type [function]"] .assert-equal {
  -result: PASS;
  -description: "get a color.";
}
[data-module="Arguments"] [data-test="args-get-type [function]"] .assert-equal {
  -result: PASS;
  -description: "get a string.";
}

/* # Arguments ---------- */
/* args-get-prev [function] */
[data-module="Arguments"] [data-test="args-get-prev [function]"] .assert-equal {
  -result: PASS;
  -description: 'get prev item of "by".';
}
[data-module="Arguments"] [data-test="args-get-prev [function]"] .assert-equal {
  -result: PASS;
  -description: "\"child\" doesn't exists.";
}
[data-module="Arguments"] [data-test="args-get-prev [function]"] .assert-equal {
  -result: PASS;
  -description: '"map" is the first item in "$args4".';
}
[data-module="Arguments"] [data-test="args-get-prev [function]"] .assert-equal {
  -result: PASS;
  -description: "argment is not a list.";
}

/* # Arguments ---------- */
/* args-get-next [function] */
[data-module="Arguments"] [data-test="args-get-next [function]"] .assert-equal {
  -result: PASS;
  -description: "get a map.";
}
[data-module="Arguments"] [data-test="args-get-next [function]"] .assert-equal {
  -result: PASS;
  -description: "get a gutter.";
}
[data-module="Arguments"] [data-test="args-get-next [function]"] .assert-equal {
  -result: PASS;
  -description: "\"child\" doesn't exists.";
}
[data-module="Arguments"] [data-test="args-get-next [function]"] .assert-equal {
  -result: PASS;
  -description: 'Nothing after "gutter".';
}
[data-module="Arguments"] [data-test="args-get-next [function]"] .assert-equal {
  -result: PASS;
  -description: "argment is not a list.";
}

/* # Arguments ---------- */
/* args-get-maps [function] */
[data-module="Arguments"] [data-test="args-get-maps [function]"] .assert-equal {
  -result: PASS;
  -description: "get a map.";
}
[data-module="Arguments"] [data-test="args-get-maps [function]"] .assert-equal {
  -result: PASS;
  -description: "get the second map.";
}
[data-module="Arguments"] [data-test="args-get-maps [function]"] .assert-equal {
  -result: PASS;
  -description: "map doesn't found.";
}

/* # List ---------- */
/* get-slider-id [function] */
[data-module="List"] [data-test="get-slider-id [function]"] .assert-equal {
  -result: PASS;
  -description: "get the last class.";
}
[data-module="List"] [data-test="get-slider-id [function]"] .assert-equal {
  -result: PASS;
  -description: "get the last id.";
}
[data-module="List"] [data-test="get-slider-id [function]"] .assert-equal {
  -result: PASS;
  -description: "get the entire selector when there is no class or id.";
}

/* # trigonometric ---------- */
/* get-TRBL [function] */
[data-module="trigonometric"] [data-test="get-TRBL [function]"] .assert-equal {
  -result: PASS;
  -description: "return a TRBL value.";
}
[data-module="trigonometric"] [data-test="get-TRBL [function]"] .assert-equal {
  -result: PASS;
  -description: "return a TRBL value.";
}

/* # Colors ---------- */
/* contrast [function] */
[data-module="Colors"] [data-test="contrast [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns the contrast color";
}
[data-module="Colors"] [data-test="contrast [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns the contrast color";
}
[data-module="Colors"] [data-test="contrast [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns the contrast color";
}
[data-module="Colors"] [data-test="contrast [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns the contrast color";
}

/* # Colors ---------- */
/* analogous [function] */
[data-module="Colors"] [data-test="analogous [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns the analogous color";
}
[data-module="Colors"] [data-test="analogous [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns the analogous color";
}

/* # Colors ---------- */
/* adjacent [function] */
[data-module="Colors"] [data-test="adjacent [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns the adjacent color";
}
[data-module="Colors"] [data-test="adjacent [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns the adjacent color";
}

/* # Colors ---------- */
/* complementary [function] */
[data-module="Colors"] [data-test="complementary [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns the complementary color";
}

/* # Colors ---------- */
/* split-complementary [function] */
[data-module="Colors"] [data-test="split-complementary [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns the split-complementary color";
}
[data-module="Colors"] [data-test="split-complementary [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns the split-complementary color";
}

/* # Colors ---------- */
/* triad [function] */
[data-module="Colors"] [data-test="triad [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns the triad color";
}
[data-module="Colors"] [data-test="triad [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns the triad color";
}

/* # Colors ---------- */
/* rectangle [function] */
[data-module="Colors"] [data-test="rectangle [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns the rectangle color";
}
[data-module="Colors"] [data-test="rectangle [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns the rectangle color";
}
[data-module="Colors"] [data-test="rectangle [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns the rectangle color";
}

/* # Colors ---------- */
/* square [function] */
[data-module="Colors"] [data-test="square [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns the square color";
}
[data-module="Colors"] [data-test="square [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns the square color";
}
[data-module="Colors"] [data-test="square [function]"] .assert-equal {
  -result: PASS;
  -description: "Returns the square color";
}

/* # Functions ---------- */
/* grid-get-columns [function] */
[data-module="Functions"] [data-test="grid-get-columns [function]"] .assert-equal {
  -result: PASS;
  -description: "return a number";
}
[data-module="Functions"] [data-test="grid-get-columns [function]"] .assert-equal {
  -result: PASS;
  -description: "return a list";
}
[data-module="Functions"] [data-test="grid-get-columns [function]"] .assert-equal {
  -result: PASS;
  -description: "return a list";
}

/* grid-get-orders [function] */
[data-module="Functions"] [data-test="grid-get-orders [function]"] .assert-equal {
  -result: PASS;
  -description: "return a list";
}
[data-module="Functions"] [data-test="grid-get-orders [function]"] .assert-equal {
  -result: PASS;
  -description: "return a list";
}
[data-module="Functions"] [data-test="grid-get-orders [function]"] .assert-equal {
  -result: PASS;
  -description: "return a list";
}

/* # SUMMARY ---------- */
/* 34 Tests: */
/*  - 34 Passed */
/*  - 0 Failed */
/* -------------------- */

/*# sourceMappingURL=tests.css.map */
