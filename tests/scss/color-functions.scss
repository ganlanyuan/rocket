@import 'demo-base';
@import "../../src/scss/color/palette"; 

$original: #d92626;

// *** color: contrast *** //
$contrast: #5173a3, #bbf8e6, #cb7d26;

// color-box
.color-box {
  float: left;
  text-align: center;
  padding: 3em 2em;
  font-size: 14px;
  color: #fff;
  text-transform: capitalize;
  box-sizing: -webkit-border-box;
  box-sizing: -moz-border-box;
  box-sizing: border-box;
}
.color-pattern {
  max-width: 300px;
  padding: 10px 0px;
  border-right: .33em;
  overflow: hidden;
  img { max-width: 100%; }
}
.color-box-original { 
  background-color: #d92626; 
  color: #fff;
}

.two > div { width: 50%; }
.three > div { width: 33.333333333%; }
.four > div { width: 25%; }

@for $i from 1 through 3 {
  .color-box-contrast-#{$i} { 
    background-color: nth($contrast, $i); 
    color: contrast( ('color': nth($contrast, $i), 'light': #eee, 'dark': #333) );
  }
}


// *** color: adjacent *** //
$options: (
  'adjacent': ( ('count': -1), ('count': 1) ),
  'complementary': ( 1 ),
  'split-complementary': ( ('count': 1), ('count': 2) ),
  'triad': ( ('count': 1, 'saturation': 10%), ('count': 2) ),
  'rectangle': ( ('count': 1), ('count': 2), ('count': 3) ),
  'square': ( ('count': 1), ('count': 2), ('count': 3) ),
);

$data: false;
$color: #fff;
@each $name, $option in $options {
  @for $i from 1 through length($option) {
    $data: if(
      length($option) >= 1 and type-of(nth($option, $i)) == 'map', 
      map-merge(nth($option, $i), ('style': $name, 'color': $original)), 
      ('style': $name, 'color': $original) 
      );
    $color: palette( $data );
    .color-box-#{$name}-#{$i} { 
      background-color: $color; 
      color: contrast( ('color': $color) );
    }
  }
}
.example-adjacent { @include clearfix(); }
// .color-box-adjacent-2 {
//   $color-adjacent: adjacent( ('color': $original, 'scale': 1) );
//   background-color: $color-adjacent; 
//   color: contrast( ('color': $color-adjacent) );
// }