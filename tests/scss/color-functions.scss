@import 'demo-base';
@import "../../src/scss/color/color"; 

// color-box
.color-box {
  float: left;
  text-align: center;
  padding: 3em 2em;
  font-size: 14px;
  color: #fff;
  text-transform: capitalize;
  box-sizing: -webkit-border-box;
  box-sizing: -moz-border-box;
  box-sizing: border-box;
}
.color-pattern {
  max-width: 300px;
  padding: 10px 0px;
  border-right: .33em;
  overflow: hidden;
  img { max-width: 100%; }
}
.color-box-original { 
  background-color: #d92626; 
  color: #fff;
}

.two > div { width: 50%; }
.three > div { width: 33.333333333%; }
.four > div { width: 25%; }
.example-adjacent { @include clearfix(); }

// contrast & analogous
$contrast: #5173a3, #bbf8e6, #cb7d26;
@for $i from 1 through 3 {
  .color-box-contrast-#{$i} { 
    background-color: nth($contrast, $i); 
    color: contrast(nth($contrast, $i) 'light' #eee 'dark' #333);
  }
  .color-box-analogous-#{$i} { 
    background-color: nth($contrast, $i); 
    color: contrast(nth($contrast, $i) 'light' #eee 'dark' #333);
    cursor: pointer;
    &:hover { background-color: analogous(nth($contrast, $i) 10%); }
  }
}


// other color functions
$options: (
  'adjacent': ( (-1), (1) ),
  'complementary': ( 1 ),
  'split-complementary': ( (1), (2) ),
  'triad': ( (1 'saturation' 10%), (2) ),
  'rectangle': ( (1), (2), (3) ),
  'square': ( (1), (2), (3) ),
);

$data: false;
$color: #fff;
$original: #d92626;
@each $name, $option in $options {
  @for $i from 1 through length($option) {
    $data: join(nth($option, $i), ($name $original));
    $color: palette($data);
    .color-box-#{$name}-#{$i} { 
      background-color: $color; 
      color: contrast($color);
    }
  }
}