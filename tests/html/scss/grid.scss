@import 'demo-base';
@import "../../../src/scss/addons/breakpoint"; 
@import "../../../src/scss/layout/grid"; 

@function var-list-to-string($value) {
    $return: '(';
    @each $item in $value {
      @if type-of($item) == 'list' {
        $return: $return + var-list-to-string($item);
      } @else if type-of($item) == 'map' {
        $return: $return + var-map-to-string($item);
      } @else {
        $return: $return + ' ' + to-string($item) + ' ';
      }
    }
    $return: $return + ')';

  @return $return;
}

@function var-map-to-string($value) {
    $keys: map-keys($value);
    $vals: map-values($value);
    
    $return: '(';
    @for $i from 1 through length($keys) {
      $return: $return + to-string(nth($keys, $i)) + ' : ';
      $val: nth($vals, $i);
      @if type-of($val) == 'list' {
        @if is-nested-list($val) {
          $return: $return + var-list-to-string($val);
        } @else {
          $return: $return + to-string($val);
        }
      } @else if type-of($val) == 'map' {
        $return: $return + var-map-to-string($val);
      } @else {
        $return: $return + ' ' + to-string($val) + ' ';
      }
      
      @if $i != length($keys) {
        $return: $return + ', ';
      }
    }
    $return: $return + ')';
  
  @return $return;
}

@function var-to-string($value) {
  $return: '';
  @if type-of($value) == 'list' {
    $return: var-list-to-string($value);
  } @else if type-of($value) == 'map' {
    $return: var-map-to-string($value);
  } @else {
    $return: to-string($value);
  }
  
  @return $return;
}

[id*='grid-'] {
  height: 0;
  overflow: hidden;
  &:before {
    text-align: center;
    display: block;
    margin-bottom: 5px;
  }
  .cell:before { 
    font-family: "Helvetica Neue", Helvetica, sans-serif;
    font-size: 60px;
    font-weight: 100;
    color: hsla(0, 0%, 100%, 1);
  }
  @for $i from 1 through 6 {
    > div > *:nth-child(#{$i}) .cell:before { content: '#{$i}'; }
  }
}
.cell { margin-bottom: 20px; }
%grid-show {
  height: auto;
  margin-bottom: 50px;
}

$grid-simple-list: (3 4);
$grid-simple-list-child: (3 4) child '.child';
$grid-simple-list-gutter1: (3 4 : 2 1) gutter 5%;
$grid-simple-list-gutter2: (3 4) gutter 5rem;
$grid-simple-list-direction: (3 4) RTL;
$grid-nested-list: (3 4) 7;
$grid-map: ( (3 4 7 : 0 2 1 ) 3 );
$grid-breakpoint-simple-list: ( 600px: 5 7 );
$grid-breakpoint-outside-simple-list: (5 7);
$grid-breakpoint-nested-list: ( 600px: (3 4) (2 5) 3 );
$grid-breakpoint-map: ( 600px: (3 4 : 2 1) (2 5) 3 );
$grid-breakpoint-default: ( 'default': 3 4, 900px: 2 7 );
$grid-breakpoint-complex-list: ( default: (3 4) (2 5) 3, 600px: (3 4 2) (5 3), 900px: (5 2: 2 1) 3 (1 1 : 2 1) );

#grid-simple-list {
  @extend %grid-show;
  &:before { content: '#{var-to-string($grid-simple-list)}'; }
  > div { @include grid($grid-simple-list); }
}
#grid-simple-list-child {
  @extend %grid-show;
  &:before { content: '#{var-to-string($grid-simple-list-child)}'; }
  > div { @include grid($grid-simple-list-child); }
}
#grid-simple-list-direction {
  @extend %grid-show;
  &:before { content: '#{var-to-string($grid-simple-list-direction)}'; }
  > div { @include grid($grid-simple-list-direction); }
}
#grid-simple-list-gutter1 {
  @extend %grid-show;
  &:before { content: '#{var-to-string($grid-simple-list-gutter1)}'; }
  > div { @include grid($grid-simple-list-gutter1); }
}
#grid-simple-list-gutter2 {
  @extend %grid-show;
  &:before { content: '#{var-to-string($grid-simple-list-gutter2)}'; }
  > div { @include grid($grid-simple-list-gutter2); }
}
#grid-nested-list {
  @extend %grid-show;
  &:before { content: '#{var-to-string($grid-nested-list)}'; }
  > div { @include grid($grid-nested-list); }
}
#grid-map {
  @extend %grid-show;
  &:before { content: '#{var-to-string($grid-map)}'; }
  > div { @include grid($grid-map); }
}
#grid-breakpoint-simple-list {
  @extend %grid-show;
  &:before { content: '#{var-to-string($grid-breakpoint-simple-list)}'; }
  > div { @include grid($grid-breakpoint-simple-list); }
}
#grid-breakpoint-outside-simple-list {
  @extend %grid-show;
  &:before { content: '600px: #{var-to-string($grid-breakpoint-outside-simple-list)}'; }
  @media screen and (min-width: 600px) {
    > div { @include grid($grid-breakpoint-simple-list); }
  }
}
#grid-breakpoint-nested-list {
  @extend %grid-show;
  &:before { content: '#{var-to-string($grid-breakpoint-nested-list)}'; }
  > div { @include grid($grid-breakpoint-nested-list); }
}
#grid-breakpoint-map {
  @extend %grid-show;
  &:before { content: '#{var-to-string($grid-breakpoint-map)}'; }
  > div { @include grid($grid-breakpoint-map); }
}
#grid-breakpoint-default {
  @extend %grid-show;
  &:before { content: '#{var-to-string($grid-breakpoint-default)}'; }
  > div { @include grid($grid-breakpoint-default); }
}
#grid-breakpoint-complex-list {
  @extend %grid-show;
  &:before { content: '#{var-to-string($grid-breakpoint-complex-list)}'; }
  > div { @include grid($grid-breakpoint-complex-list); }
}




