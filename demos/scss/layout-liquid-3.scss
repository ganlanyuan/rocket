@import 'demo-base';

// *** layout: liquid-2 *** //

@mixin liquid-3($key:false){
  $mode: ro-get($key, ('isolate' 'fluid'), 'fluid');
  $child: ro-get-next($key, 'child', 'div');
  $gutter: ro-get-next($key, 'gutter', map-get($ro-layout, 'gutter'));
  $keep: ro-get($key, 'keep', false);

  // get map
  $map: false;
  @if type-of($key) == 'map' {
    $map: $key;
  } @else {
    $map: ro-get-type($key, 'map');
  }
  
  @if $map {
    $keys: map-keys($map);
    $values: map-values($map);
    
    // get order
    $order: ();
    $u-values: list-ascend(remove-dup($values)); // reordered values
    @each $u-val in $u-values {
      @for $i from 1 through length($values) {
        @if nth($values, $i) == $u-val {
          $order: append($order, $i);
        }
      }
    }
  }
  
  // *** output *** //
  @if not $keep {
    @if $map {
      @include flexbox;
      @include flex-wrap(wrap);
      @include align-content(stretch);
    }
  }

  @if $map {
    > #{$child} {
      @include align-content(stretch);
      @for $i from 1 through length($keys) {
        // set width
        $thisWidth: nth($keys, $i);
        &:nth-child(#{$i}) {
          @if $thisWidth == null {
            @include flex(1 1);
          } @else {
            @include flex-basis($thisWidth);
            // fix IE10 & 11: horizental padding break layout
            .flexboxtweener & {
              max-width: $thisWidth;
            }
          }

          // set order
          @if nth($values, $i) != 0 {
            @include order(nth($values, $i));
          }
        }
      }

      // set margin to middle column
      &:nth-child(#{nth($order, 2)}) {
        margin-left: $gutter;
        margin-right: $gutter;
      }
    }
  }

  // no-flexbox
  .no-flexbox.no-flexboxtweener & {
    // get main-layout
    $main-layout: null;
    @if nth($keys, nth($order, 1)) == null {
      $main-layout: 'left';
    } @else if nth($keys, nth($order, 2)) == null {
      $main-layout: 'center';
    } @else if nth($keys, nth($order, 3)) == null {
      $main-layout: 'right';
    }

    // check gutter 
    @if unit($gutter) == '%' { $gutter: 0; }
    // get left, right and full width 
    $left-width: 0;
    $right-width: 0;
    $full-width: 0;
    $new-keys: ();
    $new-order: ();
    @for $i from 1 through length($keys) {
      @if nth($keys, $i) == null {
        $new-keys: reject($keys, null);
        $new-order: reject($order, $i);
      } @else {
        @if unitless(nth($keys, $i)) {
          $keys: set-nth($keys, $i, (nth($keys, $i) * 1px));
        }
        $full-width: ($full-width + nth($keys, $i) + $gutter);
      }
    }
    @if nth($new-order, 1) > nth($new-order, 2) {
      $left-width: (nth($new-keys, 2) + $gutter);
      $right-width: (nth($new-keys, 1) + $gutter);
    } @else {
      $left-width: (nth($new-keys, 1) + $gutter);
      $right-width: (nth($new-keys, 2) + $gutter);
    }
    
    @include clearfix();
    @if $map {
      > #{$child} {
        box-sizing: border-box;

        $item-location: 0;
        @if $main-layout == 'left' {
          &:nth-child(#{nth($order, 1)}) {
            width: 100%;
            padding-right: $full-width;
            float: left;
            margin-right: -100%;
          } 
          &:nth-child(#{nth($order, 2)}) {
            width: nth($keys, nth($order, 2));
            margin-right: $right-width;
            float: right;
            margin-left: -100%;
          }
          &:nth-child(#{nth($order, 3)}) {
            width: nth($keys, nth($order, 3));
            float: right;
            margin-left: -100%;
          }
        } @else if $main-layout == 'center' {
          &:nth-child(#{nth($order, 1)}) {
            width: nth($keys, nth($order, 1));
            float: left;
            margin-right: -100%;
          }
          &:nth-child(#{nth($order, 2)}) {
            width: 100%;
            padding-left: $left-width;
            padding-right: $right-width;
            float: left;
            margin-right: -100%;
          }
          &:nth-child(#{nth($order, 3)}) {
            width: nth($keys, nth($order, 3));
            float: right;
            margin-left: -100%;
          }
        } @else if $main-layout == 'right' {
          &:nth-child(#{nth($order, 1)}) {
            width: nth($keys, nth($order, 1));
            float: left;
            margin-right: -100%;
          }
          &:nth-child(#{nth($order, 2)}) {
            width: nth($keys, nth($order, 2));
            margin-left: $left-width;
            float: left;
            margin-right: -100%;
          } 
          &:nth-child(#{nth($order, 3)}) {
            width: 100%;
            padding-left: $full-width;
            float: right;
            margin-left: -100%;
          }
        }

      }
    }
  }
}


.example-liquid-3 { 
  @include liquid-3((null:2, 150px:1, 200px:0) 'gutter' 20px); 
}

