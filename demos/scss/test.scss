@charset "UTF-8";
@import "../../src/scss/rocket"; 
ul, ol { margin: 0; padding: 0; }
li { list-style: none; }
@media \0screen { img { width: auto; } }
img { max-width: 100%; height: auto; }
body { margin: 0; padding: 20px 0 0; }
.container { @include container(1000px 20px); }

// is-number-list
@function is-number-list($key) {
  $is-number-list: ();
  @each $item in $key {
    @if type-of($item) != 'number' {
      $is-number-list: append($is-number-list, false);
    } @else {
      $is-number-list: append($is-number-list, true);
    }
  }

  // return
  @if index($is-number-list, false) {
    @return false;
  } @else {
    @return true;
  }
}

// is-deep-list
@function is-deep-list($key) {
  $is-deep-list: false;
  @if type-of($key) == 'list' {
    @each $item in $key {
      @if type-of($item) == 'list' or type-of($item) == 'map' {
        @if not $is-deep-list {
          $is-deep-list: true;
        }
      }
    }
  }

  @return $is-deep-list;
}


@function grid-get-keys($key) {
  $cols: false;

  @if type-of($key) == 'list' or type-of($key) == 'number' {
    $cols: $key;
  } @else if type-of($key) == 'map' {
    @if length(map-keys($key)) == 1 {
      $cols: nth(map-keys($key), 1);
    } @else {
      $cols: map-keys($key);
    }
  }

  @return $cols;
}

@function grid-get-values($key) {
  $orders: false;

  @if type-of($key) == 'map' {
    @if length(map-keys($key)) == 1 {
      $orders: nth(map-values($key), 1);

    } @else {
      $orders: map-values($key);
    }
  }

  @if $orders {
    $min-order: min($orders...);
    $new-orders: ();

    @if $min-order <= 0 {
      @each $item in $orders {
        $new-orders: append($new-orders, ($item + abs($min-order) + 1));
      }

      $orders: $new-orders;
    }
  }
  @return $orders;
}

@mixin make-grid($cols, $orders, $child, $max-order:0, $list-length:0) {
  $full-col: 0;
  @each $item in $cols {
    $full-col: ($full-col + $item);
  }

  @for $i from 1 through length($cols) {
    > #{$child}:nth-child(#{$i}) {
      @if $orders { @include order((nth($orders, $i) + $max-order)); }
      width: percentage(nth($cols, $i) / $full-col);
    }
  }
}

@mixin pre-make-grid($key, $child) {
  $is-deep-list: is-deep-list($key);
  
  $cols: ();
  $orders: ();

  $list-length: 0;
  $max-order: 0;
  
  @if $is-deep-list {
    // &:before { content: '#{nth($key, 1)}'; }
    @for $i from 1 through length($key) {
      $item: nth($key, $i);

      $cols: grid-get-keys($item);
      $orders: grid-get-values($item);


      @include make-grid($cols, $orders, $child, $max-order, $list-length);
      // &:before { content: '#{$orders}'; }

      @if $cols { $list-length: ($list-length + length($cols)); }
      @if $orders {
        $max-order: ($max-order + max($orders...));
      } @else {
        $max-order: $max-order + 1;
      }
    }
  } @else {
    $cols: grid-get-keys($key);
    $orders: grid-get-values($key);

    @include make-grid($cols, $orders, $child);
  }
  // &:before { content: '#{$list-length}'; }
}

// *** grid *** //
@mixin row($key:false){
  $grid: ro-get-next($key, 'grid');

  $bp: ro-get-next($key, 'bp');
  $condition: ro-get($key, ('min' 'max'), 'min');
  $media-type: ro-get($key, $ro-media-type);

  $child: ro-get-next($key, 'child', 'div');
  $gutter: ro-get-next($key, 'gutter', map-get($ro-layout, 'gutter'));
  $mode: ro-get($key, ('isolate' 'fluid'), 'fluid');
  $direction: ro-get($key, (left right), right);
  $keep: ro-get($key, 'keep', false);

  // get grid
  @if not $grid {
    @if type-of($key) == 'map' {
      $grid: $key;
    } @else if type-of($key) == 'list' {
      
      @if is-number-list($key) {
        $grid: $key;
      } @else {
        @if ro-get-type($key, 'map') {
          $grid: ro-get-type($key, 'map');
        } @else if ro-get-type($key, 'list') and is-number-list(ro-get-type($key, 'list')) {
          @each $item in $key {
            @if not $grid and type-of($item) == 'list' and is-number-list(ro-get-type($key, 'list')) {
              $grid: $item;
            }
          }
        }
      }
    }
  }

  // *** output *** //
  // basis
  @if not $keep {
    // clear float
    @include clearfix();

    // flexbox
    @include flexbox; 
    @include flex-wrap(wrap);
    @if $direction == left {
      @include flex-direction(row-reverse);
    }

    // gutter
    margin-#{$direction}: - $gutter;
    > #{$child} {
      padding-#{$direction}: $gutter;
      box-sizing: border-box;
    }
  }

  @if $grid {
    $has-breakpoints: false;
    @if type-of($grid) == 'map' {
      $v-bp: nth(map-keys($grid), 1);
      @if $v-bp == 'default' or type-of($v-bp) == 'number' and not unitless($v-bp) {
        $has-breakpoints: true;
      }
    }

    @if $has-breakpoints {
      $grid-bp: map-keys($grid);
      @each $item in $grid-bp {
        @if $item == 'default' {
          @include pre-make-grid(map-get($grid, $item), $child);
        } @else if type-of($item) != 'number' and $bp and map-has-key($bp, $item) {
          @include bp($condition $media-type map-get($bp, $item)) {
            @include pre-make-grid(map-get($grid, $item), $child);
          }
        } @else {
          @include bp($condition $media-type $item) {
            @include pre-make-grid(map-get($grid, $item), $child);
          }
        }
      }
    } @else {
      @include pre-make-grid($grid, $child);
    }
  }


  // @if $map {
  //   $keys: map-keys($map);
  //   $values: map-values($map);

    // get order
    // $u-values: list-ascend(remove-dup($values)); // reordered values
    // @each $u-val in $u-values {
    //   @for $i from 1 through length($values) {
    //     @if nth($values, $i) == $u-val {
    //       $order: append($order, $i);
    //     }
    //   }
    // }
//   } @else {
//     $values: (0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
//     $order: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
//   }
  
  // get full width
  // $full-width: 0;
  // @each $item in $keys {
  //   $full-width: $full-width + $item;
  // }

  // @if $keys {
  //   > #{$child} {

  //     // set col width
  //     @for $i from 1 through length($keys) {
  //       &:nth-child(#{$i}) {
  //         @include order(nth($values, $i));
  //         width: percentage(nth($keys, $i) / $full-width); 
  //       }
  //     }
  //   }
  // }

  // no-flexbox
  // .no-flexbox.no-flexboxtweener & {
  //   @if $keys {
  //     > #{$child} {
  //       @if not $keep {
  //         float: opposite($direction);
  //         @if $mode == 'isolate' { margin-#{$direction}: -100%; }
  //       }
        
  //       // reset direction value
  //       &:nth-child(n+1) { #{opposite($direction)}: 0; }

  //       @for $i from 1 through length($keys) {
  //         &:nth-child(#{$i}) {
  //           // set col order
  //           $location: index($order, $i);
  //           $location-val: 0;
  //           @if $mode == 'isolate' {
  //             @if $location != 1 {
  //               @for $j from 1 to $location {
  //                 $location-val: ($location-val + nth($keys, nth($order, $j)));
  //               }
  //               margin-#{opposite($direction)}: percentage($location-val / $full-width);
  //             } @else {
  //               margin-#{opposite($direction)}: 0;
  //             }
  //           } @else if $mode == 'fluid' {
  //             $origin-val: 0;
  //             $move-val: 0;
  //             // get origin-val
  //             @if $i != 1 {
  //               @for $h from 1 to $i {
  //                 $origin-val: ($origin-val + nth($keys, $h));
  //               }
  //             } @else {
  //               $origin-val: 0;
  //             }
  //             // get location-val
  //             @if $location != 1 {
  //               @for $q from 1 to $location {
  //                 $location-val: ($location-val + nth($keys, nth($order, $q)));
  //               }
  //             } @else {
  //               $location-val: 0;
  //             }
  //             // get move-val
  //             $move-val: ($location-val - $origin-val);

  //             @if $move-val != 0 {
  //               position: relative;
  //               #{opposite($direction)}: percentage($move-val / $full-width);
  //             }
  //           }
  //         }
  //       }
  //     }
  //   }
  // }
}

$row: (3:1, 5:0, 6:0, 4:0, 2:0);
// $row: (3 5 6 4 2);

.row { @include row(grid $row); }